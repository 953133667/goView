{"version":3,"sources":["ec.js"],"names":[],"mappings":"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","file":"ec-compiled.js","sourcesContent":["// Basic Javascript Elliptic Curve implementation\n// Ported loosely from BouncyCastle's Java EC code\n// Only Fp curves implemented for now\n\n// Requires jsbn.js and jsbn2.js\nvar BigInteger = require('jsbn').BigInteger\nvar Barrett = BigInteger.prototype.Barrett\n\n// ----------------\n// ECFieldElementFp\n\n// constructor\nfunction ECFieldElementFp(q,x) {\n    this.x = x;\n    // TODO if(x.compareTo(q) >= 0) error\n    this.q = q;\n}\n\nfunction feFpEquals(other) {\n    if(other == this) return true;\n    return (this.q.equals(other.q) && this.x.equals(other.x));\n}\n\nfunction feFpToBigInteger() {\n    return this.x;\n}\n\nfunction feFpNegate() {\n    return new ECFieldElementFp(this.q, this.x.negate().mod(this.q));\n}\n\nfunction feFpAdd(b) {\n    return new ECFieldElementFp(this.q, this.x.add(b.toBigInteger()).mod(this.q));\n}\n\nfunction feFpSubtract(b) {\n    return new ECFieldElementFp(this.q, this.x.subtract(b.toBigInteger()).mod(this.q));\n}\n\nfunction feFpMultiply(b) {\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger()).mod(this.q));\n}\n\nfunction feFpSquare() {\n    return new ECFieldElementFp(this.q, this.x.square().mod(this.q));\n}\n\nfunction feFpDivide(b) {\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger().modInverse(this.q)).mod(this.q));\n}\n\nECFieldElementFp.prototype.equals = feFpEquals;\nECFieldElementFp.prototype.toBigInteger = feFpToBigInteger;\nECFieldElementFp.prototype.negate = feFpNegate;\nECFieldElementFp.prototype.add = feFpAdd;\nECFieldElementFp.prototype.subtract = feFpSubtract;\nECFieldElementFp.prototype.multiply = feFpMultiply;\nECFieldElementFp.prototype.square = feFpSquare;\nECFieldElementFp.prototype.divide = feFpDivide;\n\n// ----------------\n// ECPointFp\n\n// constructor\nfunction ECPointFp(curve,x,y,z) {\n    this.curve = curve;\n    this.x = x;\n    this.y = y;\n    // Projective coordinates: either zinv == null or z * zinv == 1\n    // z and zinv are just BigIntegers, not fieldElements\n    if(z == null) {\n      this.z = BigInteger.ONE;\n    }\n    else {\n      this.z = z;\n    }\n    this.zinv = null;\n    //TODO: compression flag\n}\n\nfunction pointFpGetX() {\n    if(this.zinv == null) {\n      this.zinv = this.z.modInverse(this.curve.q);\n    }\n    var r = this.x.toBigInteger().multiply(this.zinv);\n    this.curve.reduce(r);\n    return this.curve.fromBigInteger(r);\n}\n\nfunction pointFpGetY() {\n    if(this.zinv == null) {\n      this.zinv = this.z.modInverse(this.curve.q);\n    }\n    var r = this.y.toBigInteger().multiply(this.zinv);\n    this.curve.reduce(r);\n    return this.curve.fromBigInteger(r);\n}\n\nfunction pointFpEquals(other) {\n    if(other == this) return true;\n    if(this.isInfinity()) return other.isInfinity();\n    if(other.isInfinity()) return this.isInfinity();\n    var u, v;\n    // u = Y2 * Z1 - Y1 * Z2\n    u = other.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(other.z)).mod(this.curve.q);\n    if(!u.equals(BigInteger.ZERO)) return false;\n    // v = X2 * Z1 - X1 * Z2\n    v = other.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(other.z)).mod(this.curve.q);\n    return v.equals(BigInteger.ZERO);\n}\n\nfunction pointFpIsInfinity() {\n    if((this.x == null) && (this.y == null)) return true;\n    return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO);\n}\n\nfunction pointFpNegate() {\n    return new ECPointFp(this.curve, this.x, this.y.negate(), this.z);\n}\n\nfunction pointFpAdd(b) {\n    if(this.isInfinity()) return b;\n    if(b.isInfinity()) return this;\n\n    // u = Y2 * Z1 - Y1 * Z2\n    var u = b.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(b.z)).mod(this.curve.q);\n    // v = X2 * Z1 - X1 * Z2\n    var v = b.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(b.z)).mod(this.curve.q);\n\n    if(BigInteger.ZERO.equals(v)) {\n        if(BigInteger.ZERO.equals(u)) {\n            return this.twice(); // this == b, so double\n        }\n\treturn this.curve.getInfinity(); // this = -b, so infinity\n    }\n\n    var THREE = new BigInteger(\"3\");\n    var x1 = this.x.toBigInteger();\n    var y1 = this.y.toBigInteger();\n    var x2 = b.x.toBigInteger();\n    var y2 = b.y.toBigInteger();\n\n    var v2 = v.square();\n    var v3 = v2.multiply(v);\n    var x1v2 = x1.multiply(v2);\n    var zu2 = u.square().multiply(this.z);\n\n    // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)\n    var x3 = zu2.subtract(x1v2.shiftLeft(1)).multiply(b.z).subtract(v3).multiply(v).mod(this.curve.q);\n    // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3\n    var y3 = x1v2.multiply(THREE).multiply(u).subtract(y1.multiply(v3)).subtract(zu2.multiply(u)).multiply(b.z).add(u.multiply(v3)).mod(this.curve.q);\n    // z3 = v^3 * z1 * z2\n    var z3 = v3.multiply(this.z).multiply(b.z).mod(this.curve.q);\n\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\n}\n\nfunction pointFpTwice() {\n    if(this.isInfinity()) return this;\n    if(this.y.toBigInteger().signum() == 0) return this.curve.getInfinity();\n\n    // TODO: optimized handling of constants\n    var THREE = new BigInteger(\"3\");\n    var x1 = this.x.toBigInteger();\n    var y1 = this.y.toBigInteger();\n\n    var y1z1 = y1.multiply(this.z);\n    var y1sqz1 = y1z1.multiply(y1).mod(this.curve.q);\n    var a = this.curve.a.toBigInteger();\n\n    // w = 3 * x1^2 + a * z1^2\n    var w = x1.square().multiply(THREE);\n    if(!BigInteger.ZERO.equals(a)) {\n      w = w.add(this.z.square().multiply(a));\n    }\n    w = w.mod(this.curve.q);\n    //this.curve.reduce(w);\n    // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)\n    var x3 = w.square().subtract(x1.shiftLeft(3).multiply(y1sqz1)).shiftLeft(1).multiply(y1z1).mod(this.curve.q);\n    // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3\n    var y3 = w.multiply(THREE).multiply(x1).subtract(y1sqz1.shiftLeft(1)).shiftLeft(2).multiply(y1sqz1).subtract(w.square().multiply(w)).mod(this.curve.q);\n    // z3 = 8 * (y1 * z1)^3\n    var z3 = y1z1.square().multiply(y1z1).shiftLeft(3).mod(this.curve.q);\n\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\n}\n\n// Simple NAF (Non-Adjacent Form) multiplication algorithm\n// TODO: modularize the multiplication algorithm\nfunction pointFpMultiply(k) {\n    if(this.isInfinity()) return this;\n    if(k.signum() == 0) return this.curve.getInfinity();\n\n    var e = k;\n    var h = e.multiply(new BigInteger(\"3\"));\n\n    var neg = this.negate();\n    var R = this;\n\n    var i;\n    for(i = h.bitLength() - 2; i > 0; --i) {\n\tR = R.twice();\n\n\tvar hBit = h.testBit(i);\n\tvar eBit = e.testBit(i);\n\n\tif (hBit != eBit) {\n\t    R = R.add(hBit ? this : neg);\n\t}\n    }\n\n    return R;\n}\n\n// Compute this*j + x*k (simultaneous multiplication)\nfunction pointFpMultiplyTwo(j,x,k) {\n  var i;\n  if(j.bitLength() > k.bitLength())\n    i = j.bitLength() - 1;\n  else\n    i = k.bitLength() - 1;\n\n  var R = this.curve.getInfinity();\n  var both = this.add(x);\n  while(i >= 0) {\n    R = R.twice();\n    if(j.testBit(i)) {\n      if(k.testBit(i)) {\n        R = R.add(both);\n      }\n      else {\n        R = R.add(this);\n      }\n    }\n    else {\n      if(k.testBit(i)) {\n        R = R.add(x);\n      }\n    }\n    --i;\n  }\n\n  return R;\n}\n\nECPointFp.prototype.getX = pointFpGetX;\nECPointFp.prototype.getY = pointFpGetY;\nECPointFp.prototype.equals = pointFpEquals;\nECPointFp.prototype.isInfinity = pointFpIsInfinity;\nECPointFp.prototype.negate = pointFpNegate;\nECPointFp.prototype.add = pointFpAdd;\nECPointFp.prototype.twice = pointFpTwice;\nECPointFp.prototype.multiply = pointFpMultiply;\nECPointFp.prototype.multiplyTwo = pointFpMultiplyTwo;\n\n// ----------------\n// ECCurveFp\n\n// constructor\nfunction ECCurveFp(q,a,b) {\n    this.q = q;\n    this.a = this.fromBigInteger(a);\n    this.b = this.fromBigInteger(b);\n    this.infinity = new ECPointFp(this, null, null);\n    this.reducer = new Barrett(this.q);\n}\n\nfunction curveFpGetQ() {\n    return this.q;\n}\n\nfunction curveFpGetA() {\n    return this.a;\n}\n\nfunction curveFpGetB() {\n    return this.b;\n}\n\nfunction curveFpEquals(other) {\n    if(other == this) return true;\n    return(this.q.equals(other.q) && this.a.equals(other.a) && this.b.equals(other.b));\n}\n\nfunction curveFpGetInfinity() {\n    return this.infinity;\n}\n\nfunction curveFpFromBigInteger(x) {\n    return new ECFieldElementFp(this.q, x);\n}\n\nfunction curveReduce(x) {\n    this.reducer.reduce(x);\n}\n\n// for now, work with hex strings because they're easier in JS\nfunction curveFpDecodePointHex(s) {\n    switch(parseInt(s.substr(0,2), 16)) { // first byte\n    case 0:\n\treturn this.infinity;\n    case 2:\n    case 3:\n\t// point compression not supported yet\n\treturn null;\n    case 4:\n    case 6:\n    case 7:\n\tvar len = (s.length - 2) / 2;\n\tvar xHex = s.substr(2, len);\n\tvar yHex = s.substr(len+2, len);\n\n\treturn new ECPointFp(this,\n\t\t\t     this.fromBigInteger(new BigInteger(xHex, 16)),\n\t\t\t     this.fromBigInteger(new BigInteger(yHex, 16)));\n\n    default: // unsupported\n\treturn null;\n    }\n}\n\nfunction curveFpEncodePointHex(p) {\n\tif (p.isInfinity()) return \"00\";\n\tvar xHex = p.getX().toBigInteger().toString(16);\n\tvar yHex = p.getY().toBigInteger().toString(16);\n\tvar oLen = this.getQ().toString(16).length;\n\tif ((oLen % 2) != 0) oLen++;\n\twhile (xHex.length < oLen) {\n\t\txHex = \"0\" + xHex;\n\t}\n\twhile (yHex.length < oLen) {\n\t\tyHex = \"0\" + yHex;\n\t}\n\treturn \"04\" + xHex + yHex;\n}\n\nECCurveFp.prototype.getQ = curveFpGetQ;\nECCurveFp.prototype.getA = curveFpGetA;\nECCurveFp.prototype.getB = curveFpGetB;\nECCurveFp.prototype.equals = curveFpEquals;\nECCurveFp.prototype.getInfinity = curveFpGetInfinity;\nECCurveFp.prototype.fromBigInteger = curveFpFromBigInteger;\nECCurveFp.prototype.reduce = curveReduce;\n//ECCurveFp.prototype.decodePointHex = curveFpDecodePointHex;\nECCurveFp.prototype.encodePointHex = curveFpEncodePointHex;\n\n// from: https://github.com/kaielvin/jsbn-ec-point-compression\nECCurveFp.prototype.decodePointHex = function(s)\n{\n\tvar yIsEven;\n    switch(parseInt(s.substr(0,2), 16)) { // first byte\n    case 0:\n\treturn this.infinity;\n    case 2:\n\tyIsEven = false;\n    case 3:\n\tif(yIsEven == undefined) yIsEven = true;\n\tvar len = s.length - 2;\n\tvar xHex = s.substr(2, len);\n\tvar x = this.fromBigInteger(new BigInteger(xHex,16));\n\tvar alpha = x.multiply(x.square().add(this.getA())).add(this.getB());\n\tvar beta = alpha.sqrt();\n\n    if (beta == null) throw \"Invalid point compression\";\n\n    var betaValue = beta.toBigInteger();\n    if (betaValue.testBit(0) != yIsEven)\n    {\n        // Use the other root\n        beta = this.fromBigInteger(this.getQ().subtract(betaValue));\n    }\n    return new ECPointFp(this,x,beta);\n    case 4:\n    case 6:\n    case 7:\n\tvar len = (s.length - 2) / 2;\n\tvar xHex = s.substr(2, len);\n\tvar yHex = s.substr(len+2, len);\n\n\treturn new ECPointFp(this,\n\t\t\t     this.fromBigInteger(new BigInteger(xHex, 16)),\n\t\t\t     this.fromBigInteger(new BigInteger(yHex, 16)));\n\n    default: // unsupported\n\treturn null;\n    }\n}\nECCurveFp.prototype.encodeCompressedPointHex = function(p)\n{\n\tif (p.isInfinity()) return \"00\";\n\tvar xHex = p.getX().toBigInteger().toString(16);\n\tvar oLen = this.getQ().toString(16).length;\n\tif ((oLen % 2) != 0) oLen++;\n\twhile (xHex.length < oLen)\n\t\txHex = \"0\" + xHex;\n\tvar yPrefix;\n\tif(p.getY().toBigInteger().isEven()) yPrefix = \"02\";\n\telse                                 yPrefix = \"03\";\n\n\treturn yPrefix + xHex;\n}\n\n\nECFieldElementFp.prototype.getR = function()\n{\n\tif(this.r != undefined) return this.r;\n\n    this.r = null;\n    var bitLength = this.q.bitLength();\n    if (bitLength > 128)\n    {\n        var firstWord = this.q.shiftRight(bitLength - 64);\n        if (firstWord.intValue() == -1)\n        {\n            this.r = BigInteger.ONE.shiftLeft(bitLength).subtract(this.q);\n        }\n    }\n    return this.r;\n}\nECFieldElementFp.prototype.modMult = function(x1,x2)\n{\n    return this.modReduce(x1.multiply(x2));\n}\nECFieldElementFp.prototype.modReduce = function(x)\n{\n    if (this.getR() != null)\n    {\n        var qLen = q.bitLength();\n        while (x.bitLength() > (qLen + 1))\n        {\n            var u = x.shiftRight(qLen);\n            var v = x.subtract(u.shiftLeft(qLen));\n            if (!this.getR().equals(BigInteger.ONE))\n            {\n                u = u.multiply(this.getR());\n            }\n            x = u.add(v); \n        }\n        while (x.compareTo(q) >= 0)\n        {\n            x = x.subtract(q);\n        }\n    }\n    else\n    {\n        x = x.mod(q);\n    }\n    return x;\n}\nECFieldElementFp.prototype.sqrt = function()\n{\n    if (!this.q.testBit(0)) throw \"unsupported\";\n\n    // p mod 4 == 3\n    if (this.q.testBit(1))\n    {\n    \tvar z = new ECFieldElementFp(this.q,this.x.modPow(this.q.shiftRight(2).add(BigInteger.ONE),this.q));\n    \treturn z.square().equals(this) ? z : null;\n    }\n\n    // p mod 4 == 1\n    var qMinusOne = this.q.subtract(BigInteger.ONE);\n\n    var legendreExponent = qMinusOne.shiftRight(1);\n    if (!(this.x.modPow(legendreExponent, this.q).equals(BigInteger.ONE)))\n    {\n        return null;\n    }\n\n    var u = qMinusOne.shiftRight(2);\n    var k = u.shiftLeft(1).add(BigInteger.ONE);\n\n    var Q = this.x;\n    var fourQ = modDouble(modDouble(Q));\n\n    var U, V;\n    do\n    {\n        var P;\n        do\n        {\n            P = new BigInteger(this.q.bitLength(), new SecureRandom());\n        }\n        while (P.compareTo(this.q) >= 0\n            || !(P.multiply(P).subtract(fourQ).modPow(legendreExponent, this.q).equals(qMinusOne)));\n\n        var result = this.lucasSequence(P, Q, k);\n        U = result[0];\n        V = result[1];\n\n        if (this.modMult(V, V).equals(fourQ))\n        {\n            // Integer division by 2, mod q\n            if (V.testBit(0))\n            {\n                V = V.add(q);\n            }\n\n            V = V.shiftRight(1);\n\n            return new ECFieldElementFp(q,V);\n        }\n    }\n    while (U.equals(BigInteger.ONE) || U.equals(qMinusOne));\n\n    return null;\n}\nECFieldElementFp.prototype.lucasSequence = function(P,Q,k)\n{\n    var n = k.bitLength();\n    var s = k.getLowestSetBit();\n\n    var Uh = BigInteger.ONE;\n    var Vl = BigInteger.TWO;\n    var Vh = P;\n    var Ql = BigInteger.ONE;\n    var Qh = BigInteger.ONE;\n\n    for (var j = n - 1; j >= s + 1; --j)\n    {\n        Ql = this.modMult(Ql, Qh);\n\n        if (k.testBit(j))\n        {\n            Qh = this.modMult(Ql, Q);\n            Uh = this.modMult(Uh, Vh);\n            Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n            Vh = this.modReduce(Vh.multiply(Vh).subtract(Qh.shiftLeft(1)));\n        }\n        else\n        {\n            Qh = Ql;\n            Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));\n            Vh = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n            Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));\n        }\n    }\n\n    Ql = this.modMult(Ql, Qh);\n    Qh = this.modMult(Ql, Q);\n    Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));\n    Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n    Ql = this.modMult(Ql, Qh);\n\n    for (var j = 1; j <= s; ++j)\n    {\n        Uh = this.modMult(Uh, Vl);\n        Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));\n        Ql = this.modMult(Ql, Ql);\n    }\n\n    return [ Uh, Vl ];\n}\n\nvar exports = {\n  ECCurveFp: ECCurveFp,\n  ECPointFp: ECPointFp,\n  ECFieldElementFp: ECFieldElementFp\n}\n\nmodule.exports = exports\n"]}