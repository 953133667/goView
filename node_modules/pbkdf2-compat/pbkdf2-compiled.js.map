{"version":3,"sources":["pbkdf2.js"],"names":[],"mappings":"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","file":"pbkdf2-compiled.js","sourcesContent":["module.exports = function(crypto) {\n  function pbkdf2(password, salt, iterations, keylen, digest, callback) {\n    if ('function' === typeof digest) {\n      callback = digest\n      digest = undefined\n    }\n\n    if ('function' !== typeof callback)\n      throw new Error('No callback provided to pbkdf2')\n\n    setTimeout(function() {\n      var result\n\n      try {\n        result = pbkdf2Sync(password, salt, iterations, keylen, digest)\n      } catch (e) {\n        return callback(e)\n      }\n\n      callback(undefined, result)\n    })\n  }\n\n  function pbkdf2Sync(password, salt, iterations, keylen, digest) {\n    if ('number' !== typeof iterations)\n      throw new TypeError('Iterations not a number')\n\n    if (iterations < 0)\n      throw new TypeError('Bad iterations')\n\n    if ('number' !== typeof keylen)\n      throw new TypeError('Key length not a number')\n\n    if (keylen < 0)\n      throw new TypeError('Bad key length')\n\n    digest = digest || 'sha1'\n\n    if (!Buffer.isBuffer(password)) password = new Buffer(password)\n    if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)\n\n    var hLen, l = 1, r, T\n    var DK = new Buffer(keylen)\n    var block1 = new Buffer(salt.length + 4)\n    salt.copy(block1, 0, 0, salt.length)\n\n    for (var i = 1; i <= l; i++) {\n      block1.writeUInt32BE(i, salt.length)\n\n      var U = crypto.createHmac(digest, password).update(block1).digest()\n\n      if (!hLen) {\n        hLen = U.length\n        T = new Buffer(hLen)\n        l = Math.ceil(keylen / hLen)\n        r = keylen - (l - 1) * hLen\n\n        if (keylen > (Math.pow(2, 32) - 1) * hLen)\n          throw new TypeError('keylen exceeds maximum length')\n      }\n\n      U.copy(T, 0, 0, hLen)\n\n      for (var j = 1; j < iterations; j++) {\n        U = crypto.createHmac(digest, password).update(U).digest()\n\n        for (var k = 0; k < hLen; k++) {\n          T[k] ^= U[k]\n        }\n      }\n\n      var destPos = (i - 1) * hLen\n      var len = (i == l ? r : hLen)\n      T.copy(DK, destPos, 0, len)\n    }\n\n    return DK\n  }\n\n  return {\n    pbkdf2: pbkdf2,\n    pbkdf2Sync: pbkdf2Sync\n  }\n}\n"]}