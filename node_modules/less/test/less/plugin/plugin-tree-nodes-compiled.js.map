{"version":3,"sources":["plugin-tree-nodes.js"],"names":[],"mappings":"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","file":"plugin-tree-nodes-compiled.js","sourcesContent":["functions.addMultiple({\n\n    \"test-comment\": function() {\n        return new tree.Combinator(' ');\n    },\n    \"test-directive\": function(arg1, arg2) {\n        return new tree.Directive(arg1.value, new tree.Anonymous(arg2.value));\n    },\n    \"test-extend\": function() {\n        //TODO\n    },\n    \"test-import\": function() {\n        //TODO\n    },\n    \"test-media\": function() {\n        //TODO\n    },\n    \"test-mixin-call\": function() {\n        //TODO\n    },\n    \"test-mixin-definition\": function() {\n        //TODO\n    },\n    \"test-ruleset-call\": function() {\n        return new tree.Combinator(' ');\n    },\n    // Functions must return something. Must 'return true' if they produce no output.\n    \"test-undefined\": function() { },\n\n    // These cause root errors\n    \"test-alpha\": function() {\n        return new tree.Alpha(30);\n    },\n    \"test-assignment\": function() {\n        return new tree.Assignment(\"bird\", \"robin\");\n    },\n    \"test-attribute\": function() {\n        return new tree.Attribute(\"foo\", \"=\", \"bar\");\n    },\n    \"test-call\": function() {\n        return new tree.Call(\"foo\");\n    },\n    \"test-color\": function() {\n        return new tree.Color([50, 50, 50]);\n    },\n    \"test-condition\": function() {\n        return new tree.Condition('<', new tree.Value([0]), new tree.Value([1]));\n    },\n    \"test-detached-ruleset\" : function() {\n        var rule = new tree.Rule('prop', new tree.Anonymous('value'));\n        return new tree.DetachedRuleset(new tree.Ruleset(\"\", [ rule ]));\n    },\n    \"test-dimension\": function() {\n        return new tree.Dimension(1, 'px');\n    },\n    \"test-element\": function() {\n        return new tree.Element('+', 'a');\n    },\n    \"test-expression\": function() {\n        return new tree.Expression([1, 2, 3]);\n    },\n    \"test-keyword\": function() {\n        return new tree.Keyword('foo');\n    },\n    \"test-operation\": function() {\n        return new tree.Operation('+', [1, 2]);\n    },\n    \"test-quoted\": function() {\n        return new tree.Quoted('\"', 'foo');\n    },\n    \"test-selector\": function() {\n        return new tree.Selector([new tree.Element('a')]);\n    },\n    \"test-url\": function() {\n        return new tree.URL('http://google.com');\n    },\n    \"test-value\": function() {\n        return new tree.Value([1]);\n    }\n});"]}