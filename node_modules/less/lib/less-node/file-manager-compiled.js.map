{"version":3,"sources":["file-manager.js"],"names":[],"mappings":"AAAA,IAAI,OAAO,QAAQ,MAAR,CAAX;AAAA,IACI,KAAK,QAAQ,MAAR,CADT;AAAA,IAEI,kBAFJ;AAAA,IAGI,sBAAsB,QAAQ,8CAAR,CAH1B;;AAKA,IAAI;AACA,yBAAqB,OAAO,OAAP,KAAmB,WAAnB,GAAiC,QAAQ,SAAR,CAAjC,GAAsD,OAA3E;AACH,CAFD,CAEE,OAAM,CAAN,EAAS,CACV;;AAED,IAAI,cAAc,YAAW,CAC5B,CADD;;AAGA,YAAY,SAAZ,GAAwB,IAAI,mBAAJ,EAAxB;;AAEA,YAAY,SAAZ,CAAsB,QAAtB,GAAiC,UAAS,QAAT,EAAmB,gBAAnB,EAAqC,OAArC,EAA8C,WAA9C,EAA2D;AACxF,WAAO,IAAP;AACH,CAFD;AAGA,YAAY,SAAZ,CAAsB,YAAtB,GAAqC,UAAS,QAAT,EAAmB,gBAAnB,EAAqC,OAArC,EAA8C,WAA9C,EAA2D;AAC5F,WAAO,IAAP;AACH,CAFD;;AAIA,YAAY,SAAZ,CAAsB,QAAtB,GAAiC,UAAS,QAAT,EAAmB,gBAAnB,EAAqC,OAArC,EAA8C,WAA9C,EAA2D,QAA3D,EAAqE;AAClG,QAAI,YAAJ;AAAA,QACI,IADJ;AAAA,QAEI,qBAAqB,KAAK,cAAL,CAAoB,QAApB,CAFzB;AAAA,QAGI,iBAAiB,EAHrB;;AAKA,cAAU,WAAW,EAArB;;AAEA,QAAI,QAAQ,UAAR,IAAsB,CAAC,kBAA3B,EAA+C;AAC3C,eAAO,KAAK,YAAL,CAAkB,QAAlB,EAA4B,gBAA5B,EAA8C,OAA9C,EAAuD,WAAvD,EAAoE,OAApE,CAAP;AACA,iBAAS,KAAK,KAAd,EAAqB,IAArB;AACA;AACH;;AAED,QAAI,QAAQ,qBAAqB,CAAC,EAAD,CAArB,GAA4B,CAAC,gBAAD,CAAxC;AACA,QAAI,QAAQ,KAAZ,EAAmB;AAAE,cAAM,IAAN,CAAW,KAAX,CAAiB,KAAjB,EAAwB,QAAQ,KAAhC;AAAyC;AAC9D,QAAI,CAAC,kBAAD,IAAuB,MAAM,OAAN,CAAc,GAAd,MAAuB,CAAC,CAAnD,EAAsD;AAAE,cAAM,IAAN,CAAW,GAAX;AAAkB;;AAE1E;AACA;AACA;AACA,WAAO,IAAI,kBAAJ,CAAuB,UAAS,OAAT,EAAkB,MAAlB,EAA0B;AACnD,kBAAS,YAAT,CAAsB,CAAtB,EAAyB;AACtB,gBAAI,IAAI,MAAM,MAAd,EAAsB;AAClB,+BAAe,QAAf;AACA,oBAAI,MAAM,CAAN,CAAJ,EAAc;AACV,mCAAe,KAAK,IAAL,CAAU,MAAM,CAAN,CAAV,EAAoB,YAApB,CAAf;AACH;AACD,mBAAG,IAAH,CAAQ,YAAR,EAAsB,UAAU,GAAV,EAAe;AACjC,wBAAI,GAAJ,EAAS;AACL,uCAAe,IAAf,CAAoB,YAApB;AACA,qCAAa,IAAI,CAAjB;AACH,qBAHD,MAGO;AACH,2BAAG,QAAH,CAAY,YAAZ,EAA0B,OAA1B,EAAmC,UAAS,CAAT,EAAY,IAAZ,EAAkB;AACjD,gCAAI,CAAJ,EAAO;AAAE,uCAAO,CAAP,EAAW;AAAS;;AAE7B,oCAAQ,EAAE,UAAU,IAAZ,EAAkB,UAAU,YAA5B,EAAR;AACH,yBAJD;AAKH;AACJ,iBAXD;AAYH,aAjBD,MAiBO;AACH,uBAAO,EAAE,MAAM,MAAR,EAAgB,SAAS,MAAM,QAAN,GAAiB,0BAAjB,GAA8C,eAAe,IAAf,CAAoB,GAApB,CAAvE,EAAP;AACH;AACJ,SArBA,EAqBC,CArBD,CAAD;AAsBH,KAvBM,CAAP;AAwBH,CA7CD;;AA+CA,YAAY,SAAZ,CAAsB,YAAtB,GAAqC,UAAS,QAAT,EAAmB,gBAAnB,EAAqC,OAArC,EAA8C,WAA9C,EAA2D,QAA3D,EAAqE;AACtG,QAAI,YAAJ;AAAA,QAAkB,KAAlB;AAAA,QAAyB,iBAAiB,EAA1C;AAAA,QAA8C,qBAAqB,KAAK,cAAL,CAAoB,QAApB,CAAnE;AAAA,QAAmG,IAAnG;AACA,cAAU,WAAW,EAArB;;AAEA,YAAQ,qBAAqB,CAAC,EAAD,CAArB,GAA4B,CAAC,gBAAD,CAApC;AACA,QAAI,QAAQ,KAAZ,EAAmB;AACf,cAAM,IAAN,CAAW,KAAX,CAAiB,KAAjB,EAAwB,QAAQ,KAAhC;AACH;AACD,QAAI,CAAC,kBAAD,IAAuB,MAAM,OAAN,CAAc,GAAd,MAAuB,CAAC,CAAnD,EAAsD;AAClD,cAAM,IAAN,CAAW,GAAX;AACH;;AAED,QAAI,GAAJ,EAAS,MAAT;AACA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAAM,MAA1B,EAAkC,GAAlC,EAAuC;AACnC,YAAI;AACA,2BAAe,QAAf;AACA,gBAAI,MAAM,CAAN,CAAJ,EAAc;AACV,+BAAe,KAAK,IAAL,CAAU,MAAM,CAAN,CAAV,EAAoB,YAApB,CAAf;AACH;AACD,2BAAe,IAAf,CAAoB,YAApB;AACA,eAAG,QAAH,CAAY,YAAZ;AACA;AACH,SARD,CAQE,OAAO,CAAP,EAAU;AACR,2BAAe,IAAf;AACH;AACJ;;AAED,QAAI,CAAC,YAAL,EAAmB;AACf,cAAM,EAAE,MAAM,MAAR,EAAgB,SAAS,MAAM,QAAN,GAAiB,0BAAjB,GAA8C,eAAe,IAAf,CAAoB,GAApB,CAAvE,EAAN;AACA,iBAAS,EAAE,OAAO,GAAT,EAAT;AACH,KAHD,MAGO;AACH,eAAO,GAAG,YAAH,CAAgB,YAAhB,EAA8B,QAA9B,CAAP;AACA,iBAAS,EAAE,UAAU,IAAZ,EAAkB,UAAU,YAA5B,EAAT;AACH;;AAED,WAAO,MAAP;AACH,CApCD;;AAsCA,OAAO,OAAP,GAAiB,WAAjB","file":"file-manager-compiled.js","sourcesContent":["var path = require('path'),\n    fs = require('./fs'),\n    PromiseConstructor,\n    AbstractFileManager = require(\"../less/environment/abstract-file-manager.js\");\n\ntry {\n    PromiseConstructor = typeof Promise === 'undefined' ? require('promise') : Promise;\n} catch(e) {\n}\n\nvar FileManager = function() {\n};\n\nFileManager.prototype = new AbstractFileManager();\n\nFileManager.prototype.supports = function(filename, currentDirectory, options, environment) {\n    return true;\n};\nFileManager.prototype.supportsSync = function(filename, currentDirectory, options, environment) {\n    return true;\n};\n\nFileManager.prototype.loadFile = function(filename, currentDirectory, options, environment, callback) {\n    var fullFilename,\n        data,\n        isAbsoluteFilename = this.isPathAbsolute(filename),\n        filenamesTried = [];\n\n    options = options || {};\n\n    if (options.syncImport || !PromiseConstructor) {\n        data = this.loadFileSync(filename, currentDirectory, options, environment, 'utf-8');\n        callback(data.error, data);\n        return;\n    }\n\n    var paths = isAbsoluteFilename ? [\"\"] : [currentDirectory];\n    if (options.paths) { paths.push.apply(paths, options.paths); }\n    if (!isAbsoluteFilename && paths.indexOf('.') === -1) { paths.push('.'); }\n\n    // promise is guaranteed to be asyncronous\n    // which helps as it allows the file handle\n    // to be closed before it continues with the next file\n    return new PromiseConstructor(function(fulfill, reject) {\n        (function tryPathIndex(i) {\n            if (i < paths.length) {\n                fullFilename = filename;\n                if (paths[i]) {\n                    fullFilename = path.join(paths[i], fullFilename);\n                }\n                fs.stat(fullFilename, function (err) {\n                    if (err) {\n                        filenamesTried.push(fullFilename);\n                        tryPathIndex(i + 1);\n                    } else {\n                        fs.readFile(fullFilename, 'utf-8', function(e, data) {\n                            if (e) { reject(e); return; }\n\n                            fulfill({ contents: data, filename: fullFilename});\n                        });\n                    }\n                });\n            } else {\n                reject({ type: 'File', message: \"'\" + filename + \"' wasn't found. Tried - \" + filenamesTried.join(\",\") });\n            }\n        }(0));\n    });\n};\n\nFileManager.prototype.loadFileSync = function(filename, currentDirectory, options, environment, encoding) {\n    var fullFilename, paths, filenamesTried = [], isAbsoluteFilename = this.isPathAbsolute(filename) , data;\n    options = options || {};\n\n    paths = isAbsoluteFilename ? [\"\"] : [currentDirectory];\n    if (options.paths) {\n        paths.push.apply(paths, options.paths);\n    }\n    if (!isAbsoluteFilename && paths.indexOf('.') === -1) {\n        paths.push('.');\n    }\n\n    var err, result;\n    for (var i = 0; i < paths.length; i++) {\n        try {\n            fullFilename = filename;\n            if (paths[i]) {\n                fullFilename = path.join(paths[i], fullFilename);\n            }\n            filenamesTried.push(fullFilename);\n            fs.statSync(fullFilename);\n            break;\n        } catch (e) {\n            fullFilename = null;\n        }\n    }\n\n    if (!fullFilename) {\n        err = { type: 'File', message: \"'\" + filename + \"' wasn't found. Tried - \" + filenamesTried.join(\",\") };\n        result = { error: err };\n    } else {\n        data = fs.readFileSync(fullFilename, encoding);\n        result = { contents: data, filename: fullFilename};\n    }\n\n    return result;\n};\n\nmodule.exports = FileManager;\n"]}