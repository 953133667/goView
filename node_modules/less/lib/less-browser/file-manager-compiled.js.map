{"version":3,"sources":["file-manager.js"],"names":[],"mappings":"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","file":"file-manager-compiled.js","sourcesContent":["/*global window, XMLHttpRequest */\n\nmodule.exports = function(options, logger) {\n\n    var AbstractFileManager = require(\"../less/environment/abstract-file-manager.js\");\n\n    var fileCache = {};\n\n    //TODOS - move log somewhere. pathDiff and doing something similar in node. use pathDiff in the other browser file for the initial load\n\n    function getXMLHttpRequest() {\n        if (window.XMLHttpRequest && (window.location.protocol !== \"file:\" || !(\"ActiveXObject\" in window))) {\n            return new XMLHttpRequest();\n        } else {\n            try {\n                /*global ActiveXObject */\n                return new ActiveXObject(\"Microsoft.XMLHTTP\");\n            } catch (e) {\n                logger.error(\"browser doesn't support AJAX.\");\n                return null;\n            }\n        }\n    }\n\n    var FileManager = function() {\n    };\n\n    FileManager.prototype = new AbstractFileManager();\n\n    FileManager.prototype.alwaysMakePathsAbsolute = function alwaysMakePathsAbsolute() {\n        return true;\n    };\n    FileManager.prototype.join = function join(basePath, laterPath) {\n        if (!basePath) {\n            return laterPath;\n        }\n        return this.extractUrlParts(laterPath, basePath).path;\n    };\n    FileManager.prototype.doXHR = function doXHR(url, type, callback, errback) {\n\n        var xhr = getXMLHttpRequest();\n        var async = options.isFileProtocol ? options.fileAsync : true;\n\n        if (typeof xhr.overrideMimeType === 'function') {\n            xhr.overrideMimeType('text/css');\n        }\n        logger.debug(\"XHR: Getting '\" + url + \"'\");\n        xhr.open('GET', url, async);\n        xhr.setRequestHeader('Accept', type || 'text/x-less, text/css; q=0.9, */*; q=0.5');\n        xhr.send(null);\n\n        function handleResponse(xhr, callback, errback) {\n            if (xhr.status >= 200 && xhr.status < 300) {\n                callback(xhr.responseText,\n                    xhr.getResponseHeader(\"Last-Modified\"));\n            } else if (typeof errback === 'function') {\n                errback(xhr.status, url);\n            }\n        }\n\n        if (options.isFileProtocol && !options.fileAsync) {\n            if (xhr.status === 0 || (xhr.status >= 200 && xhr.status < 300)) {\n                callback(xhr.responseText);\n            } else {\n                errback(xhr.status, url);\n            }\n        } else if (async) {\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState == 4) {\n                    handleResponse(xhr, callback, errback);\n                }\n            };\n        } else {\n            handleResponse(xhr, callback, errback);\n        }\n    };\n    FileManager.prototype.supports = function(filename, currentDirectory, options, environment) {\n        return true;\n    };\n\n    FileManager.prototype.clearFileCache = function() {\n        fileCache = {};\n    };\n\n    FileManager.prototype.loadFile = function loadFile(filename, currentDirectory, options, environment, callback) {\n        if (currentDirectory && !this.isPathAbsolute(filename)) {\n            filename = currentDirectory + filename;\n        }\n\n        options = options || {};\n\n        // sheet may be set to the stylesheet for the initial load or a collection of properties including\n        // some context variables for imports\n        var hrefParts = this.extractUrlParts(filename, window.location.href);\n        var href      = hrefParts.url;\n\n        if (options.useFileCache && fileCache[href]) {\n            try {\n                var lessText = fileCache[href];\n                callback(null, { contents: lessText, filename: href, webInfo: { lastModified: new Date() }});\n            } catch (e) {\n                callback({filename: href, message: \"Error loading file \" + href + \" error was \" + e.message});\n            }\n            return;\n        }\n\n        this.doXHR(href, options.mime, function doXHRCallback(data, lastModified) {\n            // per file cache\n            fileCache[href] = data;\n\n            // Use remote copy (re-parse)\n            callback(null, { contents: data, filename: href, webInfo: { lastModified: lastModified }});\n        }, function doXHRError(status, url) {\n            callback({ type: 'File', message: \"'\" + url + \"' wasn't found (\" + status + \")\", href: href });\n        });\n    };\n\n    return FileManager;\n};\n"]}