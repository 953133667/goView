{"version":3,"sources":["log-listener.js"],"names":[],"mappings":"AAAA,OAAO,OAAP,GAAiB,UAAS,IAAT,EAAe,OAAf,EAAwB;;AAErC,QAAI,iBAAiB,CAArB;AAAA,QACI,gBAAgB,CADpB;AAAA,QAEI,gBAAgB,CAFpB;AAAA,QAGI,iBAAiB,CAHrB;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA,YAAQ,QAAR,GAAmB,OAAO,QAAQ,QAAf,KAA4B,WAA5B,GAA0C,QAAQ,QAAlD,GAA8D,QAAQ,GAAR,KAAgB,aAAhB,GAAiC,aAAjC,GAAiD,cAAlI;;AAEA,QAAI,CAAC,QAAQ,OAAb,EAAsB;AAClB,gBAAQ,OAAR,GAAkB,CAAC;AACf,mBAAO,UAAS,GAAT,EAAc;AACjB,oBAAI,QAAQ,QAAR,IAAoB,cAAxB,EAAwC;AACpC,4BAAQ,GAAR,CAAY,GAAZ;AACH;AACJ,aALc;AAMf,kBAAM,UAAS,GAAT,EAAc;AAChB,oBAAI,QAAQ,QAAR,IAAoB,aAAxB,EAAuC;AACnC,4BAAQ,GAAR,CAAY,GAAZ;AACH;AACJ,aAVc;AAWf,kBAAM,UAAS,GAAT,EAAc;AAChB,oBAAI,QAAQ,QAAR,IAAoB,aAAxB,EAAuC;AACnC,4BAAQ,IAAR,CAAa,GAAb;AACH;AACJ,aAfc;AAgBf,mBAAO,UAAS,GAAT,EAAc;AACjB,oBAAI,QAAQ,QAAR,IAAoB,cAAxB,EAAwC;AACpC,4BAAQ,KAAR,CAAc,GAAd;AACH;AACJ;AApBc,SAAD,CAAlB;AAsBH;AACD,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,QAAQ,OAAR,CAAgB,MAApC,EAA4C,GAA5C,EAAiD;AAC7C,aAAK,MAAL,CAAY,WAAZ,CAAwB,QAAQ,OAAR,CAAgB,CAAhB,CAAxB;AACH;AACJ,CA1CD","file":"log-listener-compiled.js","sourcesContent":["module.exports = function(less, options) {\n\n    var logLevel_debug = 4,\n        logLevel_info = 3,\n        logLevel_warn = 2,\n        logLevel_error = 1;\n\n    // The amount of logging in the javascript console.\n    // 3 - Debug, information and errors\n    // 2 - Information and errors\n    // 1 - Errors\n    // 0 - None\n    // Defaults to 2\n    options.logLevel = typeof options.logLevel !== 'undefined' ? options.logLevel : (options.env === 'development' ?  logLevel_info : logLevel_error);\n\n    if (!options.loggers) {\n        options.loggers = [{\n            debug: function(msg) {\n                if (options.logLevel >= logLevel_debug) {\n                    console.log(msg);\n                }\n            },\n            info: function(msg) {\n                if (options.logLevel >= logLevel_info) {\n                    console.log(msg);\n                }\n            },\n            warn: function(msg) {\n                if (options.logLevel >= logLevel_warn) {\n                    console.warn(msg);\n                }\n            },\n            error: function(msg) {\n                if (options.logLevel >= logLevel_error) {\n                    console.error(msg);\n                }\n            }\n        }];\n    }\n    for (var i = 0; i < options.loggers.length; i++) {\n        less.logger.addListener(options.loggers[i]);\n    }\n};\n"]}