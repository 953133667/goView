{"version":3,"sources":["chunker.js"],"names":[],"mappings":"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","file":"chunker-compiled.js","sourcesContent":["// Split the input into chunks.\nmodule.exports = function (input, fail) {\n    var len = input.length, level = 0, parenLevel = 0,\n        lastOpening, lastOpeningParen, lastMultiComment, lastMultiCommentEndBrace,\n        chunks = [], emitFrom = 0,\n        chunkerCurrentIndex, currentChunkStartIndex, cc, cc2, matched;\n\n    function emitChunk(force) {\n        var len = chunkerCurrentIndex - emitFrom;\n        if (((len < 512) && !force) || !len) {\n            return;\n        }\n        chunks.push(input.slice(emitFrom, chunkerCurrentIndex + 1));\n        emitFrom = chunkerCurrentIndex + 1;\n    }\n\n    for (chunkerCurrentIndex = 0; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n        cc = input.charCodeAt(chunkerCurrentIndex);\n        if (((cc >= 97) && (cc <= 122)) || (cc < 34)) {\n            // a-z or whitespace\n            continue;\n        }\n\n        switch (cc) {\n            case 40:                        // (\n                parenLevel++;\n                lastOpeningParen = chunkerCurrentIndex;\n                continue;\n            case 41:                        // )\n                if (--parenLevel < 0) {\n                    return fail(\"missing opening `(`\", chunkerCurrentIndex);\n                }\n                continue;\n            case 59:                        // ;\n                if (!parenLevel) { emitChunk(); }\n                continue;\n            case 123:                       // {\n                level++;\n                lastOpening = chunkerCurrentIndex;\n                continue;\n            case 125:                       // }\n                if (--level < 0) {\n                    return fail(\"missing opening `{`\", chunkerCurrentIndex);\n                }\n                if (!level && !parenLevel) { emitChunk(); }\n                continue;\n            case 92:                        // \\\n                if (chunkerCurrentIndex < len - 1) { chunkerCurrentIndex++; continue; }\n                return fail(\"unescaped `\\\\`\", chunkerCurrentIndex);\n            case 34:\n            case 39:\n            case 96:                        // \", ' and `\n                matched = 0;\n                currentChunkStartIndex = chunkerCurrentIndex;\n                for (chunkerCurrentIndex = chunkerCurrentIndex + 1; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n                    cc2 = input.charCodeAt(chunkerCurrentIndex);\n                    if (cc2 > 96) { continue; }\n                    if (cc2 == cc) { matched = 1; break; }\n                    if (cc2 == 92) {        // \\\n                        if (chunkerCurrentIndex == len - 1) {\n                            return fail(\"unescaped `\\\\`\", chunkerCurrentIndex);\n                        }\n                        chunkerCurrentIndex++;\n                    }\n                }\n                if (matched) { continue; }\n                return fail(\"unmatched `\" + String.fromCharCode(cc) + \"`\", currentChunkStartIndex);\n            case 47:                        // /, check for comment\n                if (parenLevel || (chunkerCurrentIndex == len - 1)) { continue; }\n                cc2 = input.charCodeAt(chunkerCurrentIndex + 1);\n                if (cc2 == 47) {\n                    // //, find lnfeed\n                    for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n                        cc2 = input.charCodeAt(chunkerCurrentIndex);\n                        if ((cc2 <= 13) && ((cc2 == 10) || (cc2 == 13))) { break; }\n                    }\n                } else if (cc2 == 42) {\n                    // /*, find */\n                    lastMultiComment = currentChunkStartIndex = chunkerCurrentIndex;\n                    for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len - 1; chunkerCurrentIndex++) {\n                        cc2 = input.charCodeAt(chunkerCurrentIndex);\n                        if (cc2 == 125) { lastMultiCommentEndBrace = chunkerCurrentIndex; }\n                        if (cc2 != 42) { continue; }\n                        if (input.charCodeAt(chunkerCurrentIndex + 1) == 47) { break; }\n                    }\n                    if (chunkerCurrentIndex == len - 1) {\n                        return fail(\"missing closing `*/`\", currentChunkStartIndex);\n                    }\n                    chunkerCurrentIndex++;\n                }\n                continue;\n            case 42:                       // *, check for unmatched */\n                if ((chunkerCurrentIndex < len - 1) && (input.charCodeAt(chunkerCurrentIndex + 1) == 47)) {\n                    return fail(\"unmatched `/*`\", chunkerCurrentIndex);\n                }\n                continue;\n        }\n    }\n\n    if (level !== 0) {\n        if ((lastMultiComment > lastOpening) && (lastMultiCommentEndBrace > lastMultiComment)) {\n            return fail(\"missing closing `}` or `*/`\", lastOpening);\n        } else {\n            return fail(\"missing closing `}`\", lastOpening);\n        }\n    } else if (parenLevel !== 0) {\n        return fail(\"missing closing `)`\", lastOpeningParen);\n    }\n\n    emitChunk(true);\n    return chunks;\n};\n"]}