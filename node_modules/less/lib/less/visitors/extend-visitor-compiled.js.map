{"version":3,"sources":["extend-visitor.js"],"names":[],"mappings":"AAAA,IAAI,OAAO,QAAQ,SAAR,CAAX;AAAA,IACI,UAAU,QAAQ,WAAR,CADd;AAAA,IAEI,SAAS,QAAQ,WAAR,CAFb;;AAIA;;AAEA,IAAI,sBAAsB,YAAW;AACjC,SAAK,QAAL,GAAgB,IAAI,OAAJ,CAAY,IAAZ,CAAhB;AACA,SAAK,QAAL,GAAgB,EAAhB;AACA,SAAK,eAAL,GAAuB,CAAC,EAAD,CAAvB;AACH,CAJD;;AAMA,oBAAoB,SAApB,GAAgC;AAC5B,SAAK,UAAU,IAAV,EAAgB;AACjB,eAAO,KAAK,QAAL,CAAc,KAAd,CAAoB,IAApB,CAAP;AACA,aAAK,UAAL,GAAkB,KAAK,eAAL,CAAqB,CAArB,CAAlB;AACA,eAAO,IAAP;AACH,KAL2B;AAM5B,eAAW,UAAU,QAAV,EAAoB,SAApB,EAA+B;AACtC,kBAAU,WAAV,GAAwB,KAAxB;AACH,KAR2B;AAS5B,0BAAsB,UAAU,mBAAV,EAA+B,SAA/B,EAA0C;AAC5D,kBAAU,WAAV,GAAwB,KAAxB;AACH,KAX2B;AAY5B,kBAAc,UAAU,WAAV,EAAuB,SAAvB,EAAkC;AAC5C,YAAI,YAAY,IAAhB,EAAsB;AAClB;AACH;;AAED,YAAI,CAAJ;AAAA,YAAO,CAAP;AAAA,YAAU,MAAV;AAAA,YAAkB,yBAAyB,EAA3C;AAAA,YAA+C,UAA/C;;AAEA;AACA,YAAI,QAAQ,YAAY,KAAxB;AAAA,YAA+B,UAAU,QAAQ,MAAM,MAAd,GAAuB,CAAhE;AACA,aAAK,IAAI,CAAT,EAAY,IAAI,OAAhB,EAAyB,GAAzB,EAA8B;AAC1B,gBAAI,YAAY,KAAZ,CAAkB,CAAlB,aAAgC,KAAK,MAAzC,EAAiD;AAC7C,uCAAuB,IAAvB,CAA4B,MAAM,CAAN,CAA5B;AACA,4BAAY,iBAAZ,GAAgC,IAAhC;AACH;AACJ;;AAED;AACA;AACA,YAAI,QAAQ,YAAY,KAAxB;AACA,aAAK,IAAI,CAAT,EAAY,IAAI,MAAM,MAAtB,EAA8B,GAA9B,EAAmC;AAC/B,gBAAI,eAAe,MAAM,CAAN,CAAnB;AAAA,gBACI,WAAW,aAAa,aAAa,MAAb,GAAsB,CAAnC,CADf;AAAA,gBAEI,gBAAgB,SAAS,UAF7B;;AAIA,yBAAa,gBAAgB,cAAc,KAAd,CAAoB,CAApB,EAAuB,MAAvB,CAA8B,sBAA9B,CAAhB,GACgB,sBAD7B;;AAGA,gBAAI,UAAJ,EAAgB;AACZ,6BAAa,WAAW,GAAX,CAAe,UAAS,kBAAT,EAA6B;AACrD,2BAAO,mBAAmB,KAAnB,EAAP;AACH,iBAFY,CAAb;AAGH;;AAED,iBAAK,IAAI,CAAT,EAAY,IAAI,WAAW,MAA3B,EAAmC,GAAnC,EAAwC;AACpC,qBAAK,YAAL,GAAoB,IAApB;AACA,yBAAS,WAAW,CAAX,CAAT;AACA,uBAAO,iBAAP,CAAyB,YAAzB;AACA,uBAAO,OAAP,GAAiB,WAAjB;AACA,oBAAI,MAAM,CAAV,EAAa;AAAE,2BAAO,6BAAP,GAAuC,IAAvC;AAA8C;AAC7D,qBAAK,eAAL,CAAqB,KAAK,eAAL,CAAqB,MAArB,GAA8B,CAAnD,EAAsD,IAAtD,CAA2D,MAA3D;AACH;AACJ;;AAED,aAAK,QAAL,CAAc,IAAd,CAAmB,YAAY,SAA/B;AACH,KAxD2B;AAyD5B,qBAAiB,UAAU,WAAV,EAAuB;AACpC,YAAI,CAAC,YAAY,IAAjB,EAAuB;AACnB,iBAAK,QAAL,CAAc,MAAd,GAAuB,KAAK,QAAL,CAAc,MAAd,GAAuB,CAA9C;AACH;AACJ,KA7D2B;AA8D5B,gBAAY,UAAU,SAAV,EAAqB,SAArB,EAAgC;AACxC,kBAAU,UAAV,GAAuB,EAAvB;AACA,aAAK,eAAL,CAAqB,IAArB,CAA0B,UAAU,UAApC;AACH,KAjE2B;AAkE5B,mBAAe,UAAU,SAAV,EAAqB;AAChC,aAAK,eAAL,CAAqB,MAArB,GAA8B,KAAK,eAAL,CAAqB,MAArB,GAA8B,CAA5D;AACH,KApE2B;AAqE5B,oBAAgB,UAAU,aAAV,EAAyB,SAAzB,EAAoC;AAChD,sBAAc,UAAd,GAA2B,EAA3B;AACA,aAAK,eAAL,CAAqB,IAArB,CAA0B,cAAc,UAAxC;AACH,KAxE2B;AAyE5B,uBAAmB,UAAU,aAAV,EAAyB;AACxC,aAAK,eAAL,CAAqB,MAArB,GAA8B,KAAK,eAAL,CAAqB,MAArB,GAA8B,CAA5D;AACH;AA3E2B,CAAhC;;AA8EA,IAAI,wBAAwB,YAAW;AACnC,SAAK,QAAL,GAAgB,IAAI,OAAJ,CAAY,IAAZ,CAAhB;AACH,CAFD;;AAIA,sBAAsB,SAAtB,GAAkC;AAC9B,SAAK,UAAS,IAAT,EAAe;AAChB,YAAI,eAAe,IAAI,mBAAJ,EAAnB;AACA,aAAK,aAAL,GAAqB,EAArB;AACA,qBAAa,GAAb,CAAiB,IAAjB;AACA,YAAI,CAAC,aAAa,YAAlB,EAAgC;AAAE,mBAAO,IAAP;AAAc;AAChD,aAAK,UAAL,GAAkB,KAAK,UAAL,CAAgB,MAAhB,CAAuB,KAAK,gBAAL,CAAsB,KAAK,UAA3B,EAAuC,KAAK,UAA5C,CAAvB,CAAlB;AACA,aAAK,eAAL,GAAuB,CAAC,KAAK,UAAN,CAAvB;AACA,YAAI,UAAU,KAAK,QAAL,CAAc,KAAd,CAAoB,IAApB,CAAd;AACA,aAAK,yBAAL,CAA+B,KAAK,UAApC;AACA,eAAO,OAAP;AACH,KAX6B;AAY9B,+BAA2B,UAAS,UAAT,EAAqB;AAC5C,YAAI,UAAU,KAAK,aAAnB;AACA,mBAAW,MAAX,CAAkB,UAAS,MAAT,EAAiB;AAC/B,mBAAO,CAAC,OAAO,eAAR,IAA2B,OAAO,UAAP,CAAkB,MAAlB,IAA4B,CAA9D;AACH,SAFD,EAEG,OAFH,CAEW,UAAS,MAAT,EAAiB;AACpB,gBAAI,WAAW,WAAf;AACA,gBAAI;AACA,2BAAW,OAAO,QAAP,CAAgB,KAAhB,CAAsB,EAAtB,CAAX;AACH,aAFD,CAGA,OAAM,CAAN,EAAS,CAAE;;AAEX,gBAAI,CAAC,QAAQ,OAAO,KAAP,GAAe,GAAf,GAAqB,QAA7B,CAAL,EAA6C;AACzC,wBAAQ,OAAO,KAAP,GAAe,GAAf,GAAqB,QAA7B,IAAyC,IAAzC;AACA,uBAAO,IAAP,CAAY,aAAa,QAAb,GAAwB,kBAApC;AACH;AACJ,SAbL;AAcH,KA5B6B;AA6B9B,sBAAkB,UAAU,WAAV,EAAuB,iBAAvB,EAA0C,cAA1C,EAA0D;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAI,WAAJ;AAAA,YAAiB,iBAAjB;AAAA,YAAoC,OAApC;AAAA,YAA6C,eAAe,EAA5D;AAAA,YAAgE,WAAhE;AAAA,YAA6E,gBAAgB,IAA7F;AAAA,YAAmG,YAAnG;AAAA,YACI,MADJ;AAAA,YACY,YADZ;AAAA,YAC0B,SAD1B;;AAGA,yBAAiB,kBAAkB,CAAnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK,cAAc,CAAnB,EAAsB,cAAc,YAAY,MAAhD,EAAwD,aAAxD,EAAuE;AACnE,iBAAK,oBAAoB,CAAzB,EAA4B,oBAAoB,kBAAkB,MAAlE,EAA0E,mBAA1E,EAA+F;;AAE3F,yBAAS,YAAY,WAAZ,CAAT;AACA,+BAAe,kBAAkB,iBAAlB,CAAf;;AAEA;AACA,oBAAK,OAAO,UAAP,CAAkB,OAAlB,CAA2B,aAAa,SAAxC,KAAuD,CAA5D,EAAgE;AAAE;AAAW;;AAE7E;AACA,+BAAe,CAAC,aAAa,aAAb,CAA2B,CAA3B,CAAD,CAAf;AACA,0BAAU,cAAc,SAAd,CAAwB,MAAxB,EAAgC,YAAhC,CAAV;;AAEA,oBAAI,QAAQ,MAAZ,EAAoB;AAChB,2BAAO,eAAP,GAAyB,IAAzB;;AAEA;AACA,2BAAO,aAAP,CAAqB,OAArB,CAA6B,UAAS,YAAT,EAAuB;AAChD,4BAAI,OAAO,aAAa,cAAb,EAAX;;AAEA;AACA,sCAAc,cAAc,cAAd,CAA6B,OAA7B,EAAsC,YAAtC,EAAoD,YAApD,EAAkE,OAAO,SAAP,EAAlE,CAAd;;AAEA;AACA,oCAAY,IAAI,KAAK,MAAT,CAAiB,aAAa,QAA9B,EAAwC,aAAa,MAArD,EAA6D,CAA7D,EAAgE,aAAa,eAA7E,EAA8F,IAA9F,CAAZ;AACA,kCAAU,aAAV,GAA0B,WAA1B;;AAEA;AACA,oCAAY,YAAY,MAAZ,GAAqB,CAAjC,EAAoC,UAApC,GAAiD,CAAC,SAAD,CAAjD;;AAEA;AACA,qCAAa,IAAb,CAAkB,SAAlB;AACA,kCAAU,OAAV,GAAoB,aAAa,OAAjC;;AAEA;AACA,kCAAU,UAAV,GAAuB,UAAU,UAAV,CAAqB,MAArB,CAA4B,aAAa,UAAzC,EAAqD,OAAO,UAA5D,CAAvB;;AAEA;AACA;AACA;AACA,4BAAI,aAAa,6BAAjB,EAAgD;AAC5C,sCAAU,6BAAV,GAA0C,IAA1C;AACA,yCAAa,OAAb,CAAqB,KAArB,CAA2B,IAA3B,CAAgC,WAAhC;AACH;AACJ,qBA3BD;AA4BH;AACJ;AACJ;;AAED,YAAI,aAAa,MAAjB,EAAyB;AACrB;AACA;AACA,iBAAK,gBAAL;AACA,gBAAI,iBAAiB,GAArB,EAA0B;AACtB,oBAAI,cAAc,uBAAlB;AACA,oBAAI,cAAc,uBAAlB;AACA,oBAAI;AACA,kCAAc,aAAa,CAAb,EAAgB,aAAhB,CAA8B,CAA9B,EAAiC,KAAjC,EAAd;AACA,kCAAc,aAAa,CAAb,EAAgB,QAAhB,CAAyB,KAAzB,EAAd;AACH,iBAHD,CAIA,OAAM,CAAN,EAAS,CAAE;AACX,sBAAM,EAAE,SAAS,kFACb,WADa,GACC,UADD,GACc,WADd,GAC4B,GADvC,EAAN;AAEH;;AAED;AACA;AACA,mBAAO,aAAa,MAAb,CAAoB,cAAc,gBAAd,CAA+B,YAA/B,EAA6C,iBAA7C,EAAgE,iBAAiB,CAAjF,CAApB,CAAP;AACH,SAnBD,MAmBO;AACH,mBAAO,YAAP;AACH;AACJ,KAzH6B;AA0H9B,eAAW,UAAU,QAAV,EAAoB,SAApB,EAA+B;AACtC,kBAAU,WAAV,GAAwB,KAAxB;AACH,KA5H6B;AA6H9B,0BAAsB,UAAU,mBAAV,EAA+B,SAA/B,EAA0C;AAC5D,kBAAU,WAAV,GAAwB,KAAxB;AACH,KA/H6B;AAgI9B,mBAAe,UAAU,YAAV,EAAwB,SAAxB,EAAmC;AAC9C,kBAAU,WAAV,GAAwB,KAAxB;AACH,KAlI6B;AAmI9B,kBAAc,UAAU,WAAV,EAAuB,SAAvB,EAAkC;AAC5C,YAAI,YAAY,IAAhB,EAAsB;AAClB;AACH;AACD,YAAI,OAAJ;AAAA,YAAa,SAAb;AAAA,YAAwB,WAAxB;AAAA,YAAqC,aAAa,KAAK,eAAL,CAAqB,KAAK,eAAL,CAAqB,MAArB,GAA8B,CAAnD,CAAlD;AAAA,YACI,iBAAiB,EADrB;AAAA,YACyB,gBAAgB,IADzC;AAAA,YAC+C,YAD/C;;AAGA;;AAEA,aAAK,cAAc,CAAnB,EAAsB,cAAc,WAAW,MAA/C,EAAuD,aAAvD,EAAsE;AAClE,iBAAK,YAAY,CAAjB,EAAoB,YAAY,YAAY,KAAZ,CAAkB,MAAlD,EAA0D,WAA1D,EAAuE;AACnE,+BAAe,YAAY,KAAZ,CAAkB,SAAlB,CAAf;;AAEA;AACA,oBAAI,YAAY,iBAAhB,EAAmC;AAAE;AAAW;AAChD,oBAAI,aAAa,aAAa,aAAa,MAAb,GAAsB,CAAnC,EAAsC,UAAvD;AACA,oBAAI,cAAc,WAAW,MAA7B,EAAqC;AAAE;AAAW;;AAElD,0BAAU,KAAK,SAAL,CAAe,WAAW,WAAX,CAAf,EAAwC,YAAxC,CAAV;;AAEA,oBAAI,QAAQ,MAAZ,EAAoB;AAChB,+BAAW,WAAX,EAAwB,eAAxB,GAA0C,IAA1C;;AAEA,+BAAW,WAAX,EAAwB,aAAxB,CAAsC,OAAtC,CAA8C,UAAS,YAAT,EAAuB;AACjE,4BAAI,iBAAJ;AACA,4CAAoB,cAAc,cAAd,CAA6B,OAA7B,EAAsC,YAAtC,EAAoD,YAApD,EAAkE,WAAW,WAAX,EAAwB,SAAxB,EAAlE,CAApB;AACA,uCAAe,IAAf,CAAoB,iBAApB;AACH,qBAJD;AAKH;AACJ;AACJ;AACD,oBAAY,KAAZ,GAAoB,YAAY,KAAZ,CAAkB,MAAlB,CAAyB,cAAzB,CAApB;AACH,KAnK6B;AAoK9B,eAAW,UAAU,MAAV,EAAkB,oBAAlB,EAAwC;AAC/C;AACA;AACA;AACA;AACA,YAAI,qBAAJ;AAAA,YAA2B,iBAA3B;AAAA,YAA8C,qBAA9C;AAAA,YAAqE,eAArE;AAAA,YACI,gBADJ;AAAA,YACsB,CADtB;AAAA,YAEI,gBAAgB,IAFpB;AAAA,YAGI,iBAAiB,OAAO,QAAP,CAAgB,QAHrC;AAAA,YAII,mBAAmB,EAJvB;AAAA,YAI2B,cAJ3B;AAAA,YAI2C,UAAU,EAJrD;;AAMA;AACA,aAAK,wBAAwB,CAA7B,EAAgC,wBAAwB,qBAAqB,MAA7E,EAAqF,uBAArF,EAA8G;AAC1G,gCAAoB,qBAAqB,qBAArB,CAApB;;AAEA,iBAAK,wBAAwB,CAA7B,EAAgC,wBAAwB,kBAAkB,QAAlB,CAA2B,MAAnF,EAA2F,uBAA3F,EAAoH;;AAEhH,kCAAkB,kBAAkB,QAAlB,CAA2B,qBAA3B,CAAlB;;AAEA;AACA,oBAAI,OAAO,WAAP,IAAuB,0BAA0B,CAA1B,IAA+B,0BAA0B,CAApF,EAAwF;AACpF,qCAAiB,IAAjB,CAAsB,EAAC,WAAW,qBAAZ,EAAmC,OAAO,qBAA1C,EAAiE,SAAS,CAA1E;AAClB,2CAAmB,gBAAgB,UADjB,EAAtB;AAEH;;AAED,qBAAK,IAAI,CAAT,EAAY,IAAI,iBAAiB,MAAjC,EAAyC,GAAzC,EAA8C;AAC1C,qCAAiB,iBAAiB,CAAjB,CAAjB;;AAEA;AACA;AACA;AACA,uCAAmB,gBAAgB,UAAhB,CAA2B,KAA9C;AACA,wBAAI,qBAAqB,EAArB,IAA2B,0BAA0B,CAAzD,EAA4D;AACxD,2CAAmB,GAAnB;AACH;;AAED;AACA,wBAAI,CAAC,cAAc,oBAAd,CAAmC,eAAe,eAAe,OAA9B,EAAuC,KAA1E,EAAiF,gBAAgB,KAAjG,CAAD,IACC,eAAe,OAAf,GAAyB,CAAzB,IAA8B,eAAe,eAAe,OAA9B,EAAuC,UAAvC,CAAkD,KAAlD,KAA4D,gBAD/F,EACkH;AAC9G,yCAAiB,IAAjB;AACH,qBAHD,MAGO;AACH,uCAAe,OAAf;AACH;;AAED;AACA,wBAAI,cAAJ,EAAoB;AAChB,uCAAe,QAAf,GAA0B,eAAe,OAAf,KAA2B,eAAe,MAApE;AACA,4BAAI,eAAe,QAAf,IACC,CAAC,OAAO,UAAR,KACI,wBAAwB,CAAxB,GAA4B,kBAAkB,QAAlB,CAA2B,MAAvD,IAAiE,wBAAwB,CAAxB,GAA4B,qBAAqB,MADtH,CADL,EAEqI;AACjI,6CAAiB,IAAjB;AACH;AACJ;AACD;AACA,wBAAI,cAAJ,EAAoB;AAChB,4BAAI,eAAe,QAAnB,EAA6B;AACzB,2CAAe,MAAf,GAAwB,eAAe,MAAvC;AACA,2CAAe,YAAf,GAA8B,qBAA9B;AACA,2CAAe,mBAAf,GAAqC,wBAAwB,CAA7D,CAHyB,CAGuC;AAChE,6CAAiB,MAAjB,GAA0B,CAA1B,CAJyB,CAII;AAC7B,oCAAQ,IAAR,CAAa,cAAb;AACH;AACJ,qBARD,MAQO;AACH,yCAAiB,MAAjB,CAAwB,CAAxB,EAA2B,CAA3B;AACA;AACH;AACJ;AACJ;AACJ;AACD,eAAO,OAAP;AACH,KA1O6B;AA2O9B,0BAAsB,UAAS,aAAT,EAAwB,aAAxB,EAAuC;AACzD,YAAI,OAAO,aAAP,KAAyB,QAAzB,IAAqC,OAAO,aAAP,KAAyB,QAAlE,EAA4E;AACxE,mBAAO,kBAAkB,aAAzB;AACH;AACD,YAAI,yBAAyB,KAAK,SAAlC,EAA6C;AACzC,gBAAI,cAAc,EAAd,KAAqB,cAAc,EAAnC,IAAyC,cAAc,GAAd,KAAsB,cAAc,GAAjF,EAAsF;AAClF,uBAAO,KAAP;AACH;AACD,gBAAI,CAAC,cAAc,KAAf,IAAwB,CAAC,cAAc,KAA3C,EAAkD;AAC9C,oBAAI,cAAc,KAAd,IAAuB,cAAc,KAAzC,EAAgD;AAC5C,2BAAO,KAAP;AACH;AACD,uBAAO,IAAP;AACH;AACD,4BAAgB,cAAc,KAAd,CAAoB,KAApB,IAA6B,cAAc,KAA3D;AACA,4BAAgB,cAAc,KAAd,CAAoB,KAApB,IAA6B,cAAc,KAA3D;AACA,mBAAO,kBAAkB,aAAzB;AACH;AACD,wBAAgB,cAAc,KAA9B;AACA,wBAAgB,cAAc,KAA9B;AACA,YAAI,yBAAyB,KAAK,QAAlC,EAA4C;AACxC,gBAAI,EAAE,yBAAyB,KAAK,QAAhC,KAA6C,cAAc,QAAd,CAAuB,MAAvB,KAAkC,cAAc,QAAd,CAAuB,MAA1G,EAAkH;AAC9G,uBAAO,KAAP;AACH;AACD,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAK,cAAc,QAAd,CAAuB,MAA5C,EAAoD,GAApD,EAAyD;AACrD,oBAAI,cAAc,QAAd,CAAuB,CAAvB,EAA0B,UAA1B,CAAqC,KAArC,KAA+C,cAAc,QAAd,CAAuB,CAAvB,EAA0B,UAA1B,CAAqC,KAAxF,EAA+F;AAC3F,wBAAI,MAAM,CAAN,IAAW,CAAC,cAAc,QAAd,CAAuB,CAAvB,EAA0B,UAA1B,CAAqC,KAArC,IAA8C,GAA/C,OAAyD,cAAc,QAAd,CAAuB,CAAvB,EAA0B,UAA1B,CAAqC,KAArC,IAA8C,GAAvG,CAAf,EAA4H;AACxH,+BAAO,KAAP;AACH;AACJ;AACD,oBAAI,CAAC,KAAK,oBAAL,CAA0B,cAAc,QAAd,CAAuB,CAAvB,EAA0B,KAApD,EAA2D,cAAc,QAAd,CAAuB,CAAvB,EAA0B,KAArF,CAAL,EAAkG;AAC9F,2BAAO,KAAP;AACH;AACJ;AACD,mBAAO,IAAP;AACH;AACD,eAAO,KAAP;AACH,KAhR6B;AAiR9B,oBAAe,UAAU,OAAV,EAAmB,YAAnB,EAAiC,mBAAjC,EAAsD,SAAtD,EAAiE;;AAE5E;;AAEA,YAAI,2BAA2B,CAA/B;AAAA,YACI,kCAAkC,CADtC;AAAA,YAEI,OAAO,EAFX;AAAA,YAGI,UAHJ;AAAA,YAII,QAJJ;AAAA,YAKI,YALJ;AAAA,YAMI,KANJ;AAAA,YAOI,WAPJ;;AASA,aAAK,aAAa,CAAlB,EAAqB,aAAa,QAAQ,MAA1C,EAAkD,YAAlD,EAAgE;AAC5D,oBAAQ,QAAQ,UAAR,CAAR;AACA,uBAAW,aAAa,MAAM,SAAnB,CAAX;AACA,2BAAe,IAAI,KAAK,OAAT,CACX,MAAM,iBADK,EAEX,oBAAoB,QAApB,CAA6B,CAA7B,EAAgC,KAFrB,EAGX,oBAAoB,QAApB,CAA6B,CAA7B,EAAgC,KAHrB,EAIX,oBAAoB,QAApB,CAA6B,CAA7B,EAAgC,eAJrB,CAAf;;AAOA,gBAAI,MAAM,SAAN,GAAkB,wBAAlB,IAA8C,kCAAkC,CAApF,EAAuF;AACnF,qBAAK,KAAK,MAAL,GAAc,CAAnB,EAAsB,QAAtB,GAAiC,KAAK,KAAK,MAAL,GAAc,CAAnB,EAC5B,QAD4B,CACnB,MADmB,CACZ,aAAa,wBAAb,EAAuC,QAAvC,CAAgD,KAAhD,CAAsD,+BAAtD,CADY,CAAjC;AAEA,kDAAkC,CAAlC;AACA;AACH;;AAED,0BAAc,SAAS,QAAT,CACT,KADS,CACH,+BADG,EAC8B,MAAM,KADpC,EAET,MAFS,CAEF,CAAC,YAAD,CAFE,EAGT,MAHS,CAGF,oBAAoB,QAApB,CAA6B,KAA7B,CAAmC,CAAnC,CAHE,CAAd;;AAKA,gBAAI,6BAA6B,MAAM,SAAnC,IAAgD,aAAa,CAAjE,EAAoE;AAChE,qBAAK,KAAK,MAAL,GAAc,CAAnB,EAAsB,QAAtB,GACI,KAAK,KAAK,MAAL,GAAc,CAAnB,EAAsB,QAAtB,CAA+B,MAA/B,CAAsC,WAAtC,CADJ;AAEH,aAHD,MAGO;AACH,uBAAO,KAAK,MAAL,CAAY,aAAa,KAAb,CAAmB,wBAAnB,EAA6C,MAAM,SAAnD,CAAZ,CAAP;;AAEA,qBAAK,IAAL,CAAU,IAAI,KAAK,QAAT,CACN,WADM,CAAV;AAGH;AACD,uCAA2B,MAAM,YAAjC;AACA,8CAAkC,MAAM,mBAAxC;AACA,gBAAI,mCAAmC,aAAa,wBAAb,EAAuC,QAAvC,CAAgD,MAAvF,EAA+F;AAC3F,kDAAkC,CAAlC;AACA;AACH;AACJ;;AAED,YAAI,2BAA2B,aAAa,MAAxC,IAAkD,kCAAkC,CAAxF,EAA2F;AACvF,iBAAK,KAAK,MAAL,GAAc,CAAnB,EAAsB,QAAtB,GAAiC,KAAK,KAAK,MAAL,GAAc,CAAnB,EAC5B,QAD4B,CACnB,MADmB,CACZ,aAAa,wBAAb,EAAuC,QAAvC,CAAgD,KAAhD,CAAsD,+BAAtD,CADY,CAAjC;AAEA;AACH;;AAED,eAAO,KAAK,MAAL,CAAY,aAAa,KAAb,CAAmB,wBAAnB,EAA6C,aAAa,MAA1D,CAAZ,CAAP;AACA,eAAO,KAAK,GAAL,CAAS,UAAU,YAAV,EAAwB;AACpC;AACA,gBAAI,UAAU,aAAa,aAAb,CAA2B,aAAa,QAAxC,CAAd;AACA,gBAAI,SAAJ,EAAe;AACX,wBAAQ,gBAAR;AACH,aAFD,MAEO;AACH,wBAAQ,kBAAR;AACH;AACD,mBAAO,OAAP;AACH,SATM,CAAP;AAUA,eAAO,IAAP;AACH,KAxV6B;AAyV9B,gBAAY,UAAU,SAAV,EAAqB,SAArB,EAAgC;AACxC,YAAI,gBAAgB,UAAU,UAAV,CAAqB,MAArB,CAA4B,KAAK,eAAL,CAAqB,KAAK,eAAL,CAAqB,MAArB,GAA8B,CAAnD,CAA5B,CAApB;AACA,wBAAgB,cAAc,MAAd,CAAqB,KAAK,gBAAL,CAAsB,aAAtB,EAAqC,UAAU,UAA/C,CAArB,CAAhB;AACA,aAAK,eAAL,CAAqB,IAArB,CAA0B,aAA1B;AACH,KA7V6B;AA8V9B,mBAAe,UAAU,SAAV,EAAqB;AAChC,YAAI,YAAY,KAAK,eAAL,CAAqB,MAArB,GAA8B,CAA9C;AACA,aAAK,eAAL,CAAqB,MAArB,GAA8B,SAA9B;AACH,KAjW6B;AAkW9B,oBAAgB,UAAU,aAAV,EAAyB,SAAzB,EAAoC;AAChD,YAAI,gBAAgB,cAAc,UAAd,CAAyB,MAAzB,CAAgC,KAAK,eAAL,CAAqB,KAAK,eAAL,CAAqB,MAArB,GAA8B,CAAnD,CAAhC,CAApB;AACA,wBAAgB,cAAc,MAAd,CAAqB,KAAK,gBAAL,CAAsB,aAAtB,EAAqC,cAAc,UAAnD,CAArB,CAAhB;AACA,aAAK,eAAL,CAAqB,IAArB,CAA0B,aAA1B;AACH,KAtW6B;AAuW9B,uBAAmB,UAAU,aAAV,EAAyB;AACxC,YAAI,YAAY,KAAK,eAAL,CAAqB,MAArB,GAA8B,CAA9C;AACA,aAAK,eAAL,CAAqB,MAArB,GAA8B,SAA9B;AACH;AA1W6B,CAAlC;;AA6WA,OAAO,OAAP,GAAiB,qBAAjB","file":"extend-visitor-compiled.js","sourcesContent":["var tree = require(\"../tree\"),\n    Visitor = require(\"./visitor\"),\n    logger = require(\"../logger\");\n\n/*jshint loopfunc:true */\n\nvar ExtendFinderVisitor = function() {\n    this._visitor = new Visitor(this);\n    this.contexts = [];\n    this.allExtendsStack = [[]];\n};\n\nExtendFinderVisitor.prototype = {\n    run: function (root) {\n        root = this._visitor.visit(root);\n        root.allExtends = this.allExtendsStack[0];\n        return root;\n    },\n    visitRule: function (ruleNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    },\n    visitMixinDefinition: function (mixinDefinitionNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    },\n    visitRuleset: function (rulesetNode, visitArgs) {\n        if (rulesetNode.root) {\n            return;\n        }\n\n        var i, j, extend, allSelectorsExtendList = [], extendList;\n\n        // get &:extend(.a); rules which apply to all selectors in this ruleset\n        var rules = rulesetNode.rules, ruleCnt = rules ? rules.length : 0;\n        for (i = 0; i < ruleCnt; i++) {\n            if (rulesetNode.rules[i] instanceof tree.Extend) {\n                allSelectorsExtendList.push(rules[i]);\n                rulesetNode.extendOnEveryPath = true;\n            }\n        }\n\n        // now find every selector and apply the extends that apply to all extends\n        // and the ones which apply to an individual extend\n        var paths = rulesetNode.paths;\n        for (i = 0; i < paths.length; i++) {\n            var selectorPath = paths[i],\n                selector = selectorPath[selectorPath.length - 1],\n                selExtendList = selector.extendList;\n\n            extendList = selExtendList ? selExtendList.slice(0).concat(allSelectorsExtendList)\n                                       : allSelectorsExtendList;\n\n            if (extendList) {\n                extendList = extendList.map(function(allSelectorsExtend) {\n                    return allSelectorsExtend.clone();\n                });\n            }\n\n            for (j = 0; j < extendList.length; j++) {\n                this.foundExtends = true;\n                extend = extendList[j];\n                extend.findSelfSelectors(selectorPath);\n                extend.ruleset = rulesetNode;\n                if (j === 0) { extend.firstExtendOnThisSelectorPath = true; }\n                this.allExtendsStack[this.allExtendsStack.length - 1].push(extend);\n            }\n        }\n\n        this.contexts.push(rulesetNode.selectors);\n    },\n    visitRulesetOut: function (rulesetNode) {\n        if (!rulesetNode.root) {\n            this.contexts.length = this.contexts.length - 1;\n        }\n    },\n    visitMedia: function (mediaNode, visitArgs) {\n        mediaNode.allExtends = [];\n        this.allExtendsStack.push(mediaNode.allExtends);\n    },\n    visitMediaOut: function (mediaNode) {\n        this.allExtendsStack.length = this.allExtendsStack.length - 1;\n    },\n    visitDirective: function (directiveNode, visitArgs) {\n        directiveNode.allExtends = [];\n        this.allExtendsStack.push(directiveNode.allExtends);\n    },\n    visitDirectiveOut: function (directiveNode) {\n        this.allExtendsStack.length = this.allExtendsStack.length - 1;\n    }\n};\n\nvar ProcessExtendsVisitor = function() {\n    this._visitor = new Visitor(this);\n};\n\nProcessExtendsVisitor.prototype = {\n    run: function(root) {\n        var extendFinder = new ExtendFinderVisitor();\n        this.extendIndices = {};\n        extendFinder.run(root);\n        if (!extendFinder.foundExtends) { return root; }\n        root.allExtends = root.allExtends.concat(this.doExtendChaining(root.allExtends, root.allExtends));\n        this.allExtendsStack = [root.allExtends];\n        var newRoot = this._visitor.visit(root);\n        this.checkExtendsForNonMatched(root.allExtends);\n        return newRoot;\n    },\n    checkExtendsForNonMatched: function(extendList) {\n        var indices = this.extendIndices;\n        extendList.filter(function(extend) {\n            return !extend.hasFoundMatches && extend.parent_ids.length == 1;\n        }).forEach(function(extend) {\n                var selector = \"_unknown_\";\n                try {\n                    selector = extend.selector.toCSS({});\n                }\n                catch(_) {}\n\n                if (!indices[extend.index + ' ' + selector]) {\n                    indices[extend.index + ' ' + selector] = true;\n                    logger.warn(\"extend '\" + selector + \"' has no matches\");\n                }\n            });\n    },\n    doExtendChaining: function (extendsList, extendsListTarget, iterationCount) {\n        //\n        // chaining is different from normal extension.. if we extend an extend then we are not just copying, altering\n        // and pasting the selector we would do normally, but we are also adding an extend with the same target selector\n        // this means this new extend can then go and alter other extends\n        //\n        // this method deals with all the chaining work - without it, extend is flat and doesn't work on other extend selectors\n        // this is also the most expensive.. and a match on one selector can cause an extension of a selector we had already\n        // processed if we look at each selector at a time, as is done in visitRuleset\n\n        var extendIndex, targetExtendIndex, matches, extendsToAdd = [], newSelector, extendVisitor = this, selectorPath,\n            extend, targetExtend, newExtend;\n\n        iterationCount = iterationCount || 0;\n\n        //loop through comparing every extend with every target extend.\n        // a target extend is the one on the ruleset we are looking at copy/edit/pasting in place\n        // e.g.  .a:extend(.b) {}  and .b:extend(.c) {} then the first extend extends the second one\n        // and the second is the target.\n        // the separation into two lists allows us to process a subset of chains with a bigger set, as is the\n        // case when processing media queries\n        for (extendIndex = 0; extendIndex < extendsList.length; extendIndex++) {\n            for (targetExtendIndex = 0; targetExtendIndex < extendsListTarget.length; targetExtendIndex++) {\n\n                extend = extendsList[extendIndex];\n                targetExtend = extendsListTarget[targetExtendIndex];\n\n                // look for circular references\n                if ( extend.parent_ids.indexOf( targetExtend.object_id ) >= 0 ) { continue; }\n\n                // find a match in the target extends self selector (the bit before :extend)\n                selectorPath = [targetExtend.selfSelectors[0]];\n                matches = extendVisitor.findMatch(extend, selectorPath);\n\n                if (matches.length) {\n                    extend.hasFoundMatches = true;\n\n                    // we found a match, so for each self selector..\n                    extend.selfSelectors.forEach(function(selfSelector) {\n                        var info = targetExtend.visibilityInfo();\n\n                        // process the extend as usual\n                        newSelector = extendVisitor.extendSelector(matches, selectorPath, selfSelector, extend.isVisible());\n\n                        // but now we create a new extend from it\n                        newExtend = new(tree.Extend)(targetExtend.selector, targetExtend.option, 0, targetExtend.currentFileInfo, info);\n                        newExtend.selfSelectors = newSelector;\n\n                        // add the extend onto the list of extends for that selector\n                        newSelector[newSelector.length - 1].extendList = [newExtend];\n\n                        // record that we need to add it.\n                        extendsToAdd.push(newExtend);\n                        newExtend.ruleset = targetExtend.ruleset;\n\n                        //remember its parents for circular references\n                        newExtend.parent_ids = newExtend.parent_ids.concat(targetExtend.parent_ids, extend.parent_ids);\n\n                        // only process the selector once.. if we have :extend(.a,.b) then multiple\n                        // extends will look at the same selector path, so when extending\n                        // we know that any others will be duplicates in terms of what is added to the css\n                        if (targetExtend.firstExtendOnThisSelectorPath) {\n                            newExtend.firstExtendOnThisSelectorPath = true;\n                            targetExtend.ruleset.paths.push(newSelector);\n                        }\n                    });\n                }\n            }\n        }\n\n        if (extendsToAdd.length) {\n            // try to detect circular references to stop a stack overflow.\n            // may no longer be needed.\n            this.extendChainCount++;\n            if (iterationCount > 100) {\n                var selectorOne = \"{unable to calculate}\";\n                var selectorTwo = \"{unable to calculate}\";\n                try {\n                    selectorOne = extendsToAdd[0].selfSelectors[0].toCSS();\n                    selectorTwo = extendsToAdd[0].selector.toCSS();\n                }\n                catch(e) {}\n                throw { message: \"extend circular reference detected. One of the circular extends is currently:\" +\n                    selectorOne + \":extend(\" + selectorTwo + \")\"};\n            }\n\n            // now process the new extends on the existing rules so that we can handle a extending b extending c extending\n            // d extending e...\n            return extendsToAdd.concat(extendVisitor.doExtendChaining(extendsToAdd, extendsListTarget, iterationCount + 1));\n        } else {\n            return extendsToAdd;\n        }\n    },\n    visitRule: function (ruleNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    },\n    visitMixinDefinition: function (mixinDefinitionNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    },\n    visitSelector: function (selectorNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    },\n    visitRuleset: function (rulesetNode, visitArgs) {\n        if (rulesetNode.root) {\n            return;\n        }\n        var matches, pathIndex, extendIndex, allExtends = this.allExtendsStack[this.allExtendsStack.length - 1],\n            selectorsToAdd = [], extendVisitor = this, selectorPath;\n\n        // look at each selector path in the ruleset, find any extend matches and then copy, find and replace\n\n        for (extendIndex = 0; extendIndex < allExtends.length; extendIndex++) {\n            for (pathIndex = 0; pathIndex < rulesetNode.paths.length; pathIndex++) {\n                selectorPath = rulesetNode.paths[pathIndex];\n\n                // extending extends happens initially, before the main pass\n                if (rulesetNode.extendOnEveryPath) { continue; }\n                var extendList = selectorPath[selectorPath.length - 1].extendList;\n                if (extendList && extendList.length) { continue; }\n\n                matches = this.findMatch(allExtends[extendIndex], selectorPath);\n\n                if (matches.length) {\n                    allExtends[extendIndex].hasFoundMatches = true;\n\n                    allExtends[extendIndex].selfSelectors.forEach(function(selfSelector) {\n                        var extendedSelectors;\n                        extendedSelectors = extendVisitor.extendSelector(matches, selectorPath, selfSelector, allExtends[extendIndex].isVisible());\n                        selectorsToAdd.push(extendedSelectors);\n                    });\n                }\n            }\n        }\n        rulesetNode.paths = rulesetNode.paths.concat(selectorsToAdd);\n    },\n    findMatch: function (extend, haystackSelectorPath) {\n        //\n        // look through the haystack selector path to try and find the needle - extend.selector\n        // returns an array of selector matches that can then be replaced\n        //\n        var haystackSelectorIndex, hackstackSelector, hackstackElementIndex, haystackElement,\n            targetCombinator, i,\n            extendVisitor = this,\n            needleElements = extend.selector.elements,\n            potentialMatches = [], potentialMatch, matches = [];\n\n        // loop through the haystack elements\n        for (haystackSelectorIndex = 0; haystackSelectorIndex < haystackSelectorPath.length; haystackSelectorIndex++) {\n            hackstackSelector = haystackSelectorPath[haystackSelectorIndex];\n\n            for (hackstackElementIndex = 0; hackstackElementIndex < hackstackSelector.elements.length; hackstackElementIndex++) {\n\n                haystackElement = hackstackSelector.elements[hackstackElementIndex];\n\n                // if we allow elements before our match we can add a potential match every time. otherwise only at the first element.\n                if (extend.allowBefore || (haystackSelectorIndex === 0 && hackstackElementIndex === 0)) {\n                    potentialMatches.push({pathIndex: haystackSelectorIndex, index: hackstackElementIndex, matched: 0,\n                        initialCombinator: haystackElement.combinator});\n                }\n\n                for (i = 0; i < potentialMatches.length; i++) {\n                    potentialMatch = potentialMatches[i];\n\n                    // selectors add \" \" onto the first element. When we use & it joins the selectors together, but if we don't\n                    // then each selector in haystackSelectorPath has a space before it added in the toCSS phase. so we need to\n                    // work out what the resulting combinator will be\n                    targetCombinator = haystackElement.combinator.value;\n                    if (targetCombinator === '' && hackstackElementIndex === 0) {\n                        targetCombinator = ' ';\n                    }\n\n                    // if we don't match, null our match to indicate failure\n                    if (!extendVisitor.isElementValuesEqual(needleElements[potentialMatch.matched].value, haystackElement.value) ||\n                        (potentialMatch.matched > 0 && needleElements[potentialMatch.matched].combinator.value !== targetCombinator)) {\n                        potentialMatch = null;\n                    } else {\n                        potentialMatch.matched++;\n                    }\n\n                    // if we are still valid and have finished, test whether we have elements after and whether these are allowed\n                    if (potentialMatch) {\n                        potentialMatch.finished = potentialMatch.matched === needleElements.length;\n                        if (potentialMatch.finished &&\n                            (!extend.allowAfter &&\n                                (hackstackElementIndex + 1 < hackstackSelector.elements.length || haystackSelectorIndex + 1 < haystackSelectorPath.length))) {\n                            potentialMatch = null;\n                        }\n                    }\n                    // if null we remove, if not, we are still valid, so either push as a valid match or continue\n                    if (potentialMatch) {\n                        if (potentialMatch.finished) {\n                            potentialMatch.length = needleElements.length;\n                            potentialMatch.endPathIndex = haystackSelectorIndex;\n                            potentialMatch.endPathElementIndex = hackstackElementIndex + 1; // index after end of match\n                            potentialMatches.length = 0; // we don't allow matches to overlap, so start matching again\n                            matches.push(potentialMatch);\n                        }\n                    } else {\n                        potentialMatches.splice(i, 1);\n                        i--;\n                    }\n                }\n            }\n        }\n        return matches;\n    },\n    isElementValuesEqual: function(elementValue1, elementValue2) {\n        if (typeof elementValue1 === \"string\" || typeof elementValue2 === \"string\") {\n            return elementValue1 === elementValue2;\n        }\n        if (elementValue1 instanceof tree.Attribute) {\n            if (elementValue1.op !== elementValue2.op || elementValue1.key !== elementValue2.key) {\n                return false;\n            }\n            if (!elementValue1.value || !elementValue2.value) {\n                if (elementValue1.value || elementValue2.value) {\n                    return false;\n                }\n                return true;\n            }\n            elementValue1 = elementValue1.value.value || elementValue1.value;\n            elementValue2 = elementValue2.value.value || elementValue2.value;\n            return elementValue1 === elementValue2;\n        }\n        elementValue1 = elementValue1.value;\n        elementValue2 = elementValue2.value;\n        if (elementValue1 instanceof tree.Selector) {\n            if (!(elementValue2 instanceof tree.Selector) || elementValue1.elements.length !== elementValue2.elements.length) {\n                return false;\n            }\n            for (var i = 0; i  < elementValue1.elements.length; i++) {\n                if (elementValue1.elements[i].combinator.value !== elementValue2.elements[i].combinator.value) {\n                    if (i !== 0 || (elementValue1.elements[i].combinator.value || ' ') !== (elementValue2.elements[i].combinator.value || ' ')) {\n                        return false;\n                    }\n                }\n                if (!this.isElementValuesEqual(elementValue1.elements[i].value, elementValue2.elements[i].value)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    },\n    extendSelector:function (matches, selectorPath, replacementSelector, isVisible) {\n\n        //for a set of matches, replace each match with the replacement selector\n\n        var currentSelectorPathIndex = 0,\n            currentSelectorPathElementIndex = 0,\n            path = [],\n            matchIndex,\n            selector,\n            firstElement,\n            match,\n            newElements;\n\n        for (matchIndex = 0; matchIndex < matches.length; matchIndex++) {\n            match = matches[matchIndex];\n            selector = selectorPath[match.pathIndex];\n            firstElement = new tree.Element(\n                match.initialCombinator,\n                replacementSelector.elements[0].value,\n                replacementSelector.elements[0].index,\n                replacementSelector.elements[0].currentFileInfo\n            );\n\n            if (match.pathIndex > currentSelectorPathIndex && currentSelectorPathElementIndex > 0) {\n                path[path.length - 1].elements = path[path.length - 1]\n                    .elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));\n                currentSelectorPathElementIndex = 0;\n                currentSelectorPathIndex++;\n            }\n\n            newElements = selector.elements\n                .slice(currentSelectorPathElementIndex, match.index)\n                .concat([firstElement])\n                .concat(replacementSelector.elements.slice(1));\n\n            if (currentSelectorPathIndex === match.pathIndex && matchIndex > 0) {\n                path[path.length - 1].elements =\n                    path[path.length - 1].elements.concat(newElements);\n            } else {\n                path = path.concat(selectorPath.slice(currentSelectorPathIndex, match.pathIndex));\n\n                path.push(new tree.Selector(\n                    newElements\n                ));\n            }\n            currentSelectorPathIndex = match.endPathIndex;\n            currentSelectorPathElementIndex = match.endPathElementIndex;\n            if (currentSelectorPathElementIndex >= selectorPath[currentSelectorPathIndex].elements.length) {\n                currentSelectorPathElementIndex = 0;\n                currentSelectorPathIndex++;\n            }\n        }\n\n        if (currentSelectorPathIndex < selectorPath.length && currentSelectorPathElementIndex > 0) {\n            path[path.length - 1].elements = path[path.length - 1]\n                .elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));\n            currentSelectorPathIndex++;\n        }\n\n        path = path.concat(selectorPath.slice(currentSelectorPathIndex, selectorPath.length));\n        path = path.map(function (currentValue) {\n            // we can re-use elements here, because the visibility property matters only for selectors\n            var derived = currentValue.createDerived(currentValue.elements);\n            if (isVisible) {\n                derived.ensureVisibility();\n            } else {\n                derived.ensureInvisibility();\n            }\n            return derived;\n        });\n        return path;\n    },\n    visitMedia: function (mediaNode, visitArgs) {\n        var newAllExtends = mediaNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);\n        newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, mediaNode.allExtends));\n        this.allExtendsStack.push(newAllExtends);\n    },\n    visitMediaOut: function (mediaNode) {\n        var lastIndex = this.allExtendsStack.length - 1;\n        this.allExtendsStack.length = lastIndex;\n    },\n    visitDirective: function (directiveNode, visitArgs) {\n        var newAllExtends = directiveNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);\n        newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, directiveNode.allExtends));\n        this.allExtendsStack.push(newAllExtends);\n    },\n    visitDirectiveOut: function (directiveNode) {\n        var lastIndex = this.allExtendsStack.length - 1;\n        this.allExtendsStack.length = lastIndex;\n    }\n};\n\nmodule.exports = ProcessExtendsVisitor;\n"]}