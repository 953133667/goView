{"version":3,"sources":["to-css-visitor.js"],"names":[],"mappings":"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","file":"to-css-visitor-compiled.js","sourcesContent":["var tree = require(\"../tree\"),\n    Visitor = require(\"./visitor\");\n\nvar CSSVisitorUtils = function(context) {\n    this._visitor = new Visitor(this);\n    this._context = context;\n};\n\nCSSVisitorUtils.prototype = {\n    containsSilentNonBlockedChild: function(bodyRules) {\n        var rule;\n        if (bodyRules == null) {\n            return false;\n        }\n        for (var r = 0; r < bodyRules.length; r++) {\n            rule = bodyRules[r];\n            if (rule.isSilent && rule.isSilent(this._context) && !rule.blocksVisibility()) {\n                //the directive contains something that was referenced (likely by extend)\n                //therefore it needs to be shown in output too\n                return true;\n            }\n        }\n        return false;\n    },\n\n    keepOnlyVisibleChilds: function(owner) {\n        if (owner == null || owner.rules == null) {\n            return ;\n        }\n\n        owner.rules = owner.rules.filter(function(thing) {\n                return thing.isVisible();\n            }\n        );\n    },\n\n    isEmpty: function(owner) {\n        if (owner == null || owner.rules == null) {\n            return true;\n        }\n        return owner.rules.length === 0;\n    },\n\n    hasVisibleSelector: function(rulesetNode) {\n        if (rulesetNode == null || rulesetNode.paths == null) {\n            return false;\n        }\n        return rulesetNode.paths.length > 0;\n    },\n\n    resolveVisibility: function (node, originalRules) {\n        if (!node.blocksVisibility()) {\n            if (this.isEmpty(node) && !this.containsSilentNonBlockedChild(originalRules)) {\n                return ;\n            }\n\n            return node;\n        }\n\n        var compiledRulesBody = node.rules[0];\n        this.keepOnlyVisibleChilds(compiledRulesBody);\n\n        if (this.isEmpty(compiledRulesBody)) {\n            return ;\n        }\n\n        node.ensureVisibility();\n        node.removeVisibilityBlock();\n\n        return node;\n    },\n\n    isVisibleRuleset: function(rulesetNode) {\n        if (rulesetNode.firstRoot) {\n            return true;\n        }\n\n        if (this.isEmpty(rulesetNode)) {\n            return false;\n        }\n\n        if (!rulesetNode.root && !this.hasVisibleSelector(rulesetNode)) {\n            return false;\n        }\n\n        return true;\n    }\n\n};\n\nvar ToCSSVisitor = function(context) {\n    this._visitor = new Visitor(this);\n    this._context = context;\n    this.utils = new CSSVisitorUtils(context);\n};\n\nToCSSVisitor.prototype = {\n    isReplacing: true,\n    run: function (root) {\n        return this._visitor.visit(root);\n    },\n\n    visitRule: function (ruleNode, visitArgs) {\n        if (ruleNode.blocksVisibility() || ruleNode.variable) {\n            return;\n        }\n        return ruleNode;\n    },\n\n    visitMixinDefinition: function (mixinNode, visitArgs) {\n        // mixin definitions do not get eval'd - this means they keep state\n        // so we have to clear that state here so it isn't used if toCSS is called twice\n        mixinNode.frames = [];\n    },\n\n    visitExtend: function (extendNode, visitArgs) {\n    },\n\n    visitComment: function (commentNode, visitArgs) {\n        if (commentNode.blocksVisibility() || commentNode.isSilent(this._context)) {\n            return;\n        }\n        return commentNode;\n    },\n\n    visitMedia: function(mediaNode, visitArgs) {\n        var originalRules = mediaNode.rules[0].rules;\n        mediaNode.accept(this._visitor);\n        visitArgs.visitDeeper = false;\n\n        return this.utils.resolveVisibility(mediaNode, originalRules);\n    },\n\n    visitImport: function (importNode, visitArgs) {\n        if (importNode.blocksVisibility()) {\n            return ;\n        }\n        return importNode;\n    },\n\n    visitDirective: function(directiveNode, visitArgs) {\n        if (directiveNode.rules && directiveNode.rules.length) {\n            return this.visitDirectiveWithBody(directiveNode, visitArgs);\n        } else {\n            return this.visitDirectiveWithoutBody(directiveNode, visitArgs);\n        }\n    },\n\n    visitDirectiveWithBody: function(directiveNode, visitArgs) {\n        //if there is only one nested ruleset and that one has no path, then it is\n        //just fake ruleset\n        function hasFakeRuleset(directiveNode) {\n            var bodyRules = directiveNode.rules;\n            return bodyRules.length === 1 && (!bodyRules[0].paths || bodyRules[0].paths.length === 0);\n        }\n        function getBodyRules(directiveNode) {\n            var nodeRules = directiveNode.rules;\n            if (hasFakeRuleset(directiveNode)) {\n                return nodeRules[0].rules;\n            }\n\n            return nodeRules;\n        }\n        //it is still true that it is only one ruleset in array\n        //this is last such moment\n        //process childs\n        var originalRules = getBodyRules(directiveNode);\n        directiveNode.accept(this._visitor);\n        visitArgs.visitDeeper = false;\n\n        if (!this.utils.isEmpty(directiveNode)) {\n            this._mergeRules(directiveNode.rules[0].rules);\n        }\n\n        return this.utils.resolveVisibility(directiveNode, originalRules);\n    },\n\n    visitDirectiveWithoutBody: function(directiveNode, visitArgs) {\n        if (directiveNode.blocksVisibility()) {\n            return;\n        }\n\n        if (directiveNode.name === \"@charset\") {\n            // Only output the debug info together with subsequent @charset definitions\n            // a comment (or @media statement) before the actual @charset directive would\n            // be considered illegal css as it has to be on the first line\n            if (this.charset) {\n                if (directiveNode.debugInfo) {\n                    var comment = new tree.Comment(\"/* \" + directiveNode.toCSS(this._context).replace(/\\n/g, \"\") + \" */\\n\");\n                    comment.debugInfo = directiveNode.debugInfo;\n                    return this._visitor.visit(comment);\n                }\n                return;\n            }\n            this.charset = true;\n        }\n\n        return directiveNode;\n    },\n\n    checkValidNodes: function(rules, isRoot) {\n        if (!rules) {\n            return;\n        }\n\n        for (var i = 0; i < rules.length; i++) {\n            var ruleNode = rules[i];\n            if (isRoot && ruleNode instanceof tree.Rule && !ruleNode.variable) {\n                throw { message: \"Properties must be inside selector blocks. They cannot be in the root\",\n                    index: ruleNode.index, filename: ruleNode.currentFileInfo && ruleNode.currentFileInfo.filename};\n            }\n            if (ruleNode instanceof tree.Call) {\n                throw { message: \"Function '\" + ruleNode.name + \"' is undefined\",\n                    index: ruleNode.index, filename: ruleNode.currentFileInfo && ruleNode.currentFileInfo.filename};\n            }\n            if (ruleNode.type && !ruleNode.allowRoot) {\n                throw { message: ruleNode.type + \" node returned by a function is not valid here\",\n                    index: ruleNode.index, filename: ruleNode.currentFileInfo && ruleNode.currentFileInfo.filename};\n            }\n        }\n    },\n\n    visitRuleset: function (rulesetNode, visitArgs) {\n        //at this point rulesets are nested into each other\n        var rule, rulesets = [];\n\n        this.checkValidNodes(rulesetNode.rules, rulesetNode.firstRoot);\n\n        if (! rulesetNode.root) {\n            //remove invisible paths\n            this._compileRulesetPaths(rulesetNode);\n\n            // remove rulesets from this ruleset body and compile them separately\n            var nodeRules = rulesetNode.rules, nodeRuleCnt = nodeRules ? nodeRules.length : 0;\n            for (var i = 0; i < nodeRuleCnt; ) {\n                rule = nodeRules[i];\n                if (rule && rule.rules) {\n                    // visit because we are moving them out from being a child\n                    rulesets.push(this._visitor.visit(rule));\n                    nodeRules.splice(i, 1);\n                    nodeRuleCnt--;\n                    continue;\n                }\n                i++;\n            }\n            // accept the visitor to remove rules and refactor itself\n            // then we can decide nogw whether we want it or not\n            // compile body\n            if (nodeRuleCnt > 0) {\n                rulesetNode.accept(this._visitor);\n            } else {\n                rulesetNode.rules = null;\n            }\n            visitArgs.visitDeeper = false;\n\n        } else { //if (! rulesetNode.root) {\n            rulesetNode.accept(this._visitor);\n            visitArgs.visitDeeper = false;\n        }\n\n        if (rulesetNode.rules) {\n            this._mergeRules(rulesetNode.rules);\n            this._removeDuplicateRules(rulesetNode.rules);\n        }\n\n        //now decide whether we keep the ruleset\n        if (this.utils.isVisibleRuleset(rulesetNode)) {\n            rulesetNode.ensureVisibility();\n            rulesets.splice(0, 0, rulesetNode);\n        }\n\n        if (rulesets.length === 1) {\n            return rulesets[0];\n        }\n        return rulesets;\n    },\n\n    _compileRulesetPaths: function(rulesetNode) {\n        if (rulesetNode.paths) {\n            rulesetNode.paths = rulesetNode.paths\n                .filter(function(p) {\n                    var i;\n                    if (p[0].elements[0].combinator.value === ' ') {\n                        p[0].elements[0].combinator = new(tree.Combinator)('');\n                    }\n                    for (i = 0; i < p.length; i++) {\n                        if (p[i].isVisible() && p[i].getIsOutput()) {\n                            return true;\n                        }\n                    }\n                    return false;\n                });\n        }\n    },\n\n    _removeDuplicateRules: function(rules) {\n        if (!rules) { return; }\n\n        // remove duplicates\n        var ruleCache = {},\n            ruleList, rule, i;\n\n        for (i = rules.length - 1; i >= 0 ; i--) {\n            rule = rules[i];\n            if (rule instanceof tree.Rule) {\n                if (!ruleCache[rule.name]) {\n                    ruleCache[rule.name] = rule;\n                } else {\n                    ruleList = ruleCache[rule.name];\n                    if (ruleList instanceof tree.Rule) {\n                        ruleList = ruleCache[rule.name] = [ruleCache[rule.name].toCSS(this._context)];\n                    }\n                    var ruleCSS = rule.toCSS(this._context);\n                    if (ruleList.indexOf(ruleCSS) !== -1) {\n                        rules.splice(i, 1);\n                    } else {\n                        ruleList.push(ruleCSS);\n                    }\n                }\n            }\n        }\n    },\n\n    _mergeRules: function (rules) {\n        if (!rules) { return; }\n\n        var groups = {},\n            parts,\n            rule,\n            key;\n\n        for (var i = 0; i < rules.length; i++) {\n            rule = rules[i];\n\n            if ((rule instanceof tree.Rule) && rule.merge) {\n                key = [rule.name,\n                    rule.important ? \"!\" : \"\"].join(\",\");\n\n                if (!groups[key]) {\n                    groups[key] = [];\n                } else {\n                    rules.splice(i--, 1);\n                }\n\n                groups[key].push(rule);\n            }\n        }\n\n        Object.keys(groups).map(function (k) {\n\n            function toExpression(values) {\n                return new (tree.Expression)(values.map(function (p) {\n                    return p.value;\n                }));\n            }\n\n            function toValue(values) {\n                return new (tree.Value)(values.map(function (p) {\n                    return p;\n                }));\n            }\n\n            parts = groups[k];\n\n            if (parts.length > 1) {\n                rule = parts[0];\n                var spacedGroups = [];\n                var lastSpacedGroup = [];\n                parts.map(function (p) {\n                    if (p.merge === \"+\") {\n                        if (lastSpacedGroup.length > 0) {\n                            spacedGroups.push(toExpression(lastSpacedGroup));\n                        }\n                        lastSpacedGroup = [];\n                    }\n                    lastSpacedGroup.push(p);\n                });\n                spacedGroups.push(toExpression(lastSpacedGroup));\n                rule.value = toValue(spacedGroups);\n            }\n        });\n    },\n\n    visitAnonymous: function(anonymousNode, visitArgs) {\n        if (anonymousNode.blocksVisibility()) {\n            return ;\n        }\n        anonymousNode.accept(this._visitor);\n        return anonymousNode;\n    }\n};\n\nmodule.exports = ToCSSVisitor;\n"]}