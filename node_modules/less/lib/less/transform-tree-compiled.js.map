{"version":3,"sources":["transform-tree.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,YAAR,CAAf;AAAA,IACI,UAAU,QAAQ,YAAR,CADd;AAAA,IAEI,OAAO,QAAQ,QAAR,CAFX;;AAIA,OAAO,OAAP,GAAiB,UAAS,IAAT,EAAe,OAAf,EAAwB;AACrC,cAAU,WAAW,EAArB;AACA,QAAI,SAAJ;AAAA,QACI,YAAY,QAAQ,SADxB;AAAA,QAEI,UAAU,IAAI,SAAS,IAAb,CAAkB,OAAlB,CAFd;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAI,OAAO,SAAP,KAAqB,QAArB,IAAiC,CAAC,MAAM,OAAN,CAAc,SAAd,CAAtC,EAAgE;AAC5D,oBAAY,OAAO,IAAP,CAAY,SAAZ,EAAuB,GAAvB,CAA2B,UAAU,CAAV,EAAa;AAChD,gBAAI,QAAQ,UAAU,CAAV,CAAZ;;AAEA,gBAAI,EAAG,iBAAiB,KAAK,KAAzB,CAAJ,EAAqC;AACjC,oBAAI,EAAG,iBAAiB,KAAK,UAAzB,CAAJ,EAA0C;AACtC,4BAAQ,IAAI,KAAK,UAAT,CAAoB,CAAC,KAAD,CAApB,CAAR;AACH;AACD,wBAAQ,IAAI,KAAK,KAAT,CAAe,CAAC,KAAD,CAAf,CAAR;AACH;AACD,mBAAO,IAAI,KAAK,IAAT,CAAc,MAAM,CAApB,EAAuB,KAAvB,EAA8B,KAA9B,EAAqC,IAArC,EAA2C,CAA3C,CAAP;AACH,SAVW,CAAZ;AAWA,gBAAQ,MAAR,GAAiB,CAAC,IAAI,KAAK,OAAT,CAAiB,IAAjB,EAAuB,SAAvB,CAAD,CAAjB;AACH;;AAED,QAAI,kBAAkB,EAAtB;AAAA,QACI,WAAW,CACP,IAAI,QAAQ,mBAAZ,EADO,EAEP,IAAI,QAAQ,2BAAZ,CAAwC,IAAxC,CAFO,EAGP,IAAI,QAAQ,aAAZ,EAHO,EAIP,IAAI,QAAQ,YAAZ,CAAyB,EAAC,UAAU,QAAQ,QAAQ,QAAhB,CAAX,EAAzB,CAJO,CADf;AAAA,QAMO,CANP;;AAQA,QAAI,QAAQ,aAAZ,EAA2B;AACvB,YAAI,iBAAiB,QAAQ,aAAR,CAAsB,WAAtB,EAArB;AACA,aAAK,IAAI,CAAT,EAAY,IAAI,eAAe,MAA/B,EAAuC,GAAvC,EAA4C;AACxC,gBAAI,gBAAgB,eAAe,CAAf,CAApB;AACA,gBAAI,cAAc,gBAAlB,EAAoC;AAChC,gCAAgB,IAAhB,CAAqB,aAArB;AACH,aAFD,MAEO;AACH,oBAAI,cAAc,YAAlB,EAAgC;AAC5B,6BAAS,MAAT,CAAgB,CAAhB,EAAmB,CAAnB,EAAsB,aAAtB;AACH,iBAFD,MAEO;AACH,6BAAS,IAAT,CAAc,aAAd;AACH;AACJ;AACJ;AACJ;;AAED,SAAK,IAAI,CAAT,EAAY,IAAI,gBAAgB,MAAhC,EAAwC,GAAxC,EAA6C;AACzC,wBAAgB,CAAhB,EAAmB,GAAnB,CAAuB,IAAvB;AACH;;AAED,gBAAY,KAAK,IAAL,CAAU,OAAV,CAAZ;;AAEA,SAAK,IAAI,CAAT,EAAY,IAAI,SAAS,MAAzB,EAAiC,GAAjC,EAAsC;AAClC,iBAAS,CAAT,EAAY,GAAZ,CAAgB,SAAhB;AACH;;AAED,WAAO,SAAP;AACH,CArED","file":"transform-tree-compiled.js","sourcesContent":["var contexts = require(\"./contexts\"),\n    visitor = require(\"./visitors\"),\n    tree = require(\"./tree\");\n\nmodule.exports = function(root, options) {\n    options = options || {};\n    var evaldRoot,\n        variables = options.variables,\n        evalEnv = new contexts.Eval(options);\n\n    //\n    // Allows setting variables with a hash, so:\n    //\n    //   `{ color: new tree.Color('#f01') }` will become:\n    //\n    //   new tree.Rule('@color',\n    //     new tree.Value([\n    //       new tree.Expression([\n    //         new tree.Color('#f01')\n    //       ])\n    //     ])\n    //   )\n    //\n    if (typeof variables === 'object' && !Array.isArray(variables)) {\n        variables = Object.keys(variables).map(function (k) {\n            var value = variables[k];\n\n            if (! (value instanceof tree.Value)) {\n                if (! (value instanceof tree.Expression)) {\n                    value = new tree.Expression([value]);\n                }\n                value = new tree.Value([value]);\n            }\n            return new tree.Rule('@' + k, value, false, null, 0);\n        });\n        evalEnv.frames = [new tree.Ruleset(null, variables)];\n    }\n\n    var preEvalVisitors = [],\n        visitors = [\n            new visitor.JoinSelectorVisitor(),\n            new visitor.MarkVisibleSelectorsVisitor(true),\n            new visitor.ExtendVisitor(),\n            new visitor.ToCSSVisitor({compress: Boolean(options.compress)})\n        ], i;\n\n    if (options.pluginManager) {\n        var pluginVisitors = options.pluginManager.getVisitors();\n        for (i = 0; i < pluginVisitors.length; i++) {\n            var pluginVisitor = pluginVisitors[i];\n            if (pluginVisitor.isPreEvalVisitor) {\n                preEvalVisitors.push(pluginVisitor);\n            } else {\n                if (pluginVisitor.isPreVisitor) {\n                    visitors.splice(0, 0, pluginVisitor);\n                } else {\n                    visitors.push(pluginVisitor);\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < preEvalVisitors.length; i++) {\n        preEvalVisitors[i].run(root);\n    }\n\n    evaldRoot = root.eval(evalEnv);\n\n    for (i = 0; i < visitors.length; i++) {\n        visitors[i].run(evaldRoot);\n    }\n\n    return evaldRoot;\n};\n"]}