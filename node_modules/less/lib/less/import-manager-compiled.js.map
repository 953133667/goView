{"version":3,"sources":["import-manager.js"],"names":[],"mappings":"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","file":"import-manager-compiled.js","sourcesContent":["var contexts = require(\"./contexts\"),\n    Parser = require('./parser/parser'),\n    FunctionImporter = require('./plugins/function-importer');\n\nmodule.exports = function(environment) {\n\n    // FileInfo = {\n    //  'relativeUrls' - option - whether to adjust URL's to be relative\n    //  'filename' - full resolved filename of current file\n    //  'rootpath' - path to append to normal URLs for this node\n    //  'currentDirectory' - path to the current file, absolute\n    //  'rootFilename' - filename of the base file\n    //  'entryPath' - absolute path to the entry file\n    //  'reference' - whether the file should not be output and only output parts that are referenced\n\n    var ImportManager = function(context, rootFileInfo) {\n        this.rootFilename = rootFileInfo.filename;\n        this.paths = context.paths || [];  // Search paths, when importing\n        this.contents = {};             // map - filename to contents of all the files\n        this.contentsIgnoredChars = {}; // map - filename to lines at the beginning of each file to ignore\n        this.mime = context.mime;\n        this.error = null;\n        this.context = context;\n        // Deprecated? Unused outside of here, could be useful.\n        this.queue = [];        // Files which haven't been imported yet\n        this.files = {};        // Holds the imported parse trees.\n    };\n    /**\n     * Add an import to be imported\n     * @param path - the raw path\n     * @param tryAppendLessExtension - whether to try appending the less extension (if the path has no extension)\n     * @param currentFileInfo - the current file info (used for instance to work out relative paths)\n     * @param importOptions - import options\n     * @param callback - callback for when it is imported\n     */\n    ImportManager.prototype.push = function (path, tryAppendLessExtension, currentFileInfo, importOptions, callback) {\n        var importManager = this;\n        this.queue.push(path);\n\n        var fileParsedFunc = function (e, root, fullPath) {\n            importManager.queue.splice(importManager.queue.indexOf(path), 1); // Remove the path from the queue\n\n            var importedEqualsRoot = fullPath === importManager.rootFilename;\n            if (importOptions.optional && e) {\n                callback(null, {rules:[]}, false, null);\n            }\n            else {\n                importManager.files[fullPath] = root;\n                if (e && !importManager.error) { importManager.error = e; }\n                callback(e, root, importedEqualsRoot, fullPath);\n            }\n        };\n\n        var newFileInfo = {\n            relativeUrls: this.context.relativeUrls,\n            entryPath: currentFileInfo.entryPath,\n            rootpath: currentFileInfo.rootpath,\n            rootFilename: currentFileInfo.rootFilename\n        };\n\n        var fileManager = environment.getFileManager(path, currentFileInfo.currentDirectory, this.context, environment);\n\n        if (!fileManager) {\n            fileParsedFunc({ message: \"Could not find a file-manager for \" + path });\n            return;\n        }\n\n        if (tryAppendLessExtension) {\n            path = fileManager.tryAppendExtension(path, importOptions.plugin ? \".js\" : \".less\");\n        }\n\n        var loadFileCallback = function(loadedFile) {\n            var resolvedFilename = loadedFile.filename,\n                contents = loadedFile.contents.replace(/^\\uFEFF/, '');\n\n            // Pass on an updated rootpath if path of imported file is relative and file\n            // is in a (sub|sup) directory\n            //\n            // Examples:\n            // - If path of imported file is 'module/nav/nav.less' and rootpath is 'less/',\n            //   then rootpath should become 'less/module/nav/'\n            // - If path of imported file is '../mixins.less' and rootpath is 'less/',\n            //   then rootpath should become 'less/../'\n            newFileInfo.currentDirectory = fileManager.getPath(resolvedFilename);\n            if (newFileInfo.relativeUrls) {\n                newFileInfo.rootpath = fileManager.join(\n                    (importManager.context.rootpath || \"\"),\n                    fileManager.pathDiff(newFileInfo.currentDirectory, newFileInfo.entryPath));\n\n                if (!fileManager.isPathAbsolute(newFileInfo.rootpath) && fileManager.alwaysMakePathsAbsolute()) {\n                    newFileInfo.rootpath = fileManager.join(newFileInfo.entryPath, newFileInfo.rootpath);\n                }\n            }\n            newFileInfo.filename = resolvedFilename;\n\n            var newEnv = new contexts.Parse(importManager.context);\n\n            newEnv.processImports = false;\n            importManager.contents[resolvedFilename] = contents;\n\n            if (currentFileInfo.reference || importOptions.reference) {\n                newFileInfo.reference = true;\n            }\n\n            if (importOptions.plugin) {\n                new FunctionImporter(newEnv, newFileInfo).eval(contents, function (e, root) {\n                    fileParsedFunc(e, root, resolvedFilename);\n                });\n            } else if (importOptions.inline) {\n                fileParsedFunc(null, contents, resolvedFilename);\n            } else {\n                new Parser(newEnv, importManager, newFileInfo).parse(contents, function (e, root) {\n                    fileParsedFunc(e, root, resolvedFilename);\n                });\n            }\n        };\n\n        var promise = fileManager.loadFile(path, currentFileInfo.currentDirectory, this.context, environment,\n            function(err, loadedFile) {\n            if (err) {\n                fileParsedFunc(err);\n            } else {\n                loadFileCallback(loadedFile);\n            }\n        });\n        if (promise) {\n            promise.then(loadFileCallback, fileParsedFunc);\n        }\n    };\n    return ImportManager;\n};\n"]}