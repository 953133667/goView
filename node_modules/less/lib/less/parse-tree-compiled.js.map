{"version":3,"sources":["parse-tree.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,cAAR,CAAhB;AAAA,IACI,gBAAgB,QAAQ,kBAAR,CADpB;AAAA,IAEI,SAAS,QAAQ,UAAR,CAFb;;AAIA,OAAO,OAAP,GAAiB,UAAS,gBAAT,EAA2B;AACxC,QAAI,YAAY,UAAS,IAAT,EAAe,OAAf,EAAwB;AACpC,aAAK,IAAL,GAAY,IAAZ;AACA,aAAK,OAAL,GAAe,OAAf;AACH,KAHD;;AAKA,cAAU,SAAV,CAAoB,KAApB,GAA4B,UAAS,OAAT,EAAkB;AAC1C,YAAI,SAAJ;AAAA,YAAe,SAAS,EAAxB;AAAA,YAA4B,gBAA5B;AACA,YAAI;AACA,wBAAY,cAAc,KAAK,IAAnB,EAAyB,OAAzB,CAAZ;AACH,SAFD,CAEE,OAAO,CAAP,EAAU;AACR,kBAAM,IAAI,SAAJ,CAAc,CAAd,EAAiB,KAAK,OAAtB,CAAN;AACH;;AAED,YAAI;AACA,gBAAI,WAAW,QAAQ,QAAQ,QAAhB,CAAf;AACA,gBAAI,QAAJ,EAAc;AACV,uBAAO,IAAP,CAAY,iIAAZ;AACH;;AAED,gBAAI,eAAe;AACf,0BAAU,QADK;AAEf,iCAAiB,QAAQ,eAFV;AAGf,6BAAa,QAAQ,QAAQ,WAAhB,CAHE;AAIf,8BAAc,CAJC,EAAnB;;AAMA,gBAAI,QAAQ,SAAZ,EAAuB;AACnB,mCAAmB,IAAI,gBAAJ,CAAqB,QAAQ,SAA7B,CAAnB;AACA,uBAAO,GAAP,GAAa,iBAAiB,KAAjB,CAAuB,SAAvB,EAAkC,YAAlC,EAAgD,KAAK,OAArD,CAAb;AACH,aAHD,MAGO;AACH,uBAAO,GAAP,GAAa,UAAU,KAAV,CAAgB,YAAhB,CAAb;AACH;AACJ,SAlBD,CAkBE,OAAO,CAAP,EAAU;AACR,kBAAM,IAAI,SAAJ,CAAc,CAAd,EAAiB,KAAK,OAAtB,CAAN;AACH;;AAED,YAAI,QAAQ,aAAZ,EAA2B;AACvB,gBAAI,iBAAiB,QAAQ,aAAR,CAAsB,iBAAtB,EAArB;AACA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,eAAe,MAAnC,EAA2C,GAA3C,EAAgD;AAC5C,uBAAO,GAAP,GAAa,eAAe,CAAf,EAAkB,OAAlB,CAA0B,OAAO,GAAjC,EAAsC,EAAE,WAAW,gBAAb,EAA+B,SAAS,OAAxC,EAAiD,SAAS,KAAK,OAA/D,EAAtC,CAAb;AACH;AACJ;AACD,YAAI,QAAQ,SAAZ,EAAuB;AACnB,mBAAO,GAAP,GAAa,iBAAiB,oBAAjB,EAAb;AACH;;AAED,eAAO,OAAP,GAAiB,EAAjB;AACA,aAAK,IAAI,IAAT,IAAiB,KAAK,OAAL,CAAa,KAA9B,EAAqC;AACjC,gBAAI,KAAK,OAAL,CAAa,KAAb,CAAmB,cAAnB,CAAkC,IAAlC,KAA2C,SAAS,KAAK,OAAL,CAAa,YAArE,EAAmF;AAC/E,uBAAO,OAAP,CAAe,IAAf,CAAoB,IAApB;AACH;AACJ;AACD,eAAO,MAAP;AACH,KA/CD;AAgDA,WAAO,SAAP;AACH,CAvDD","file":"parse-tree-compiled.js","sourcesContent":["var LessError = require('./less-error'),\n    transformTree = require(\"./transform-tree\"),\n    logger = require(\"./logger\");\n\nmodule.exports = function(SourceMapBuilder) {\n    var ParseTree = function(root, imports) {\n        this.root = root;\n        this.imports = imports;\n    };\n\n    ParseTree.prototype.toCSS = function(options) {\n        var evaldRoot, result = {}, sourceMapBuilder;\n        try {\n            evaldRoot = transformTree(this.root, options);\n        } catch (e) {\n            throw new LessError(e, this.imports);\n        }\n\n        try {\n            var compress = Boolean(options.compress);\n            if (compress) {\n                logger.warn(\"The compress option has been deprecated. We recommend you use a dedicated css minifier, for instance see less-plugin-clean-css.\");\n            }\n\n            var toCSSOptions = {\n                compress: compress,\n                dumpLineNumbers: options.dumpLineNumbers,\n                strictUnits: Boolean(options.strictUnits),\n                numPrecision: 8};\n\n            if (options.sourceMap) {\n                sourceMapBuilder = new SourceMapBuilder(options.sourceMap);\n                result.css = sourceMapBuilder.toCSS(evaldRoot, toCSSOptions, this.imports);\n            } else {\n                result.css = evaldRoot.toCSS(toCSSOptions);\n            }\n        } catch (e) {\n            throw new LessError(e, this.imports);\n        }\n\n        if (options.pluginManager) {\n            var postProcessors = options.pluginManager.getPostProcessors();\n            for (var i = 0; i < postProcessors.length; i++) {\n                result.css = postProcessors[i].process(result.css, { sourceMap: sourceMapBuilder, options: options, imports: this.imports });\n            }\n        }\n        if (options.sourceMap) {\n            result.map = sourceMapBuilder.getExternalSourceMap();\n        }\n\n        result.imports = [];\n        for (var file in this.imports.files) {\n            if (this.imports.files.hasOwnProperty(file) && file !== this.imports.rootFilename) {\n                result.imports.push(file);\n            }\n        }\n        return result;\n    };\n    return ParseTree;\n};\n"]}