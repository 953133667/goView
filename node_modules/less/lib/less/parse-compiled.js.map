{"version":3,"sources":["parse.js"],"names":[],"mappings":"AAAA,IAAI,kBAAJ;AAAA,IACI,WAAW,QAAQ,YAAR,CADf;AAAA,IAEI,SAAS,QAAQ,iBAAR,CAFb;AAAA,IAGI,gBAAgB,QAAQ,kBAAR,CAHpB;;AAKA,OAAO,OAAP,GAAiB,UAAS,WAAT,EAAsB,SAAtB,EAAiC,aAAjC,EAAgD;AAC7D,QAAI,QAAQ,UAAU,KAAV,EAAiB,OAAjB,EAA0B,QAA1B,EAAoC;AAC5C,kBAAU,WAAW,EAArB;;AAEA,YAAI,OAAO,OAAP,KAAmB,UAAvB,EAAmC;AAC/B,uBAAW,OAAX;AACA,sBAAU,EAAV;AACH;;AAED,YAAI,CAAC,QAAL,EAAe;AACX,gBAAI,CAAC,kBAAL,EAAyB;AACrB,qCAAqB,OAAO,OAAP,KAAmB,WAAnB,GAAiC,QAAQ,SAAR,CAAjC,GAAsD,OAA3E;AACH;AACD,gBAAI,OAAO,IAAX;AACA,mBAAO,IAAI,kBAAJ,CAAuB,UAAU,OAAV,EAAmB,MAAnB,EAA2B;AACrD,sBAAM,IAAN,CAAW,IAAX,EAAiB,KAAjB,EAAwB,OAAxB,EAAiC,UAAS,GAAT,EAAc,MAAd,EAAsB;AACnD,wBAAI,GAAJ,EAAS;AACL,+BAAO,GAAP;AACH,qBAFD,MAEO;AACH,gCAAQ,MAAR;AACH;AACJ,iBAND;AAOH,aARM,CAAP;AASH,SAdD,MAcO;AACH,gBAAI,OAAJ;AAAA,gBACI,YADJ;AAAA,gBAEI,gBAAgB,IAAI,aAAJ,CAAkB,IAAlB,CAFpB;;AAIA,0BAAc,UAAd,CAAyB,QAAQ,OAAjC;AACA,oBAAQ,aAAR,GAAwB,aAAxB;;AAEA,sBAAU,IAAI,SAAS,KAAb,CAAmB,OAAnB,CAAV;;AAEA,gBAAI,QAAQ,YAAZ,EAA0B;AACtB,+BAAe,QAAQ,YAAvB;AACH,aAFD,MAEO;AACH,oBAAI,WAAW,QAAQ,QAAR,IAAoB,OAAnC;AACA,oBAAI,YAAY,SAAS,OAAT,CAAiB,WAAjB,EAA8B,EAA9B,CAAhB;AACA,+BAAe;AACX,8BAAU,QADC;AAEX,kCAAc,QAAQ,YAFX;AAGX,8BAAU,QAAQ,QAAR,IAAoB,EAHnB;AAIX,sCAAkB,SAJP;AAKX,+BAAW,SALA;AAMX,kCAAc;AANH,iBAAf;AAQA;AACA,oBAAI,aAAa,QAAb,IAAyB,aAAa,QAAb,CAAsB,KAAtB,CAA4B,CAAC,CAA7B,MAAoC,GAAjE,EAAsE;AAClE,iCAAa,QAAb,IAAyB,GAAzB;AACH;AACJ;;AAED,gBAAI,UAAU,IAAI,aAAJ,CAAkB,OAAlB,EAA2B,YAA3B,CAAd;;AAEA,gBAAI,MAAJ,CAAW,OAAX,EAAoB,OAApB,EAA6B,YAA7B,EACK,KADL,CACW,KADX,EACkB,UAAU,CAAV,EAAa,IAAb,EAAmB;AACjC,oBAAI,CAAJ,EAAO;AAAE,2BAAO,SAAS,CAAT,CAAP;AAAqB;AAC9B,yBAAS,IAAT,EAAe,IAAf,EAAqB,OAArB,EAA8B,OAA9B;AACH,aAJD,EAIG,OAJH;AAKH;AACJ,KA3DD;AA4DA,WAAO,KAAP;AACH,CA9DD","file":"parse-compiled.js","sourcesContent":["var PromiseConstructor,\n    contexts = require(\"./contexts\"),\n    Parser = require('./parser/parser'),\n    PluginManager = require('./plugin-manager');\n\nmodule.exports = function(environment, ParseTree, ImportManager) {\n    var parse = function (input, options, callback) {\n        options = options || {};\n\n        if (typeof options === 'function') {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback) {\n            if (!PromiseConstructor) {\n                PromiseConstructor = typeof Promise === 'undefined' ? require('promise') : Promise;\n            }\n            var self = this;\n            return new PromiseConstructor(function (resolve, reject) {\n                parse.call(self, input, options, function(err, output) {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve(output);\n                    }\n                });\n            });\n        } else {\n            var context,\n                rootFileInfo,\n                pluginManager = new PluginManager(this);\n\n            pluginManager.addPlugins(options.plugins);\n            options.pluginManager = pluginManager;\n\n            context = new contexts.Parse(options);\n\n            if (options.rootFileInfo) {\n                rootFileInfo = options.rootFileInfo;\n            } else {\n                var filename = options.filename || \"input\";\n                var entryPath = filename.replace(/[^\\/\\\\]*$/, \"\");\n                rootFileInfo = {\n                    filename: filename,\n                    relativeUrls: context.relativeUrls,\n                    rootpath: context.rootpath || \"\",\n                    currentDirectory: entryPath,\n                    entryPath: entryPath,\n                    rootFilename: filename\n                };\n                // add in a missing trailing slash\n                if (rootFileInfo.rootpath && rootFileInfo.rootpath.slice(-1) !== \"/\") {\n                    rootFileInfo.rootpath += \"/\";\n                }\n            }\n\n            var imports = new ImportManager(context, rootFileInfo);\n\n            new Parser(context, imports, rootFileInfo)\n                .parse(input, function (e, root) {\n                if (e) { return callback(e); }\n                callback(null, root, imports, options);\n            }, options);\n        }\n    };\n    return parse;\n};\n"]}