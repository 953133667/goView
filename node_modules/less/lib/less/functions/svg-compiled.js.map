{"version":3,"sources":["svg.js"],"names":[],"mappings":"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","file":"svg-compiled.js","sourcesContent":["module.exports = function(environment) {\n    var Dimension = require(\"../tree/dimension\"),\n        Color = require(\"../tree/color\"),\n        Expression = require(\"../tree/expression\"),\n        Quoted = require(\"../tree/quoted\"),\n        URL = require(\"../tree/url\"),\n        functionRegistry = require(\"./function-registry\");\n\n    functionRegistry.add(\"svg-gradient\", function(direction) {\n\n        var stops,\n            gradientDirectionSvg,\n            gradientType = \"linear\",\n            rectangleDimension = 'x=\"0\" y=\"0\" width=\"1\" height=\"1\"',\n            renderEnv = {compress: false},\n            returner,\n            directionValue = direction.toCSS(renderEnv),\n\t\t\ti, color, position, positionValue, alpha;\n\n        function throwArgumentDescriptor() {\n            throw { type: \"Argument\",\n\t\t\t\t\tmessage: \"svg-gradient expects direction, start_color [start_position], [color position,]...,\" +\n\t\t\t\t\t\t\t\" end_color [end_position] or direction, color list\" };\n        }\n\n        if (arguments.length == 2) {\n            if (arguments[1].value.length < 2) {\n                throwArgumentDescriptor();\n            }\n            stops = arguments[1].value;\n        } else if (arguments.length < 3) {\n            throwArgumentDescriptor();\n        } else {\n            stops = Array.prototype.slice.call(arguments, 1);\n        }\n\n        switch (directionValue) {\n            case \"to bottom\":\n                gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\"';\n                break;\n            case \"to right\":\n                gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\"';\n                break;\n            case \"to bottom right\":\n                gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\"';\n                break;\n            case \"to top right\":\n                gradientDirectionSvg = 'x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\"';\n                break;\n            case \"ellipse\":\n            case \"ellipse at center\":\n                gradientType = \"radial\";\n                gradientDirectionSvg = 'cx=\"50%\" cy=\"50%\" r=\"75%\"';\n                rectangleDimension = 'x=\"-50\" y=\"-50\" width=\"101\" height=\"101\"';\n                break;\n            default:\n                throw { type: \"Argument\", message: \"svg-gradient direction must be 'to bottom', 'to right',\" +\n                    \" 'to bottom right', 'to top right' or 'ellipse at center'\" };\n        }\n        returner = '<?xml version=\"1.0\" ?>' +\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"100%\" height=\"100%\" viewBox=\"0 0 1 1\" preserveAspectRatio=\"none\">' +\n            '<' + gradientType + 'Gradient id=\"gradient\" gradientUnits=\"userSpaceOnUse\" ' + gradientDirectionSvg + '>';\n\n        for (i = 0; i < stops.length; i+= 1) {\n            if (stops[i] instanceof Expression) {\n                color = stops[i].value[0];\n                position = stops[i].value[1];\n            } else {\n                color = stops[i];\n                position = undefined;\n            }\n\n            if (!(color instanceof Color) || (!((i === 0 || i + 1 === stops.length) && position === undefined) && !(position instanceof Dimension))) {\n                throwArgumentDescriptor();\n            }\n            positionValue = position ? position.toCSS(renderEnv) : i === 0 ? \"0%\" : \"100%\";\n            alpha = color.alpha;\n            returner += '<stop offset=\"' + positionValue + '\" stop-color=\"' + color.toRGB() + '\"' + (alpha < 1 ? ' stop-opacity=\"' + alpha + '\"' : '') + '/>';\n        }\n        returner += '</' + gradientType + 'Gradient>' +\n            '<rect ' + rectangleDimension + ' fill=\"url(#gradient)\" /></svg>';\n\n        returner = encodeURIComponent(returner);\n\n        returner = \"data:image/svg+xml,\" + returner;\n        return new URL(new Quoted(\"'\" + returner + \"'\", returner, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);\n    });\n};\n"]}