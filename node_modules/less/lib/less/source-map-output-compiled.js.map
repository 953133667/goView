{"version":3,"sources":["source-map-output.js"],"names":[],"mappings":"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","file":"source-map-output-compiled.js","sourcesContent":["module.exports = function (environment) {\n\n    var SourceMapOutput = function (options) {\n        this._css = [];\n        this._rootNode = options.rootNode;\n        this._contentsMap = options.contentsMap;\n        this._contentsIgnoredCharsMap = options.contentsIgnoredCharsMap;\n        if (options.sourceMapFilename) {\n            this._sourceMapFilename = options.sourceMapFilename.replace(/\\\\/g, '/');\n        }\n        this._outputFilename = options.outputFilename;\n        this.sourceMapURL = options.sourceMapURL;\n        if (options.sourceMapBasepath) {\n            this._sourceMapBasepath = options.sourceMapBasepath.replace(/\\\\/g, '/');\n        }\n        if (options.sourceMapRootpath) {\n            this._sourceMapRootpath = options.sourceMapRootpath.replace(/\\\\/g, '/');\n            if (this._sourceMapRootpath.charAt(this._sourceMapRootpath.length - 1) !== '/') {\n                this._sourceMapRootpath += '/';\n            }\n        } else {\n            this._sourceMapRootpath = \"\";\n        }\n        this._outputSourceFiles = options.outputSourceFiles;\n        this._sourceMapGeneratorConstructor = environment.getSourceMapGenerator();\n\n        this._lineNumber = 0;\n        this._column = 0;\n    };\n\n    SourceMapOutput.prototype.normalizeFilename = function(filename) {\n        filename = filename.replace(/\\\\/g, '/');\n\n        if (this._sourceMapBasepath && filename.indexOf(this._sourceMapBasepath) === 0) {\n            filename = filename.substring(this._sourceMapBasepath.length);\n            if (filename.charAt(0) === '\\\\' || filename.charAt(0) === '/') {\n                filename = filename.substring(1);\n            }\n        }\n        return (this._sourceMapRootpath || \"\") + filename;\n    };\n\n    SourceMapOutput.prototype.add = function(chunk, fileInfo, index, mapLines) {\n\n        //ignore adding empty strings\n        if (!chunk) {\n            return;\n        }\n\n        var lines,\n            sourceLines,\n            columns,\n            sourceColumns,\n            i;\n\n        if (fileInfo) {\n            var inputSource = this._contentsMap[fileInfo.filename];\n\n            // remove vars/banner added to the top of the file\n            if (this._contentsIgnoredCharsMap[fileInfo.filename]) {\n                // adjust the index\n                index -= this._contentsIgnoredCharsMap[fileInfo.filename];\n                if (index < 0) { index = 0; }\n                // adjust the source\n                inputSource = inputSource.slice(this._contentsIgnoredCharsMap[fileInfo.filename]);\n            }\n            inputSource = inputSource.substring(0, index);\n            sourceLines = inputSource.split(\"\\n\");\n            sourceColumns = sourceLines[sourceLines.length - 1];\n        }\n\n        lines = chunk.split(\"\\n\");\n        columns = lines[lines.length - 1];\n\n        if (fileInfo) {\n            if (!mapLines) {\n                this._sourceMapGenerator.addMapping({ generated: { line: this._lineNumber + 1, column: this._column},\n                    original: { line: sourceLines.length, column: sourceColumns.length},\n                    source: this.normalizeFilename(fileInfo.filename)});\n            } else {\n                for (i = 0; i < lines.length; i++) {\n                    this._sourceMapGenerator.addMapping({ generated: { line: this._lineNumber + i + 1, column: i === 0 ? this._column : 0},\n                        original: { line: sourceLines.length + i, column: i === 0 ? sourceColumns.length : 0},\n                        source: this.normalizeFilename(fileInfo.filename)});\n                }\n            }\n        }\n\n        if (lines.length === 1) {\n            this._column += columns.length;\n        } else {\n            this._lineNumber += lines.length - 1;\n            this._column = columns.length;\n        }\n\n        this._css.push(chunk);\n    };\n\n    SourceMapOutput.prototype.isEmpty = function() {\n        return this._css.length === 0;\n    };\n\n    SourceMapOutput.prototype.toCSS = function(context) {\n        this._sourceMapGenerator = new this._sourceMapGeneratorConstructor({ file: this._outputFilename, sourceRoot: null });\n\n        if (this._outputSourceFiles) {\n            for (var filename in this._contentsMap) {\n                if (this._contentsMap.hasOwnProperty(filename)) {\n                    var source = this._contentsMap[filename];\n                    if (this._contentsIgnoredCharsMap[filename]) {\n                        source = source.slice(this._contentsIgnoredCharsMap[filename]);\n                    }\n                    this._sourceMapGenerator.setSourceContent(this.normalizeFilename(filename), source);\n                }\n            }\n        }\n\n        this._rootNode.genCSS(context, this);\n\n        if (this._css.length > 0) {\n            var sourceMapURL,\n                sourceMapContent = JSON.stringify(this._sourceMapGenerator.toJSON());\n\n            if (this.sourceMapURL) {\n                sourceMapURL = this.sourceMapURL;\n            } else if (this._sourceMapFilename) {\n                sourceMapURL = this._sourceMapFilename;\n            }\n            this.sourceMapURL = sourceMapURL;\n\n            this.sourceMap = sourceMapContent;\n        }\n\n        return this._css.join('');\n    };\n\n    return SourceMapOutput;\n};\n"]}