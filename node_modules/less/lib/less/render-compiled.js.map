{"version":3,"sources":["render.js"],"names":[],"mappings":"AAAA,IAAI,kBAAJ;;AAEA,OAAO,OAAP,GAAiB,UAAS,WAAT,EAAsB,SAAtB,EAAiC,aAAjC,EAAgD;AAC7D,QAAI,SAAS,UAAU,KAAV,EAAiB,OAAjB,EAA0B,QAA1B,EAAoC;AAC7C,YAAI,OAAO,OAAP,KAAmB,UAAvB,EAAmC;AAC/B,uBAAW,OAAX;AACA,sBAAU,EAAV;AACH;;AAED,YAAI,CAAC,QAAL,EAAe;AACX,gBAAI,CAAC,kBAAL,EAAyB;AACrB,qCAAqB,OAAO,OAAP,KAAmB,WAAnB,GAAiC,QAAQ,SAAR,CAAjC,GAAsD,OAA3E;AACH;AACD,gBAAI,OAAO,IAAX;AACA,mBAAO,IAAI,kBAAJ,CAAuB,UAAU,OAAV,EAAmB,MAAnB,EAA2B;AACrD,uBAAO,IAAP,CAAY,IAAZ,EAAkB,KAAlB,EAAyB,OAAzB,EAAkC,UAAS,GAAT,EAAc,MAAd,EAAsB;AACpD,wBAAI,GAAJ,EAAS;AACL,+BAAO,GAAP;AACH,qBAFD,MAEO;AACH,gCAAQ,MAAR;AACH;AACJ,iBAND;AAOH,aARM,CAAP;AASH,SAdD,MAcO;AACH,iBAAK,KAAL,CAAW,KAAX,EAAkB,OAAlB,EAA2B,UAAS,GAAT,EAAc,IAAd,EAAoB,OAApB,EAA6B,OAA7B,EAAsC;AAC7D,oBAAI,GAAJ,EAAS;AAAE,2BAAO,SAAS,GAAT,CAAP;AAAuB;;AAElC,oBAAI,MAAJ;AACA,oBAAI;AACA,wBAAI,YAAY,IAAI,SAAJ,CAAc,IAAd,EAAoB,OAApB,CAAhB;AACA,6BAAS,UAAU,KAAV,CAAgB,OAAhB,CAAT;AACH,iBAHD,CAIA,OAAO,GAAP,EAAY;AAAE,2BAAO,SAAS,GAAT,CAAP;AAAuB;;AAErC,yBAAS,IAAT,EAAe,MAAf;AACH,aAXD;AAYH;AACJ,KAlCD;;AAoCA,WAAO,MAAP;AACH,CAtCD","file":"render-compiled.js","sourcesContent":["var PromiseConstructor;\n\nmodule.exports = function(environment, ParseTree, ImportManager) {\n    var render = function (input, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback) {\n            if (!PromiseConstructor) {\n                PromiseConstructor = typeof Promise === 'undefined' ? require('promise') : Promise;\n            }\n            var self = this;\n            return new PromiseConstructor(function (resolve, reject) {\n                render.call(self, input, options, function(err, output) {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve(output);\n                    }\n                });\n            });\n        } else {\n            this.parse(input, options, function(err, root, imports, options) {\n                if (err) { return callback(err); }\n\n                var result;\n                try {\n                    var parseTree = new ParseTree(root, imports);\n                    result = parseTree.toCSS(options);\n                }\n                catch (err) { return callback(err); }\n\n                callback(null, result);\n            });\n        }\n    };\n\n    return render;\n};\n"]}