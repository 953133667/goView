{"version":3,"sources":["directive.js"],"names":[],"mappings":"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","file":"directive-compiled.js","sourcesContent":["var Node = require(\"./node\"),\n    Selector = require(\"./selector\"),\n    Ruleset = require(\"./ruleset\");\n\nvar Directive = function (name, value, rules, index, currentFileInfo, debugInfo, isRooted, visibilityInfo) {\n    var i;\n\n    this.name  = name;\n    this.value = value;\n    if (rules) {\n        if (Array.isArray(rules)) {\n            this.rules = rules;\n        } else {\n            this.rules = [rules];\n            this.rules[0].selectors = (new Selector([], null, null, this.index, currentFileInfo)).createEmptySelectors();\n        }\n        for (i = 0; i < this.rules.length; i++) {\n            this.rules[i].allowImports = true;\n        }\n    }\n    this.index = index;\n    this.currentFileInfo = currentFileInfo;\n    this.debugInfo = debugInfo;\n    this.isRooted = isRooted || false;\n    this.copyVisibilityInfo(visibilityInfo);\n    this.allowRoot = true;\n};\n\nDirective.prototype = new Node();\nDirective.prototype.type = \"Directive\";\nDirective.prototype.accept = function (visitor) {\n    var value = this.value, rules = this.rules;\n    if (rules) {\n        this.rules = visitor.visitArray(rules);\n    }\n    if (value) {\n        this.value = visitor.visit(value);\n    }\n};\nDirective.prototype.isRulesetLike = function() {\n    return this.rules || !this.isCharset();\n};\nDirective.prototype.isCharset = function() {\n    return \"@charset\" === this.name;\n};\nDirective.prototype.genCSS = function (context, output) {\n    var value = this.value, rules = this.rules;\n    output.add(this.name, this.currentFileInfo, this.index);\n    if (value) {\n        output.add(' ');\n        value.genCSS(context, output);\n    }\n    if (rules) {\n        this.outputRuleset(context, output, rules);\n    } else {\n        output.add(';');\n    }\n};\nDirective.prototype.eval = function (context) {\n    var mediaPathBackup, mediaBlocksBackup, value = this.value, rules = this.rules;\n\n    //media stored inside other directive should not bubble over it\n    //backpup media bubbling information\n    mediaPathBackup = context.mediaPath;\n    mediaBlocksBackup = context.mediaBlocks;\n    //deleted media bubbling information\n    context.mediaPath = [];\n    context.mediaBlocks = [];\n\n    if (value) {\n        value = value.eval(context);\n    }\n    if (rules) {\n        // assuming that there is only one rule at this point - that is how parser constructs the rule\n        rules = [rules[0].eval(context)];\n        rules[0].root = true;\n    }\n    //restore media bubbling information\n    context.mediaPath = mediaPathBackup;\n    context.mediaBlocks = mediaBlocksBackup;\n\n    return new Directive(this.name, value, rules,\n        this.index, this.currentFileInfo, this.debugInfo, this.isRooted, this.visibilityInfo());\n};\nDirective.prototype.variable = function (name) {\n    if (this.rules) {\n        // assuming that there is only one rule at this point - that is how parser constructs the rule\n        return Ruleset.prototype.variable.call(this.rules[0], name);\n    }\n};\nDirective.prototype.find = function () {\n    if (this.rules) {\n        // assuming that there is only one rule at this point - that is how parser constructs the rule\n        return Ruleset.prototype.find.apply(this.rules[0], arguments);\n    }\n};\nDirective.prototype.rulesets = function () {\n    if (this.rules) {\n        // assuming that there is only one rule at this point - that is how parser constructs the rule\n        return Ruleset.prototype.rulesets.apply(this.rules[0]);\n    }\n};\nDirective.prototype.outputRuleset = function (context, output, rules) {\n    var ruleCnt = rules.length, i;\n    context.tabLevel = (context.tabLevel | 0) + 1;\n\n    // Compressed\n    if (context.compress) {\n        output.add('{');\n        for (i = 0; i < ruleCnt; i++) {\n            rules[i].genCSS(context, output);\n        }\n        output.add('}');\n        context.tabLevel--;\n        return;\n    }\n\n    // Non-compressed\n    var tabSetStr = '\\n' + Array(context.tabLevel).join(\"  \"), tabRuleStr = tabSetStr + \"  \";\n    if (!ruleCnt) {\n        output.add(\" {\" + tabSetStr + '}');\n    } else {\n        output.add(\" {\" + tabRuleStr);\n        rules[0].genCSS(context, output);\n        for (i = 1; i < ruleCnt; i++) {\n            output.add(tabRuleStr);\n            rules[i].genCSS(context, output);\n        }\n        output.add(tabSetStr + '}');\n    }\n\n    context.tabLevel--;\n};\nmodule.exports = Directive;\n"]}