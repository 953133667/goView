{"version":3,"sources":["color.js"],"names":[],"mappings":"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","file":"color-compiled.js","sourcesContent":["var Node = require(\"./node\"),\n    colors = require(\"../data/colors\");\n\n//\n// RGB Colors - #ff0014, #eee\n//\nvar Color = function (rgb, a, originalForm) {\n    //\n    // The end goal here, is to parse the arguments\n    // into an integer triplet, such as `128, 255, 0`\n    //\n    // This facilitates operations and conversions.\n    //\n    if (Array.isArray(rgb)) {\n        this.rgb = rgb;\n    } else if (rgb.length == 6) {\n        this.rgb = rgb.match(/.{2}/g).map(function (c) {\n            return parseInt(c, 16);\n        });\n    } else {\n        this.rgb = rgb.split('').map(function (c) {\n            return parseInt(c + c, 16);\n        });\n    }\n    this.alpha = typeof a === 'number' ? a : 1;\n    if (typeof originalForm !== 'undefined') {\n        this.value = originalForm;\n    }\n};\n\nColor.prototype = new Node();\nColor.prototype.type = \"Color\";\n\nfunction clamp(v, max) {\n    return Math.min(Math.max(v, 0), max);\n}\n\nfunction toHex(v) {\n    return '#' + v.map(function (c) {\n        c = clamp(Math.round(c), 255);\n        return (c < 16 ? '0' : '') + c.toString(16);\n    }).join('');\n}\n\nColor.prototype.luma = function () {\n    var r = this.rgb[0] / 255,\n        g = this.rgb[1] / 255,\n        b = this.rgb[2] / 255;\n\n    r = (r <= 0.03928) ? r / 12.92 : Math.pow(((r + 0.055) / 1.055), 2.4);\n    g = (g <= 0.03928) ? g / 12.92 : Math.pow(((g + 0.055) / 1.055), 2.4);\n    b = (b <= 0.03928) ? b / 12.92 : Math.pow(((b + 0.055) / 1.055), 2.4);\n\n    return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n};\nColor.prototype.genCSS = function (context, output) {\n    output.add(this.toCSS(context));\n};\nColor.prototype.toCSS = function (context, doNotCompress) {\n    var compress = context && context.compress && !doNotCompress, color, alpha;\n\n    // `value` is set if this color was originally\n    // converted from a named color string so we need\n    // to respect this and try to output named color too.\n    if (this.value) {\n        return this.value;\n    }\n\n    // If we have some transparency, the only way to represent it\n    // is via `rgba`. Otherwise, we use the hex representation,\n    // which has better compatibility with older browsers.\n    // Values are capped between `0` and `255`, rounded and zero-padded.\n    alpha = this.fround(context, this.alpha);\n    if (alpha < 1) {\n        return \"rgba(\" + this.rgb.map(function (c) {\n            return clamp(Math.round(c), 255);\n        }).concat(clamp(alpha, 1))\n            .join(',' + (compress ? '' : ' ')) + \")\";\n    }\n\n    color = this.toRGB();\n\n    if (compress) {\n        var splitcolor = color.split('');\n\n        // Convert color to short format\n        if (splitcolor[1] === splitcolor[2] && splitcolor[3] === splitcolor[4] && splitcolor[5] === splitcolor[6]) {\n            color = '#' + splitcolor[1] + splitcolor[3] + splitcolor[5];\n        }\n    }\n\n    return color;\n};\n\n//\n// Operations have to be done per-channel, if not,\n// channels will spill onto each other. Once we have\n// our result, in the form of an integer triplet,\n// we create a new Color node to hold the result.\n//\nColor.prototype.operate = function (context, op, other) {\n    var rgb = [];\n    var alpha = this.alpha * (1 - other.alpha) + other.alpha;\n    for (var c = 0; c < 3; c++) {\n        rgb[c] = this._operate(context, op, this.rgb[c], other.rgb[c]);\n    }\n    return new Color(rgb, alpha);\n};\nColor.prototype.toRGB = function () {\n    return toHex(this.rgb);\n};\nColor.prototype.toHSL = function () {\n    var r = this.rgb[0] / 255,\n        g = this.rgb[1] / 255,\n        b = this.rgb[2] / 255,\n        a = this.alpha;\n\n    var max = Math.max(r, g, b), min = Math.min(r, g, b);\n    var h, s, l = (max + min) / 2, d = max - min;\n\n    if (max === min) {\n        h = s = 0;\n    } else {\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n        switch (max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2;               break;\n            case b: h = (r - g) / d + 4;               break;\n        }\n        h /= 6;\n    }\n    return { h: h * 360, s: s, l: l, a: a };\n};\n//Adapted from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\nColor.prototype.toHSV = function () {\n    var r = this.rgb[0] / 255,\n        g = this.rgb[1] / 255,\n        b = this.rgb[2] / 255,\n        a = this.alpha;\n\n    var max = Math.max(r, g, b), min = Math.min(r, g, b);\n    var h, s, v = max;\n\n    var d = max - min;\n    if (max === 0) {\n        s = 0;\n    } else {\n        s = d / max;\n    }\n\n    if (max === min) {\n        h = 0;\n    } else {\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n        h /= 6;\n    }\n    return { h: h * 360, s: s, v: v, a: a };\n};\nColor.prototype.toARGB = function () {\n    return toHex([this.alpha * 255].concat(this.rgb));\n};\nColor.prototype.compare = function (x) {\n    return (x.rgb &&\n        x.rgb[0] === this.rgb[0] &&\n        x.rgb[1] === this.rgb[1] &&\n        x.rgb[2] === this.rgb[2] &&\n        x.alpha  === this.alpha) ? 0 : undefined;\n};\n\nColor.fromKeyword = function(keyword) {\n    var c, key = keyword.toLowerCase();\n    if (colors.hasOwnProperty(key)) {\n        c = new Color(colors[key].slice(1));\n    }\n    else if (key === \"transparent\") {\n        c = new Color([0, 0, 0], 0);\n    }\n\n    if (c) {\n        c.value = keyword;\n        return c;\n    }\n};\nmodule.exports = Color;\n"]}