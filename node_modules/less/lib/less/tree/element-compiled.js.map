{"version":3,"sources":["element.js"],"names":[],"mappings":"AAAA,IAAI,OAAO,QAAQ,QAAR,CAAX;AAAA,IACI,QAAQ,QAAQ,SAAR,CADZ;AAAA,IAEI,aAAa,QAAQ,cAAR,CAFjB;;AAIA,IAAI,UAAU,UAAU,UAAV,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,eAApC,EAAqD,IAArD,EAA2D;AACrE,SAAK,UAAL,GAAkB,sBAAsB,UAAtB,GACA,UADA,GACa,IAAI,UAAJ,CAAe,UAAf,CAD/B;;AAGA,QAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC3B,aAAK,KAAL,GAAa,MAAM,IAAN,EAAb;AACH,KAFD,MAEO,IAAI,KAAJ,EAAW;AACd,aAAK,KAAL,GAAa,KAAb;AACH,KAFM,MAEA;AACH,aAAK,KAAL,GAAa,EAAb;AACH;AACD,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,eAAL,GAAuB,eAAvB;AACA,SAAK,kBAAL,CAAwB,IAAxB;AACH,CAdD;AAeA,QAAQ,SAAR,GAAoB,IAAI,IAAJ,EAApB;AACA,QAAQ,SAAR,CAAkB,IAAlB,GAAyB,SAAzB;AACA,QAAQ,SAAR,CAAkB,MAAlB,GAA2B,UAAU,OAAV,EAAmB;AAC1C,QAAI,QAAQ,KAAK,KAAjB;AACA,SAAK,UAAL,GAAkB,QAAQ,KAAR,CAAc,KAAK,UAAnB,CAAlB;AACA,QAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC3B,aAAK,KAAL,GAAa,QAAQ,KAAR,CAAc,KAAd,CAAb;AACH;AACJ,CAND;AAOA,QAAQ,SAAR,CAAkB,IAAlB,GAAyB,UAAU,OAAV,EAAmB;AACxC,WAAO,IAAI,OAAJ,CAAY,KAAK,UAAjB,EACkB,KAAK,KAAL,CAAW,IAAX,GAAkB,KAAK,KAAL,CAAW,IAAX,CAAgB,OAAhB,CAAlB,GAA6C,KAAK,KADpE,EAEkB,KAAK,KAFvB,EAGkB,KAAK,eAHvB,EAGwC,KAAK,cAAL,EAHxC,CAAP;AAIH,CALD;AAMA,QAAQ,SAAR,CAAkB,KAAlB,GAA0B,YAAY;AAClC,WAAO,IAAI,OAAJ,CAAY,KAAK,UAAjB,EACH,KAAK,KADF,EAEH,KAAK,KAFF,EAGH,KAAK,eAHF,EAGmB,KAAK,cAAL,EAHnB,CAAP;AAIH,CALD;AAMA,QAAQ,SAAR,CAAkB,MAAlB,GAA2B,UAAU,OAAV,EAAmB,MAAnB,EAA2B;AAClD,WAAO,GAAP,CAAW,KAAK,KAAL,CAAW,OAAX,CAAX,EAAgC,KAAK,eAArC,EAAsD,KAAK,KAA3D;AACH,CAFD;AAGA,QAAQ,SAAR,CAAkB,KAAlB,GAA0B,UAAU,OAAV,EAAmB;AACzC,cAAU,WAAW,EAArB;AACA,QAAI,QAAQ,KAAK,KAAjB;AAAA,QAAwB,gBAAgB,QAAQ,aAAhD;AACA,QAAI,iBAAiB,KAArB,EAA4B;AACxB;AACA;AACA,gBAAQ,aAAR,GAAwB,IAAxB;AACH;AACD,YAAQ,MAAM,KAAN,GAAc,MAAM,KAAN,CAAY,OAAZ,CAAd,GAAqC,KAA7C;AACA,YAAQ,aAAR,GAAwB,aAAxB;AACA,QAAI,UAAU,EAAV,IAAgB,KAAK,UAAL,CAAgB,KAAhB,CAAsB,MAAtB,CAA6B,CAA7B,MAAoC,GAAxD,EAA6D;AACzD,eAAO,EAAP;AACH,KAFD,MAEO;AACH,eAAO,KAAK,UAAL,CAAgB,KAAhB,CAAsB,OAAtB,IAAiC,KAAxC;AACH;AACJ,CAfD;AAgBA,OAAO,OAAP,GAAiB,OAAjB","file":"element-compiled.js","sourcesContent":["var Node = require(\"./node\"),\n    Paren = require(\"./paren\"),\n    Combinator = require(\"./combinator\");\n\nvar Element = function (combinator, value, index, currentFileInfo, info) {\n    this.combinator = combinator instanceof Combinator ?\n                      combinator : new Combinator(combinator);\n\n    if (typeof value === 'string') {\n        this.value = value.trim();\n    } else if (value) {\n        this.value = value;\n    } else {\n        this.value = \"\";\n    }\n    this.index = index;\n    this.currentFileInfo = currentFileInfo;\n    this.copyVisibilityInfo(info);\n};\nElement.prototype = new Node();\nElement.prototype.type = \"Element\";\nElement.prototype.accept = function (visitor) {\n    var value = this.value;\n    this.combinator = visitor.visit(this.combinator);\n    if (typeof value === \"object\") {\n        this.value = visitor.visit(value);\n    }\n};\nElement.prototype.eval = function (context) {\n    return new Element(this.combinator,\n                             this.value.eval ? this.value.eval(context) : this.value,\n                             this.index,\n                             this.currentFileInfo, this.visibilityInfo());\n};\nElement.prototype.clone = function () {\n    return new Element(this.combinator,\n        this.value,\n        this.index,\n        this.currentFileInfo, this.visibilityInfo());\n};\nElement.prototype.genCSS = function (context, output) {\n    output.add(this.toCSS(context), this.currentFileInfo, this.index);\n};\nElement.prototype.toCSS = function (context) {\n    context = context || {};\n    var value = this.value, firstSelector = context.firstSelector;\n    if (value instanceof Paren) {\n        // selector in parens should not be affected by outer selector\n        // flags (breaks only interpolated selectors - see #1973)\n        context.firstSelector = true;\n    }\n    value = value.toCSS ? value.toCSS(context) : value;\n    context.firstSelector = firstSelector;\n    if (value === '' && this.combinator.value.charAt(0) === '&') {\n        return '';\n    } else {\n        return this.combinator.toCSS(context) + value;\n    }\n};\nmodule.exports = Element;\n"]}