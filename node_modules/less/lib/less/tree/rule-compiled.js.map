{"version":3,"sources":["rule.js"],"names":[],"mappings":"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","file":"rule-compiled.js","sourcesContent":["var Node = require(\"./node\"),\n    Value = require(\"./value\"),\n    Keyword = require(\"./keyword\");\n\nvar Rule = function (name, value, important, merge, index, currentFileInfo, inline, variable) {\n    this.name = name;\n    this.value = (value instanceof Node) ? value : new Value([value]); //value instanceof tree.Value || value instanceof tree.Ruleset ??\n    this.important = important ? ' ' + important.trim() : '';\n    this.merge = merge;\n    this.index = index;\n    this.currentFileInfo = currentFileInfo;\n    this.inline = inline || false;\n    this.variable = (variable !== undefined) ? variable\n        : (name.charAt && (name.charAt(0) === '@'));\n    this.allowRoot = true;\n};\n\nfunction evalName(context, name) {\n    var value = \"\", i, n = name.length,\n        output = {add: function (s) {value += s;}};\n    for (i = 0; i < n; i++) {\n        name[i].eval(context).genCSS(context, output);\n    }\n    return value;\n}\n\nRule.prototype = new Node();\nRule.prototype.type = \"Rule\";\nRule.prototype.genCSS = function (context, output) {\n    output.add(this.name + (context.compress ? ':' : ': '), this.currentFileInfo, this.index);\n    try {\n        this.value.genCSS(context, output);\n    }\n    catch(e) {\n        e.index = this.index;\n        e.filename = this.currentFileInfo.filename;\n        throw e;\n    }\n    output.add(this.important + ((this.inline || (context.lastRule && context.compress)) ? \"\" : \";\"), this.currentFileInfo, this.index);\n};\nRule.prototype.eval = function (context) {\n    var strictMathBypass = false, name = this.name, evaldValue, variable = this.variable;\n    if (typeof name !== \"string\") {\n        // expand 'primitive' name directly to get\n        // things faster (~10% for benchmark.less):\n        name = (name.length === 1) && (name[0] instanceof Keyword) ?\n                name[0].value : evalName(context, name);\n        variable = false; // never treat expanded interpolation as new variable name\n    }\n    if (name === \"font\" && !context.strictMath) {\n        strictMathBypass = true;\n        context.strictMath = true;\n    }\n    try {\n        context.importantScope.push({});\n        evaldValue = this.value.eval(context);\n\n        if (!this.variable && evaldValue.type === \"DetachedRuleset\") {\n            throw { message: \"Rulesets cannot be evaluated on a property.\",\n                    index: this.index, filename: this.currentFileInfo.filename };\n        }\n        var important = this.important,\n            importantResult = context.importantScope.pop();\n        if (!important && importantResult.important) {\n            important = importantResult.important;\n        }\n\n        return new Rule(name,\n                          evaldValue,\n                          important,\n                          this.merge,\n                          this.index, this.currentFileInfo, this.inline,\n                              variable);\n    }\n    catch(e) {\n        if (typeof e.index !== 'number') {\n            e.index = this.index;\n            e.filename = this.currentFileInfo.filename;\n        }\n        throw e;\n    }\n    finally {\n        if (strictMathBypass) {\n            context.strictMath = false;\n        }\n    }\n};\nRule.prototype.makeImportant = function () {\n    return new Rule(this.name,\n                          this.value,\n                          \"!important\",\n                          this.merge,\n                          this.index, this.currentFileInfo, this.inline);\n};\n\nmodule.exports = Rule;"]}