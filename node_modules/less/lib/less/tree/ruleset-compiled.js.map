{"version":3,"sources":["ruleset.js"],"names":[],"mappings":"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","file":"ruleset-compiled.js","sourcesContent":["var Node = require(\"./node\"),\n    Rule = require(\"./rule\"),\n    Selector = require(\"./selector\"),\n    Element = require(\"./element\"),\n    Paren = require(\"./paren\"),\n    contexts = require(\"../contexts\"),\n    globalFunctionRegistry = require(\"../functions/function-registry\"),\n    defaultFunc = require(\"../functions/default\"),\n    getDebugInfo = require(\"./debug-info\");\n\nvar Ruleset = function (selectors, rules, strictImports, visibilityInfo) {\n    this.selectors = selectors;\n    this.rules = rules;\n    this._lookups = {};\n    this.strictImports = strictImports;\n    this.copyVisibilityInfo(visibilityInfo);\n    this.allowRoot = true;\n};\nRuleset.prototype = new Node();\nRuleset.prototype.type = \"Ruleset\";\nRuleset.prototype.isRuleset = true;\nRuleset.prototype.isRulesetLike = true;\nRuleset.prototype.accept = function (visitor) {\n    if (this.paths) {\n        this.paths = visitor.visitArray(this.paths, true);\n    } else if (this.selectors) {\n        this.selectors = visitor.visitArray(this.selectors);\n    }\n    if (this.rules && this.rules.length) {\n        this.rules = visitor.visitArray(this.rules);\n    }\n};\nRuleset.prototype.eval = function (context) {\n    var thisSelectors = this.selectors, selectors,\n        selCnt, selector, i, hasOnePassingSelector = false;\n\n    if (thisSelectors && (selCnt = thisSelectors.length)) {\n        selectors = [];\n        defaultFunc.error({\n            type: \"Syntax\",\n            message: \"it is currently only allowed in parametric mixin guards,\"\n        });\n        for (i = 0; i < selCnt; i++) {\n            selector = thisSelectors[i].eval(context);\n            selectors.push(selector);\n            if (selector.evaldCondition) {\n                hasOnePassingSelector = true;\n            }\n        }\n        defaultFunc.reset();\n    } else {\n        hasOnePassingSelector = true;\n    }\n\n    var rules = this.rules ? this.rules.slice(0) : null,\n        ruleset = new Ruleset(selectors, rules, this.strictImports, this.visibilityInfo()),\n        rule, subRule;\n\n    ruleset.originalRuleset = this;\n    ruleset.root = this.root;\n    ruleset.firstRoot = this.firstRoot;\n    ruleset.allowImports = this.allowImports;\n\n    if (this.debugInfo) {\n        ruleset.debugInfo = this.debugInfo;\n    }\n\n    if (!hasOnePassingSelector) {\n        rules.length = 0;\n    }\n\n    // inherit a function registry from the frames stack when possible;\n    // otherwise from the global registry\n    ruleset.functionRegistry = (function (frames) {\n        var i = 0,\n            n = frames.length,\n            found;\n        for ( ; i !== n ; ++i ) {\n            found = frames[ i ].functionRegistry;\n            if ( found ) { return found; }\n        }\n        return globalFunctionRegistry;\n    }(context.frames)).inherit();\n\n    // push the current ruleset to the frames stack\n    var ctxFrames = context.frames;\n    ctxFrames.unshift(ruleset);\n\n    // currrent selectors\n    var ctxSelectors = context.selectors;\n    if (!ctxSelectors) {\n        context.selectors = ctxSelectors = [];\n    }\n    ctxSelectors.unshift(this.selectors);\n\n    // Evaluate imports\n    if (ruleset.root || ruleset.allowImports || !ruleset.strictImports) {\n        ruleset.evalImports(context);\n    }\n\n    // Store the frames around mixin definitions,\n    // so they can be evaluated like closures when the time comes.\n    var rsRules = ruleset.rules, rsRuleCnt = rsRules ? rsRules.length : 0;\n    for (i = 0; i < rsRuleCnt; i++) {\n        if (rsRules[i].evalFirst) {\n            rsRules[i] = rsRules[i].eval(context);\n        }\n    }\n\n    var mediaBlockCount = (context.mediaBlocks && context.mediaBlocks.length) || 0;\n\n    // Evaluate mixin calls.\n    for (i = 0; i < rsRuleCnt; i++) {\n        if (rsRules[i].type === \"MixinCall\") {\n            /*jshint loopfunc:true */\n            rules = rsRules[i].eval(context).filter(function(r) {\n                if ((r instanceof Rule) && r.variable) {\n                    // do not pollute the scope if the variable is\n                    // already there. consider returning false here\n                    // but we need a way to \"return\" variable from mixins\n                    return !(ruleset.variable(r.name));\n                }\n                return true;\n            });\n            rsRules.splice.apply(rsRules, [i, 1].concat(rules));\n            rsRuleCnt += rules.length - 1;\n            i += rules.length - 1;\n            ruleset.resetCache();\n        } else if (rsRules[i].type === \"RulesetCall\") {\n            /*jshint loopfunc:true */\n            rules = rsRules[i].eval(context).rules.filter(function(r) {\n                if ((r instanceof Rule) && r.variable) {\n                    // do not pollute the scope at all\n                    return false;\n                }\n                return true;\n            });\n            rsRules.splice.apply(rsRules, [i, 1].concat(rules));\n            rsRuleCnt += rules.length - 1;\n            i += rules.length - 1;\n            ruleset.resetCache();\n        }\n    }\n\n    // Evaluate everything else\n    for (i = 0; i < rsRules.length; i++) {\n        rule = rsRules[i];\n        if (!rule.evalFirst) {\n            rsRules[i] = rule = rule.eval ? rule.eval(context) : rule;\n        }\n    }\n\n    // Evaluate everything else\n    for (i = 0; i < rsRules.length; i++) {\n        rule = rsRules[i];\n        // for rulesets, check if it is a css guard and can be removed\n        if (rule instanceof Ruleset && rule.selectors && rule.selectors.length === 1) {\n            // check if it can be folded in (e.g. & where)\n            if (rule.selectors[0].isJustParentSelector()) {\n                rsRules.splice(i--, 1);\n\n                for (var j = 0; j < rule.rules.length; j++) {\n                    subRule = rule.rules[j];\n                    subRule.copyVisibilityInfo(rule.visibilityInfo());\n                    if (!(subRule instanceof Rule) || !subRule.variable) {\n                        rsRules.splice(++i, 0, subRule);\n                    }\n                }\n            }\n        }\n    }\n\n    // Pop the stack\n    ctxFrames.shift();\n    ctxSelectors.shift();\n\n    if (context.mediaBlocks) {\n        for (i = mediaBlockCount; i < context.mediaBlocks.length; i++) {\n            context.mediaBlocks[i].bubbleSelectors(selectors);\n        }\n    }\n\n    return ruleset;\n};\nRuleset.prototype.evalImports = function(context) {\n    var rules = this.rules, i, importRules;\n    if (!rules) { return; }\n\n    for (i = 0; i < rules.length; i++) {\n        if (rules[i].type === \"Import\") {\n            importRules = rules[i].eval(context);\n            if (importRules && (importRules.length || importRules.length === 0)) {\n                rules.splice.apply(rules, [i, 1].concat(importRules));\n                i+= importRules.length - 1;\n            } else {\n                rules.splice(i, 1, importRules);\n            }\n            this.resetCache();\n        }\n    }\n};\nRuleset.prototype.makeImportant = function() {\n    var result = new Ruleset(this.selectors, this.rules.map(function (r) {\n        if (r.makeImportant) {\n            return r.makeImportant();\n        } else {\n            return r;\n        }\n    }), this.strictImports, this.visibilityInfo());\n\n    return result;\n};\nRuleset.prototype.matchArgs = function (args) {\n    return !args || args.length === 0;\n};\n// lets you call a css selector with a guard\nRuleset.prototype.matchCondition = function (args, context) {\n    var lastSelector = this.selectors[this.selectors.length - 1];\n    if (!lastSelector.evaldCondition) {\n        return false;\n    }\n    if (lastSelector.condition &&\n        !lastSelector.condition.eval(\n            new contexts.Eval(context,\n                context.frames))) {\n        return false;\n    }\n    return true;\n};\nRuleset.prototype.resetCache = function () {\n    this._rulesets = null;\n    this._variables = null;\n    this._lookups = {};\n};\nRuleset.prototype.variables = function () {\n    if (!this._variables) {\n        this._variables = !this.rules ? {} : this.rules.reduce(function (hash, r) {\n            if (r instanceof Rule && r.variable === true) {\n                hash[r.name] = r;\n            }\n            // when evaluating variables in an import statement, imports have not been eval'd\n            // so we need to go inside import statements.\n            // guard against root being a string (in the case of inlined less)\n            if (r.type === \"Import\" && r.root && r.root.variables) {\n                var vars = r.root.variables();\n                for (var name in vars) {\n                    if (vars.hasOwnProperty(name)) {\n                        hash[name] = vars[name];\n                    }\n                }\n            }\n            return hash;\n        }, {});\n    }\n    return this._variables;\n};\nRuleset.prototype.variable = function (name) {\n    return this.variables()[name];\n};\nRuleset.prototype.rulesets = function () {\n    if (!this.rules) { return []; }\n\n    var filtRules = [], rules = this.rules, cnt = rules.length,\n        i, rule;\n\n    for (i = 0; i < cnt; i++) {\n        rule = rules[i];\n        if (rule.isRuleset) {\n            filtRules.push(rule);\n        }\n    }\n\n    return filtRules;\n};\nRuleset.prototype.prependRule = function (rule) {\n    var rules = this.rules;\n    if (rules) {\n        rules.unshift(rule);\n    } else {\n        this.rules = [ rule ];\n    }\n};\nRuleset.prototype.find = function (selector, self, filter) {\n    self = self || this;\n    var rules = [], match, foundMixins,\n        key = selector.toCSS();\n\n    if (key in this._lookups) { return this._lookups[key]; }\n\n    this.rulesets().forEach(function (rule) {\n        if (rule !== self) {\n            for (var j = 0; j < rule.selectors.length; j++) {\n                match = selector.match(rule.selectors[j]);\n                if (match) {\n                    if (selector.elements.length > match) {\n                        if (!filter || filter(rule)) {\n                            foundMixins = rule.find(new Selector(selector.elements.slice(match)), self, filter);\n                            for (var i = 0; i < foundMixins.length; ++i) {\n                                foundMixins[i].path.push(rule);\n                            }\n                            Array.prototype.push.apply(rules, foundMixins);\n                        }\n                    } else {\n                        rules.push({ rule: rule, path: []});\n                    }\n                    break;\n                }\n            }\n        }\n    });\n    this._lookups[key] = rules;\n    return rules;\n};\nRuleset.prototype.genCSS = function (context, output) {\n    var i, j,\n        charsetRuleNodes = [],\n        ruleNodes = [],\n        debugInfo,     // Line number debugging\n        rule,\n        path;\n\n    context.tabLevel = (context.tabLevel || 0);\n\n    if (!this.root) {\n        context.tabLevel++;\n    }\n\n    var tabRuleStr = context.compress ? '' : Array(context.tabLevel + 1).join(\"  \"),\n        tabSetStr = context.compress ? '' : Array(context.tabLevel).join(\"  \"),\n        sep;\n\n    function isRulesetLikeNode(rule) {\n        // if it has nested rules, then it should be treated like a ruleset\n        // medias and comments do not have nested rules, but should be treated like rulesets anyway\n        // some directives and anonymous nodes are ruleset like, others are not\n        if (typeof rule.isRulesetLike === \"boolean\") {\n            return rule.isRulesetLike;\n        } else if (typeof rule.isRulesetLike === \"function\") {\n            return rule.isRulesetLike();\n        }\n\n        //anything else is assumed to be a rule\n        return false;\n    }\n\n    var charsetNodeIndex = 0;\n    var importNodeIndex = 0;\n    for (i = 0; i < this.rules.length; i++) {\n        rule = this.rules[i];\n        if (rule.type === \"Comment\") {\n            if (importNodeIndex === i) {\n                importNodeIndex++;\n            }\n            ruleNodes.push(rule);\n        } else if (rule.isCharset && rule.isCharset()) {\n            ruleNodes.splice(charsetNodeIndex, 0, rule);\n            charsetNodeIndex++;\n            importNodeIndex++;\n        } else if (rule.type === \"Import\") {\n            ruleNodes.splice(importNodeIndex, 0, rule);\n            importNodeIndex++;\n        } else {\n            ruleNodes.push(rule);\n        }\n    }\n    ruleNodes = charsetRuleNodes.concat(ruleNodes);\n\n    // If this is the root node, we don't render\n    // a selector, or {}.\n    if (!this.root) {\n        debugInfo = getDebugInfo(context, this, tabSetStr);\n\n        if (debugInfo) {\n            output.add(debugInfo);\n            output.add(tabSetStr);\n        }\n\n        var paths = this.paths, pathCnt = paths.length,\n            pathSubCnt;\n\n        sep = context.compress ? ',' : (',\\n' + tabSetStr);\n\n        for (i = 0; i < pathCnt; i++) {\n            path = paths[i];\n            if (!(pathSubCnt = path.length)) { continue; }\n            if (i > 0) { output.add(sep); }\n\n            context.firstSelector = true;\n            path[0].genCSS(context, output);\n\n            context.firstSelector = false;\n            for (j = 1; j < pathSubCnt; j++) {\n                path[j].genCSS(context, output);\n            }\n        }\n\n        output.add((context.compress ? '{' : ' {\\n') + tabRuleStr);\n    }\n\n    // Compile rules and rulesets\n    for (i = 0; i < ruleNodes.length; i++) {\n        rule = ruleNodes[i];\n\n        if (i + 1 === ruleNodes.length) {\n            context.lastRule = true;\n        }\n\n        var currentLastRule = context.lastRule;\n        if (isRulesetLikeNode(rule)) {\n            context.lastRule = false;\n        }\n\n        if (rule.genCSS) {\n            rule.genCSS(context, output);\n        } else if (rule.value) {\n            output.add(rule.value.toString());\n        }\n\n        context.lastRule = currentLastRule;\n\n        if (!context.lastRule) {\n            output.add(context.compress ? '' : ('\\n' + tabRuleStr));\n        } else {\n            context.lastRule = false;\n        }\n    }\n\n    if (!this.root) {\n        output.add((context.compress ? '}' : '\\n' + tabSetStr + '}'));\n        context.tabLevel--;\n    }\n\n    if (!output.isEmpty() && !context.compress && this.firstRoot) {\n        output.add('\\n');\n    }\n};\n\nRuleset.prototype.joinSelectors = function (paths, context, selectors) {\n    for (var s = 0; s < selectors.length; s++) {\n        this.joinSelector(paths, context, selectors[s]);\n    }\n};\n\nRuleset.prototype.joinSelector = function (paths, context, selector) {\n\n    function createParenthesis(elementsToPak, originalElement) {\n        var replacementParen, j;\n        if (elementsToPak.length === 0) {\n            replacementParen = new Paren(elementsToPak[0]);\n        } else {\n            var insideParent = [];\n            for (j = 0; j < elementsToPak.length; j++) {\n                insideParent.push(new Element(null, elementsToPak[j], originalElement.index, originalElement.currentFileInfo));\n            }\n            replacementParen = new Paren(new Selector(insideParent));\n        }\n        return replacementParen;\n    }\n\n    function createSelector(containedElement, originalElement) {\n        var element, selector;\n        element = new Element(null, containedElement, originalElement.index, originalElement.currentFileInfo);\n        selector = new Selector([element]);\n        return selector;\n    }\n\n    // joins selector path from `beginningPath` with selector path in `addPath`\n    // `replacedElement` contains element that is being replaced by `addPath`\n    // returns concatenated path\n    function addReplacementIntoPath(beginningPath, addPath, replacedElement, originalSelector) {\n        var newSelectorPath, lastSelector, newJoinedSelector;\n        // our new selector path\n        newSelectorPath = [];\n\n        //construct the joined selector - if & is the first thing this will be empty,\n        // if not newJoinedSelector will be the last set of elements in the selector\n        if (beginningPath.length > 0) {\n            newSelectorPath = beginningPath.slice(0);\n            lastSelector = newSelectorPath.pop();\n            newJoinedSelector = originalSelector.createDerived(lastSelector.elements.slice(0));\n        }\n        else {\n            newJoinedSelector = originalSelector.createDerived([]);\n        }\n\n        if (addPath.length > 0) {\n            // /deep/ is a combinator that is valid without anything in front of it\n            // so if the & does not have a combinator that is \"\" or \" \" then\n            // and there is a combinator on the parent, then grab that.\n            // this also allows + a { & .b { .a & { ... though not sure why you would want to do that\n            var combinator = replacedElement.combinator, parentEl = addPath[0].elements[0];\n            if (combinator.emptyOrWhitespace && !parentEl.combinator.emptyOrWhitespace) {\n                combinator = parentEl.combinator;\n            }\n            // join the elements so far with the first part of the parent\n            newJoinedSelector.elements.push(new Element(combinator, parentEl.value, replacedElement.index, replacedElement.currentFileInfo));\n            newJoinedSelector.elements = newJoinedSelector.elements.concat(addPath[0].elements.slice(1));\n        }\n\n        // now add the joined selector - but only if it is not empty\n        if (newJoinedSelector.elements.length !== 0) {\n            newSelectorPath.push(newJoinedSelector);\n        }\n\n        //put together the parent selectors after the join (e.g. the rest of the parent)\n        if (addPath.length > 1) {\n            var restOfPath = addPath.slice(1);\n            restOfPath = restOfPath.map(function (selector) {\n                return selector.createDerived(selector.elements, []);\n            });\n            newSelectorPath = newSelectorPath.concat(restOfPath);\n        }\n        return newSelectorPath;\n    }\n\n    // joins selector path from `beginningPath` with every selector path in `addPaths` array\n    // `replacedElement` contains element that is being replaced by `addPath`\n    // returns array with all concatenated paths\n    function addAllReplacementsIntoPath( beginningPath, addPaths, replacedElement, originalSelector, result) {\n        var j;\n        for (j = 0; j < beginningPath.length; j++) {\n            var newSelectorPath = addReplacementIntoPath(beginningPath[j], addPaths, replacedElement, originalSelector);\n            result.push(newSelectorPath);\n        }\n        return result;\n    }\n\n    function mergeElementsOnToSelectors(elements, selectors) {\n        var i, sel;\n\n        if (elements.length === 0) {\n            return ;\n        }\n        if (selectors.length === 0) {\n            selectors.push([ new Selector(elements) ]);\n            return;\n        }\n\n        for (i = 0; i < selectors.length; i++) {\n            sel = selectors[i];\n\n            // if the previous thing in sel is a parent this needs to join on to it\n            if (sel.length > 0) {\n                sel[sel.length - 1] = sel[sel.length - 1].createDerived(sel[sel.length - 1].elements.concat(elements));\n            }\n            else {\n                sel.push(new Selector(elements));\n            }\n        }\n    }\n\n    // replace all parent selectors inside `inSelector` by content of `context` array\n    // resulting selectors are returned inside `paths` array\n    // returns true if `inSelector` contained at least one parent selector\n    function replaceParentSelector(paths, context, inSelector) {\n        // The paths are [[Selector]]\n        // The first list is a list of comma separated selectors\n        // The inner list is a list of inheritance separated selectors\n        // e.g.\n        // .a, .b {\n        //   .c {\n        //   }\n        // }\n        // == [[.a] [.c]] [[.b] [.c]]\n        //\n        var i, j, k, currentElements, newSelectors, selectorsMultiplied, sel, el, hadParentSelector = false, length, lastSelector;\n        function findNestedSelector(element) {\n            var maybeSelector;\n            if (element.value.type !== 'Paren') {\n                return null;\n            }\n\n            maybeSelector = element.value.value;\n            if (maybeSelector.type !== 'Selector') {\n                return null;\n            }\n\n            return maybeSelector;\n        }\n\n        // the elements from the current selector so far\n        currentElements = [];\n        // the current list of new selectors to add to the path.\n        // We will build it up. We initiate it with one empty selector as we \"multiply\" the new selectors\n        // by the parents\n        newSelectors = [\n            []\n        ];\n\n        for (i = 0; i < inSelector.elements.length; i++) {\n            el = inSelector.elements[i];\n            // non parent reference elements just get added\n            if (el.value !== \"&\") {\n                var nestedSelector = findNestedSelector(el);\n                if (nestedSelector != null) {\n                    // merge the current list of non parent selector elements\n                    // on to the current list of selectors to add\n                    mergeElementsOnToSelectors(currentElements, newSelectors);\n\n                    var nestedPaths = [], replaced, replacedNewSelectors = [];\n                    replaced = replaceParentSelector(nestedPaths, context, nestedSelector);\n                    hadParentSelector = hadParentSelector || replaced;\n                    //the nestedPaths array should have only one member - replaceParentSelector does not multiply selectors\n                    for (k = 0; k < nestedPaths.length; k++) {\n                        var replacementSelector = createSelector(createParenthesis(nestedPaths[k], el), el);\n                        addAllReplacementsIntoPath(newSelectors, [replacementSelector], el, inSelector, replacedNewSelectors);\n                    }\n                    newSelectors = replacedNewSelectors;\n                    currentElements = [];\n\n                } else {\n                    currentElements.push(el);\n                }\n\n            } else {\n                hadParentSelector = true;\n                // the new list of selectors to add\n                selectorsMultiplied = [];\n\n                // merge the current list of non parent selector elements\n                // on to the current list of selectors to add\n                mergeElementsOnToSelectors(currentElements, newSelectors);\n\n                // loop through our current selectors\n                for (j = 0; j < newSelectors.length; j++) {\n                    sel = newSelectors[j];\n                    // if we don't have any parent paths, the & might be in a mixin so that it can be used\n                    // whether there are parents or not\n                    if (context.length === 0) {\n                        // the combinator used on el should now be applied to the next element instead so that\n                        // it is not lost\n                        if (sel.length > 0) {\n                            sel[0].elements.push(new Element(el.combinator, '', el.index, el.currentFileInfo));\n                        }\n                        selectorsMultiplied.push(sel);\n                    }\n                    else {\n                        // and the parent selectors\n                        for (k = 0; k < context.length; k++) {\n                            // We need to put the current selectors\n                            // then join the last selector's elements on to the parents selectors\n                            var newSelectorPath = addReplacementIntoPath(sel, context[k], el, inSelector);\n                            // add that to our new set of selectors\n                            selectorsMultiplied.push(newSelectorPath);\n                        }\n                    }\n                }\n\n                // our new selectors has been multiplied, so reset the state\n                newSelectors = selectorsMultiplied;\n                currentElements = [];\n            }\n        }\n\n        // if we have any elements left over (e.g. .a& .b == .b)\n        // add them on to all the current selectors\n        mergeElementsOnToSelectors(currentElements, newSelectors);\n\n        for (i = 0; i < newSelectors.length; i++) {\n            length = newSelectors[i].length;\n            if (length > 0) {\n                paths.push(newSelectors[i]);\n                lastSelector = newSelectors[i][length - 1];\n                newSelectors[i][length - 1] = lastSelector.createDerived(lastSelector.elements, inSelector.extendList);\n                //newSelectors[i][length - 1].copyVisibilityInfo(inSelector.visibilityInfo());\n            }\n        }\n\n        return hadParentSelector;\n    }\n\n    function deriveSelector(visibilityInfo, deriveFrom) {\n        var newSelector = deriveFrom.createDerived(deriveFrom.elements, deriveFrom.extendList, deriveFrom.evaldCondition);\n        newSelector.copyVisibilityInfo(visibilityInfo);\n        return newSelector;\n    }\n\n    // joinSelector code follows\n    var i, newPaths, hadParentSelector;\n\n    newPaths = [];\n    hadParentSelector = replaceParentSelector(newPaths, context, selector);\n\n    if (!hadParentSelector) {\n        if (context.length > 0) {\n            newPaths = [];\n            for (i = 0; i < context.length; i++) {\n                //var concatenated = [];\n                //context[i].forEach(function(entry) {\n                //    var newEntry = entry.createDerived(entry.elements, entry.extendList, entry.evaldCondition);\n                //    newEntry.copyVisibilityInfo(selector.visibilityInfo());\n                //    concatenated.push(newEntry);\n                //}, this);\n                var concatenated = context[i].map(deriveSelector.bind(this, selector.visibilityInfo()));\n\n                concatenated.push(selector);\n                newPaths.push(concatenated);\n            }\n        }\n        else {\n            newPaths = [[selector]];\n        }\n    }\n\n    for (i = 0; i < newPaths.length; i++) {\n        paths.push(newPaths[i]);\n    }\n\n};\nmodule.exports = Ruleset;\n"]}