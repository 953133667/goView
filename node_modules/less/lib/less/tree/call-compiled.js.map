{"version":3,"sources":["call.js"],"names":[],"mappings":"AAAA,IAAI,OAAO,QAAQ,QAAR,CAAX;AAAA,IACI,iBAAiB,QAAQ,8BAAR,CADrB;AAEA;AACA;AACA;AACA,IAAI,OAAO,UAAU,IAAV,EAAgB,IAAhB,EAAsB,KAAtB,EAA6B,eAA7B,EAA8C;AACrD,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,eAAL,GAAuB,eAAvB;AACH,CALD;AAMA,KAAK,SAAL,GAAiB,IAAI,IAAJ,EAAjB;AACA,KAAK,SAAL,CAAe,IAAf,GAAsB,MAAtB;AACA,KAAK,SAAL,CAAe,MAAf,GAAwB,UAAU,OAAV,EAAmB;AACvC,QAAI,KAAK,IAAT,EAAe;AACX,aAAK,IAAL,GAAY,QAAQ,UAAR,CAAmB,KAAK,IAAxB,CAAZ;AACH;AACJ,CAJD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,SAAL,CAAe,IAAf,GAAsB,UAAU,OAAV,EAAmB;AACrC,QAAI,OAAO,KAAK,IAAL,CAAU,GAAV,CAAc,UAAU,CAAV,EAAa;AAAE,eAAO,EAAE,IAAF,CAAO,OAAP,CAAP;AAAyB,KAAtD,CAAX;AAAA,QACI,MADJ;AAAA,QACY,aAAa,IAAI,cAAJ,CAAmB,KAAK,IAAxB,EAA8B,OAA9B,EAAuC,KAAK,KAA5C,EAAmD,KAAK,eAAxD,CADzB;;AAGA,QAAI,WAAW,OAAX,EAAJ,EAA0B;AACtB,YAAI;AACA,qBAAS,WAAW,IAAX,CAAgB,IAAhB,CAAT;AACH,SAFD,CAEE,OAAO,CAAP,EAAU;AACR,kBAAM,EAAE,MAAM,EAAE,IAAF,IAAU,SAAlB;AACE,yBAAS,gCAAgC,KAAK,IAArC,GAA4C,GAA5C,IACC,EAAE,OAAF,GAAY,OAAO,EAAE,OAArB,GAA+B,EADhC,CADX;AAGE,uBAAO,KAAK,KAHd,EAGqB,UAAU,KAAK,eAAL,CAAqB,QAHpD,EAAN;AAIH;;AAED,YAAI,UAAU,IAAd,EAAoB;AAChB,mBAAO,KAAP,GAAe,KAAK,KAApB;AACA,mBAAO,eAAP,GAAyB,KAAK,eAA9B;AACA,mBAAO,MAAP;AACH;AACJ;;AAED,WAAO,IAAI,IAAJ,CAAS,KAAK,IAAd,EAAoB,IAApB,EAA0B,KAAK,KAA/B,EAAsC,KAAK,eAA3C,CAAP;AACH,CAtBD;AAuBA,KAAK,SAAL,CAAe,MAAf,GAAwB,UAAU,OAAV,EAAmB,MAAnB,EAA2B;AAC/C,WAAO,GAAP,CAAW,KAAK,IAAL,GAAY,GAAvB,EAA4B,KAAK,eAAjC,EAAkD,KAAK,KAAvD;;AAEA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,IAAL,CAAU,MAA9B,EAAsC,GAAtC,EAA2C;AACvC,aAAK,IAAL,CAAU,CAAV,EAAa,MAAb,CAAoB,OAApB,EAA6B,MAA7B;AACA,YAAI,IAAI,CAAJ,GAAQ,KAAK,IAAL,CAAU,MAAtB,EAA8B;AAC1B,mBAAO,GAAP,CAAW,IAAX;AACH;AACJ;;AAED,WAAO,GAAP,CAAW,GAAX;AACH,CAXD;AAYA,OAAO,OAAP,GAAiB,IAAjB","file":"call-compiled.js","sourcesContent":["var Node = require(\"./node\"),\n    FunctionCaller = require(\"../functions/function-caller\");\n//\n// A function call node.\n//\nvar Call = function (name, args, index, currentFileInfo) {\n    this.name = name;\n    this.args = args;\n    this.index = index;\n    this.currentFileInfo = currentFileInfo;\n};\nCall.prototype = new Node();\nCall.prototype.type = \"Call\";\nCall.prototype.accept = function (visitor) {\n    if (this.args) {\n        this.args = visitor.visitArray(this.args);\n    }\n};\n//\n// When evaluating a function call,\n// we either find the function in the functionRegistry,\n// in which case we call it, passing the  evaluated arguments,\n// if this returns null or we cannot find the function, we\n// simply print it out as it appeared originally [2].\n//\n// The reason why we evaluate the arguments, is in the case where\n// we try to pass a variable to a function, like: `saturate(@color)`.\n// The function should receive the value, not the variable.\n//\nCall.prototype.eval = function (context) {\n    var args = this.args.map(function (a) { return a.eval(context); }),\n        result, funcCaller = new FunctionCaller(this.name, context, this.index, this.currentFileInfo);\n\n    if (funcCaller.isValid()) {\n        try {\n            result = funcCaller.call(args);\n        } catch (e) {\n            throw { type: e.type || \"Runtime\",\n                    message: \"error evaluating function `\" + this.name + \"`\" +\n                             (e.message ? ': ' + e.message : ''),\n                    index: this.index, filename: this.currentFileInfo.filename };\n        }\n\n        if (result != null) {\n            result.index = this.index;\n            result.currentFileInfo = this.currentFileInfo;\n            return result;\n        }\n    }\n\n    return new Call(this.name, args, this.index, this.currentFileInfo);\n};\nCall.prototype.genCSS = function (context, output) {\n    output.add(this.name + \"(\", this.currentFileInfo, this.index);\n\n    for (var i = 0; i < this.args.length; i++) {\n        this.args[i].genCSS(context, output);\n        if (i + 1 < this.args.length) {\n            output.add(\", \");\n        }\n    }\n\n    output.add(\")\");\n};\nmodule.exports = Call;\n"]}