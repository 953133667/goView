{"version":3,"sources":["punycode.js"],"names":[],"mappings":"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","file":"punycode-compiled.js","sourcesContent":["/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n"]}