{"version":3,"sources":["watcherManager.js"],"names":[],"mappings":"AAAA;;;;AAIA,IAAI,OAAO,QAAQ,MAAR,CAAX;;AAEA,SAAS,cAAT,GAA0B;AACzB,MAAK,iBAAL,GAAyB,EAAzB;AACA;;AAED,eAAe,SAAf,CAAyB,mBAAzB,GAA+C,UAAS,SAAT,EAAoB,OAApB,EAA6B;AAC3E,KAAI,mBAAmB,QAAQ,oBAAR,CAAvB;AACA,WAAU,WAAW,EAArB;AACA,KAAI,MAAM,YAAY,GAAZ,GAAkB,KAAK,SAAL,CAAe,OAAf,CAA5B;AACA,KAAG,CAAC,KAAK,iBAAL,CAAuB,GAAvB,CAAJ,EAAiC;AAChC,OAAK,iBAAL,CAAuB,GAAvB,IAA8B,IAAI,gBAAJ,CAAqB,SAArB,EAAgC,OAAhC,CAA9B;AACA,OAAK,iBAAL,CAAuB,GAAvB,EAA4B,EAA5B,CAA+B,QAA/B,EAAyC,YAAW;AACnD,UAAO,KAAK,iBAAL,CAAuB,GAAvB,CAAP;AACA,GAFwC,CAEvC,IAFuC,CAElC,IAFkC,CAAzC;AAGA;AACD,QAAO,KAAK,iBAAL,CAAuB,GAAvB,CAAP;AACA,CAXD;;AAaA,eAAe,SAAf,CAAyB,SAAzB,GAAqC,SAAS,SAAT,CAAmB,CAAnB,EAAsB,OAAtB,EAA+B,SAA/B,EAA0C;AAC9E,KAAI,YAAY,KAAK,OAAL,CAAa,CAAb,CAAhB;AACA,QAAO,KAAK,mBAAL,CAAyB,SAAzB,EAAoC,OAApC,EAA6C,KAA7C,CAAmD,CAAnD,EAAsD,SAAtD,CAAP;AACA,CAHD;;AAKA,eAAe,SAAf,CAAyB,cAAzB,GAA0C,SAAS,cAAT,CAAwB,SAAxB,EAAmC,OAAnC,EAA4C,SAA5C,EAAuD;AAChG,QAAO,KAAK,mBAAL,CAAyB,SAAzB,EAAoC,OAApC,EAA6C,KAA7C,CAAmD,SAAnD,EAA8D,SAA9D,CAAP;AACA,CAFD;;AAIA,OAAO,OAAP,GAAiB,IAAI,cAAJ,EAAjB","file":"watcherManager-compiled.js","sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nvar path = require(\"path\");\r\n\r\nfunction WatcherManager() {\r\n\tthis.directoryWatchers = {};\r\n}\r\n\r\nWatcherManager.prototype.getDirectoryWatcher = function(directory, options) {\r\n\tvar DirectoryWatcher = require(\"./DirectoryWatcher\");\r\n\toptions = options || {};\r\n\tvar key = directory + \" \" + JSON.stringify(options);\r\n\tif(!this.directoryWatchers[key]) {\r\n\t\tthis.directoryWatchers[key] = new DirectoryWatcher(directory, options);\r\n\t\tthis.directoryWatchers[key].on(\"closed\", function() {\r\n\t\t\tdelete this.directoryWatchers[key];\r\n\t\t}.bind(this));\r\n\t}\r\n\treturn this.directoryWatchers[key];\r\n};\r\n\r\nWatcherManager.prototype.watchFile = function watchFile(p, options, startTime) {\r\n\tvar directory = path.dirname(p);\r\n\treturn this.getDirectoryWatcher(directory, options).watch(p, startTime);\r\n};\r\n\r\nWatcherManager.prototype.watchDirectory = function watchDirectory(directory, options, startTime) {\r\n\treturn this.getDirectoryWatcher(directory, options).watch(directory, startTime);\r\n};\r\n\r\nmodule.exports = new WatcherManager();\r\n"]}