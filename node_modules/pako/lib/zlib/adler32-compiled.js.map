{"version":3,"sources":["adler32.js"],"names":[],"mappings":"AAAA;;AAEA;AACA;AACA;;AAEA,SAAS,OAAT,CAAiB,KAAjB,EAAwB,GAAxB,EAA6B,GAA7B,EAAkC,GAAlC,EAAuC;AACrC,MAAI,KAAM,QAAQ,MAAT,GAAkB,CAA3B;AAAA,MACI,KAAO,UAAU,EAAX,GAAiB,MAAlB,GAA2B,CADpC;AAAA,MAEI,IAAI,CAFR;;AAIA,SAAO,QAAQ,CAAf,EAAkB;AAChB;AACA;AACA;AACA,QAAI,MAAM,IAAN,GAAa,IAAb,GAAoB,GAAxB;AACA,WAAO,CAAP;;AAEA,OAAG;AACD,WAAM,KAAK,IAAI,KAAJ,CAAN,GAAmB,CAAxB;AACA,WAAM,KAAK,EAAN,GAAW,CAAhB;AACD,KAHD,QAGS,EAAE,CAHX;;AAKA,UAAM,KAAN;AACA,UAAM,KAAN;AACD;;AAED,SAAQ,KAAM,MAAM,EAAb,GAAmB,CAA1B;AACD;;AAGD,OAAO,OAAP,GAAiB,OAAjB","file":"adler32-compiled.js","sourcesContent":["'use strict';\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It doesn't worth to make additional optimizationa as in original.\n// Small size is preferable.\n\nfunction adler32(adler, buf, len, pos) {\n  var s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n}\n\n\nmodule.exports = adler32;\n"]}