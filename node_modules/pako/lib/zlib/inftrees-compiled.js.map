{"version":3,"sources":["inftrees.js"],"names":[],"mappings":"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","file":"inftrees-compiled.js","sourcesContent":["'use strict';\n\n\nvar utils = require('../utils/common');\n\nvar MAXBITS = 15;\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\nvar lbase = [ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n];\n\nvar lext = [ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n];\n\nvar dbase = [ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n];\n\nvar dext = [ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n];\n\nmodule.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)\n{\n  var bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  var len = 0;               /* a code's length in bits */\n  var sym = 0;               /* index of code symbols */\n  var min = 0, max = 0;          /* minimum and maximum code lengths */\n  var root = 0;              /* number of index bits for root table */\n  var curr = 0;              /* number of index bits for current table */\n  var drop = 0;              /* code bits to drop for sub-table */\n  var left = 0;                   /* number of prefix codes available */\n  var used = 0;              /* code entries in table used */\n  var huff = 0;              /* Huffman code */\n  var incr;              /* for incrementing code, index */\n  var fill;              /* index for replicating entries */\n  var low;               /* low bits for current root entry */\n  var mask;              /* mask for low root bits */\n  var next;             /* next available space in table */\n  var base = null;     /* base value table to use */\n  var base_index = 0;\n//  var shoextra;    /* extra bits table to use */\n  var end;                    /* use base and extra for symbol > end */\n  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  var extra = null;\n  var extra_index = 0;\n\n  var here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES) {\n    base = extra = work;    /* dummy value--not used */\n    end = 19;\n\n  } else if (type === LENS) {\n    base = lbase;\n    base_index -= 257;\n    extra = lext;\n    extra_index -= 257;\n    end = 256;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    end = -1;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS && used > ENOUGH_LENS) ||\n    (type === DISTS && used > ENOUGH_DISTS)) {\n    return 1;\n  }\n\n  var i = 0;\n  /* process all codes and make table entries */\n  for (;;) {\n    i++;\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] < end) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] > end) {\n      here_op = extra[extra_index + work[sym]];\n      here_val = base[base_index + work[sym]];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n"]}