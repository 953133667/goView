{"version":3,"sources":["deflate.js"],"names":[],"mappings":"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","file":"deflate-compiled.js","sourcesContent":["'use strict';\n\nvar utils   = require('../utils/common');\nvar trees   = require('./trees');\nvar adler32 = require('./adler32');\nvar crc32   = require('./crc32');\nvar msg     = require('./messages');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\nvar Z_NO_FLUSH      = 0;\nvar Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\nvar Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\n//var Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\n//var Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\n//var Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n\n/* compression levels */\n//var Z_NO_COMPRESSION      = 0;\n//var Z_BEST_SPEED          = 1;\n//var Z_BEST_COMPRESSION    = 9;\nvar Z_DEFAULT_COMPRESSION = -1;\n\n\nvar Z_FILTERED            = 1;\nvar Z_HUFFMAN_ONLY        = 2;\nvar Z_RLE                 = 3;\nvar Z_FIXED               = 4;\nvar Z_DEFAULT_STRATEGY    = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\n//var Z_BINARY              = 0;\n//var Z_TEXT                = 1;\n//var Z_ASCII               = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n/*============================================================================*/\n\n\nvar MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_MEM_LEVEL = 8;\n\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nvar D_CODES       = 30;\n/* number of distance codes */\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nvar MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar MIN_MATCH = 3;\nvar MAX_MATCH = 258;\nvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nvar PRESET_DICT = 0x20;\n\nvar INIT_STATE = 42;\nvar EXTRA_STATE = 69;\nvar NAME_STATE = 73;\nvar COMMENT_STATE = 91;\nvar HCRC_STATE = 103;\nvar BUSY_STATE = 113;\nvar FINISH_STATE = 666;\n\nvar BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nvar BS_BLOCK_DONE     = 2; /* block flush performed */\nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nvar BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nfunction err(strm, errorCode) {\n  strm.msg = msg[errorCode];\n  return errorCode;\n}\n\nfunction rank(f) {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n}\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nfunction flush_pending(strm) {\n  var s = strm.state;\n\n  //_tr_flush_bits(s);\n  var len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n}\n\n\nfunction flush_block_only(s, last) {\n  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n}\n\n\nfunction put_byte(s, b) {\n  s.pending_buf[s.pending++] = b;\n}\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nfunction putShortMSB(s, b) {\n//  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n}\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nfunction read_buf(strm, buf, start, size) {\n  var len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  utils.arraySet(buf, strm.input, strm.next_in, len, start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n}\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nfunction longest_match(s, cur_match) {\n  var chain_length = s.max_chain_length;      /* max hash chain length */\n  var scan = s.strstart; /* current string */\n  var match;                       /* matched string */\n  var len;                           /* length of current match */\n  var best_len = s.prev_length;              /* best match length so far */\n  var nice_match = s.nice_match;             /* stop if match long enough */\n  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  var _win = s.window; // shortcut\n\n  var wmask = s.w_mask;\n  var prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  var strend = s.strstart + MAX_MATCH;\n  var scan_end1  = _win[scan + best_len - 1];\n  var scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n}\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nfunction fill_window(s) {\n  var _w_size = s.w_size;\n  var p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    var curr = s.strstart + s.lookahead;\n//    var init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n}\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nfunction deflate_stored(s, flush) {\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  var max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    var max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n}\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nfunction deflate_fast(s, flush) {\n  var hash_head;        /* head of the hash chain */\n  var bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nfunction deflate_slow(s, flush) {\n  var hash_head;          /* head of hash chain */\n  var bflush;              /* set if current block must be flushed */\n\n  var max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n}\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nfunction deflate_rle(s, flush) {\n  var bflush;            /* set if current block must be flushed */\n  var prev;              /* byte at distance one to match */\n  var scan, strend;      /* scan goes up to strend for length of run */\n\n  var _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nfunction deflate_huff(s, flush) {\n  var bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nvar configuration_table;\n\nconfiguration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nfunction lm_init(s) {\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n}\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);\n  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new utils.Buf16(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nfunction deflateResetKeep(strm) {\n  var s;\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH;\n  trees._tr_init(s);\n  return Z_OK;\n}\n\n\nfunction deflateReset(strm) {\n  var ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n}\n\n\nfunction deflateSetHeader(strm, head) {\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n  strm.state.gzhead = head;\n  return Z_OK;\n}\n\n\nfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  var wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  var s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new utils.Buf8(s.w_size * 2);\n  s.head = new utils.Buf16(s.hash_size);\n  s.prev = new utils.Buf16(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n\n  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\n  //s->pending_buf = (uchf *) overlay;\n  s.pending_buf = new utils.Buf8(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\n  s.d_buf = 1 * s.lit_bufsize;\n\n  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n}\n\nfunction deflateInit(strm, level) {\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n}\n\n\nfunction deflate(strm, flush) {\n  var old_flush, s;\n  var beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  s.strm = strm; /* just in case */\n  old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n                );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n      var level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        trees._tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        trees._tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n}\n\nfunction deflateEnd(strm) {\n  var status;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n}\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nfunction deflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var s;\n  var str, n;\n  var wrap;\n  var avail;\n  var next;\n  var input;\n  var tmpDict;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n  wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    tmpDict = new utils.Buf8(s.w_size);\n    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  avail = strm.avail_in;\n  next = strm.next_in;\n  input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    str = s.strstart;\n    n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n}\n\n\nexports.deflateInit = deflateInit;\nexports.deflateInit2 = deflateInit2;\nexports.deflateReset = deflateReset;\nexports.deflateResetKeep = deflateResetKeep;\nexports.deflateSetHeader = deflateSetHeader;\nexports.deflate = deflate;\nexports.deflateEnd = deflateEnd;\nexports.deflateSetDictionary = deflateSetDictionary;\nexports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nexports.deflateBound = deflateBound;\nexports.deflateCopy = deflateCopy;\nexports.deflateParams = deflateParams;\nexports.deflatePending = deflatePending;\nexports.deflatePrime = deflatePrime;\nexports.deflateTune = deflateTune;\n*/\n"]}