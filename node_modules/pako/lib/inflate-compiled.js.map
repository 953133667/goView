{"version":3,"sources":["inflate.js"],"names":[],"mappings":"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","file":"inflate-compiled.js","sourcesContent":["'use strict';\n\n\nvar zlib_inflate = require('./zlib/inflate');\nvar utils        = require('./utils/common');\nvar strings      = require('./utils/strings');\nvar c            = require('./zlib/constants');\nvar msg          = require('./zlib/messages');\nvar ZStream      = require('./zlib/zstream');\nvar GZheader     = require('./zlib/gzheader');\n\nvar toString = Object.prototype.toString;\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overriden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\n * push a chunk with explicit flush (call [[Inflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  if (!(this instanceof Inflate)) return new Inflate(options);\n\n  this.options = utils.assign({\n    chunkSize: 16384,\n    windowBits: 0,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== c.Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new GZheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n}\n\n/**\n * Inflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the decompression context.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var dictionary = this.options.dictionary;\n  var status, _mode;\n  var next_out_utf8, tail, utf8str;\n  var dict;\n\n  // Flag to properly process Z_BUF_ERROR on testing inflate call\n  // when we check that all output data was flushed.\n  var allowBufError = false;\n\n  if (this.ended) { return false; }\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // Only binary strings can be decompressed on practice\n    strm.input = strings.binstring2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */\n\n    if (status === c.Z_NEED_DICT && dictionary) {\n      // Convert data if needed\n      if (typeof dictionary === 'string') {\n        dict = strings.string2buf(dictionary);\n      } else if (toString.call(dictionary) === '[object ArrayBuffer]') {\n        dict = new Uint8Array(dictionary);\n      } else {\n        dict = dictionary;\n      }\n\n      status = zlib_inflate.inflateSetDictionary(this.strm, dict);\n\n    }\n\n    if (status === c.Z_BUF_ERROR && allowBufError === true) {\n      status = c.Z_OK;\n      allowBufError = false;\n    }\n\n    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {\n\n        if (this.options.to === 'string') {\n\n          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          tail = strm.next_out - next_out_utf8;\n          utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n        }\n      }\n    }\n\n    // When no more input data, we should check that internal inflate buffers\n    // are flushed. The only way to do it when avail_out = 0 - run one more\n    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.\n    // Here we set flag to process this error properly.\n    //\n    // NOTE. Deflate does not return error in this case and does not needs such\n    // logic.\n    if (strm.avail_in === 0 && strm.avail_out === 0) {\n      allowBufError = true;\n    }\n\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);\n\n  if (status === c.Z_STREAM_END) {\n    _mode = c.Z_FINISH;\n  }\n\n  // Finalize on the last chunk.\n  if (_mode === c.Z_FINISH) {\n    status = zlib_inflate.inflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === c.Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === c.Z_SYNC_FLUSH) {\n    this.onEnd(c.Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): ouput data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === c.Z_OK) {\n    if (this.options.to === 'string') {\n      // Glue & convert here, until we teach pako to send\n      // utf8 alligned strings to onData\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\n *   , output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  var inflator = new Inflate(options);\n\n  inflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) { throw inflator.msg; }\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nexports.Inflate = Inflate;\nexports.inflate = inflate;\nexports.inflateRaw = inflateRaw;\nexports.ungzip  = inflate;\n"]}