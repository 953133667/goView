{"version":3,"sources":["deflate.js"],"names":[],"mappings":"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","file":"deflate-compiled.js","sourcesContent":["'use strict';\n\n\nvar zlib_deflate = require('./zlib/deflate');\nvar utils        = require('./utils/common');\nvar strings      = require('./utils/strings');\nvar msg          = require('./zlib/messages');\nvar ZStream      = require('./zlib/zstream');\n\nvar toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nvar Z_NO_FLUSH      = 0;\nvar Z_FINISH        = 4;\n\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_SYNC_FLUSH    = 2;\n\nvar Z_DEFAULT_COMPRESSION = -1;\n\nvar Z_DEFAULT_STRATEGY    = 0;\n\nvar Z_DEFLATED  = 8;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overriden.\n **/\n\n/**\n * Deflate.result -> Uint8Array|Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\n * push a chunk with explicit flush (call [[Deflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate(options) {\n  if (!(this instanceof Deflate)) return new Deflate(options);\n\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    var dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK) {\n      throw new Error(msg[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the compression context.\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * array format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var status, _mode;\n\n  if (this.ended) { return false; }\n\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */\n\n    if (status !== Z_STREAM_END && status !== Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {\n      if (this.options.to === 'string') {\n        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\n      } else {\n        this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n      }\n    }\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\n\n  // Finalize on the last chunk.\n  if (_mode === Z_FINISH) {\n    status = zlib_deflate.deflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === Z_SYNC_FLUSH) {\n    this.onEnd(Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): ouput data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  var deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nexports.Deflate = Deflate;\nexports.deflate = deflate;\nexports.deflateRaw = deflateRaw;\nexports.gzip = gzip;\n"]}