{"version":3,"sources":["wrap.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,WAAW,QAAQ,UAAR,CAAf;;AAEA,IAAI,KAAK,QAAQ,IAAR,CAAT;AACA,IAAI,WAAW,GAAG,YAAH,CAAgB,YAAY,eAA5B,EAA6C,MAA7C,CAAf;;AAEA,QAAQ,MAAR,GAAiB,YAAY;AACzB,QAAI,QAAQ,SAAS,EAAT,EAAa,QAAb,EAAuB,KAAvB,CAA6B,IAA7B,CAAZ;AACA,QAAI,QAAQ,SAAS,KAAT,CAAe,KAAf,CAAZ;;AAEA,UAAM,OAAN,CAAc,UAAU,IAAV,EAAgB;AAC1B,eAAO,EAAP,CAAU,KAAK,MAAL,IAAe,EAAzB,EAA6B,mBAA7B;AACA,YAAI,SAAS,KAAK,KAAL,CAAW,IAAX,IAAmB,KAAK,KAAL,CAAW,KAAX,CAAnB,GAAuC,EAApD;AACA,eAAO,SAAP,CAAiB,MAAjB,EAAyB,MAAM,MAAN,CAAa,CAAb,EAAgB,OAAO,MAAvB,CAAzB;AACH,KAJD;AAKH,CATD;;AAWA,QAAQ,aAAR,GAAwB,YAAY;AAChC,QAAI,QAAQ,SAAS,EAAT,EAAa,GAAb,EAAkB,QAAlB,EAA4B,KAA5B,CAAkC,IAAlC,CAAZ;AACA,QAAI,QAAQ,SAAS,KAAT,CAAe,KAAf,CAAZ;;AAEA,UAAM,OAAN,CAAc,UAAU,IAAV,EAAgB;AAC1B,eAAO,EAAP,CAAU,KAAK,MAAL,IAAe,GAAzB,EAA8B,oBAA9B;AACA,YAAI,SAAS,KACR,KADQ,CACF,KADE,EAER,MAFQ,CAED,UAAU,CAAV,EAAa;AAAE,mBAAO,EAAE,KAAF,CAAQ,IAAR,CAAP;AAAsB,SAFpC,CAAb;AAIA,eAAO,SAAP,CAAiB,MAAjB,EAAyB,MAAM,MAAN,CAAa,CAAb,EAAgB,OAAO,MAAvB,CAAzB;AACA,eAAO,SAAP,CAAiB,KAAK,KAAL,CAAW,CAAX,EAAc,EAAd,CAAjB,EAAoC,IAAI,KAAJ,CAAU,KAAK,CAAf,EAAkB,IAAlB,CAAuB,GAAvB,CAApC;AACH,KARD;AASH,CAbD","file":"wrap-compiled.js","sourcesContent":["var assert = require('assert');\nvar wordwrap = require('wordwrap');\n\nvar fs = require('fs');\nvar idleness = fs.readFileSync(__dirname + '/idleness.txt', 'utf8');\n\nexports.stop80 = function () {\n    var lines = wordwrap(80)(idleness).split(/\\n/);\n    var words = idleness.split(/\\s+/);\n    \n    lines.forEach(function (line) {\n        assert.ok(line.length <= 80, 'line > 80 columns');\n        var chunks = line.match(/\\S/) ? line.split(/\\s+/) : [];\n        assert.deepEqual(chunks, words.splice(0, chunks.length));\n    });\n};\n\nexports.start20stop60 = function () {\n    var lines = wordwrap(20, 100)(idleness).split(/\\n/);\n    var words = idleness.split(/\\s+/);\n    \n    lines.forEach(function (line) {\n        assert.ok(line.length <= 100, 'line > 100 columns');\n        var chunks = line\n            .split(/\\s+/)\n            .filter(function (x) { return x.match(/\\S/) })\n        ;\n        assert.deepEqual(chunks, words.splice(0, chunks.length));\n        assert.deepEqual(line.slice(0, 20), new Array(20 + 1).join(' '));\n    });\n};\n"]}