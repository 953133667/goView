{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,OAAO,OAAP,GAAiB,UAAU,KAAV,EAAiB,IAAjB,EAAuB,MAAvB,EAA+B;AAC3D,QAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC3B,iBAAS,KAAT;AACA,gBAAQ,OAAO,KAAf;AACA,eAAO,OAAO,IAAd;AACH;;AAED,QAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AAC1B,iBAAS,IAAT;AACA,gBAAQ,SAAS,OAAO,KAAxB;AACA,eAAO,SAAP;AACH;;AAED,QAAI,CAAC,IAAL,EAAW;AACP,eAAO,KAAP;AACA,gBAAQ,CAAR;AACH;;AAED,QAAI,CAAC,MAAL,EAAa,SAAS,EAAT;AACb,QAAI,OAAO,OAAO,IAAP,IAAe,MAA1B;AACA,QAAI,KAAK,SAAS,MAAT,GAAkB,IAAlB,GAAyB,UAAlC;;AAEA,WAAO,UAAU,IAAV,EAAgB;AACnB,YAAI,SAAS,KAAK,QAAL,GACR,KADQ,CACF,EADE,EAER,MAFQ,CAED,UAAU,GAAV,EAAe,CAAf,EAAkB;AACtB,gBAAI,SAAS,MAAb,EAAqB;AACjB,qBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,EAAE,MAAtB,EAA8B,KAAK,OAAO,KAA1C,EAAiD;AAC7C,wBAAI,IAAJ,CAAS,EAAE,KAAF,CAAQ,CAAR,EAAW,IAAI,IAAJ,GAAW,KAAtB,CAAT;AACH;AACJ,aAJD,MAKK,IAAI,IAAJ,CAAS,CAAT;AACL,mBAAO,GAAP;AACH,SAVQ,EAUN,EAVM,CAAb;;AAaA,eAAO,OAAO,MAAP,CAAc,UAAU,KAAV,EAAiB,QAAjB,EAA2B;AAC5C,gBAAI,aAAa,EAAjB,EAAqB,OAAO,KAAP;;AAErB,gBAAI,QAAQ,SAAS,OAAT,CAAiB,KAAjB,EAAwB,MAAxB,CAAZ;;AAEA,gBAAI,IAAI,MAAM,MAAN,GAAe,CAAvB;AACA,gBAAI,MAAM,CAAN,EAAS,MAAT,GAAkB,MAAM,MAAxB,GAAiC,IAArC,EAA2C;AACvC,sBAAM,CAAN,IAAW,MAAM,CAAN,EAAS,OAAT,CAAiB,MAAjB,EAAyB,EAAzB,CAAX;;AAEA,sBAAM,KAAN,CAAY,IAAZ,EAAkB,OAAlB,CAA0B,UAAU,CAAV,EAAa;AACnC,0BAAM,IAAN,CACI,IAAI,KAAJ,CAAU,QAAQ,CAAlB,EAAqB,IAArB,CAA0B,GAA1B,IACE,EAAE,OAAF,CAAU,MAAV,EAAkB,EAAlB,CAFN;AAIH,iBALD;AAMH,aATD,MAUK,IAAI,MAAM,KAAN,CAAY,IAAZ,CAAJ,EAAuB;AACxB,oBAAI,KAAK,MAAM,KAAN,CAAY,IAAZ,CAAT;AACA,sBAAM,CAAN,KAAY,GAAG,KAAH,EAAZ;AACA,mBAAG,OAAH,CAAW,UAAU,CAAV,EAAa;AACpB,0BAAM,IAAN,CACI,IAAI,KAAJ,CAAU,QAAQ,CAAlB,EAAqB,IAArB,CAA0B,GAA1B,IACE,EAAE,OAAF,CAAU,MAAV,EAAkB,EAAlB,CAFN;AAIH,iBALD;AAMH,aATI,MAUA;AACD,sBAAM,CAAN,KAAY,KAAZ;AACH;;AAED,mBAAO,KAAP;AACH,SA/BM,EA+BJ,CAAE,IAAI,KAAJ,CAAU,QAAQ,CAAlB,EAAqB,IAArB,CAA0B,GAA1B,CAAF,CA/BI,EA+BgC,IA/BhC,CA+BqC,IA/BrC,CAAP;AAgCH,KA9CD;AA+CH,CArED;;AAuEA,SAAS,IAAT,GAAgB,QAAhB;;AAEA,SAAS,IAAT,GAAgB,UAAU,KAAV,EAAiB,IAAjB,EAAuB;AACnC,WAAO,SAAS,KAAT,EAAgB,IAAhB,EAAsB,EAAE,MAAO,MAAT,EAAtB,CAAP;AACH,CAFD","file":"index-compiled.js","sourcesContent":["var wordwrap = module.exports = function (start, stop, params) {\n    if (typeof start === 'object') {\n        params = start;\n        start = params.start;\n        stop = params.stop;\n    }\n    \n    if (typeof stop === 'object') {\n        params = stop;\n        start = start || params.start;\n        stop = undefined;\n    }\n    \n    if (!stop) {\n        stop = start;\n        start = 0;\n    }\n    \n    if (!params) params = {};\n    var mode = params.mode || 'soft';\n    var re = mode === 'hard' ? /\\b/ : /(\\S+\\s+)/;\n    \n    return function (text) {\n        var chunks = text.toString()\n            .split(re)\n            .reduce(function (acc, x) {\n                if (mode === 'hard') {\n                    for (var i = 0; i < x.length; i += stop - start) {\n                        acc.push(x.slice(i, i + stop - start));\n                    }\n                }\n                else acc.push(x)\n                return acc;\n            }, [])\n        ;\n        \n        return chunks.reduce(function (lines, rawChunk) {\n            if (rawChunk === '') return lines;\n            \n            var chunk = rawChunk.replace(/\\t/g, '    ');\n            \n            var i = lines.length - 1;\n            if (lines[i].length + chunk.length > stop) {\n                lines[i] = lines[i].replace(/\\s+$/, '');\n                \n                chunk.split(/\\n/).forEach(function (c) {\n                    lines.push(\n                        new Array(start + 1).join(' ')\n                        + c.replace(/^\\s+/, '')\n                    );\n                });\n            }\n            else if (chunk.match(/\\n/)) {\n                var xs = chunk.split(/\\n/);\n                lines[i] += xs.shift();\n                xs.forEach(function (c) {\n                    lines.push(\n                        new Array(start + 1).join(' ')\n                        + c.replace(/^\\s+/, '')\n                    );\n                });\n            }\n            else {\n                lines[i] += chunk;\n            }\n            \n            return lines;\n        }, [ new Array(start + 1).join(' ') ]).join('\\n');\n    };\n};\n\nwordwrap.soft = wordwrap;\n\nwordwrap.hard = function (start, stop) {\n    return wordwrap(start, stop, { mode : 'hard' });\n};\n"]}