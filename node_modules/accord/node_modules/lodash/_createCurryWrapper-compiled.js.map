{"version":3,"sources":["_createCurryWrapper.js"],"names":[],"mappings":"AAAA,IAAI,QAAQ,QAAQ,UAAR,CAAZ;AAAA,IACI,oBAAoB,QAAQ,sBAAR,CADxB;AAAA,IAEI,sBAAsB,QAAQ,wBAAR,CAF1B;AAAA,IAGI,uBAAuB,QAAQ,yBAAR,CAH3B;AAAA,IAII,iBAAiB,QAAQ,mBAAR,CAJrB;AAAA,IAKI,iBAAiB,QAAQ,mBAAR,CALrB;AAAA,IAMI,OAAO,QAAQ,SAAR,CANX;;AAQA;;;;;;;;;;AAUA,SAAS,kBAAT,CAA4B,IAA5B,EAAkC,OAAlC,EAA2C,KAA3C,EAAkD;AAChD,MAAI,OAAO,kBAAkB,IAAlB,CAAX;;AAEA,WAAS,OAAT,GAAmB;AACjB,QAAI,SAAS,UAAU,MAAvB;AAAA,QACI,OAAO,MAAM,MAAN,CADX;AAAA,QAEI,QAAQ,MAFZ;AAAA,QAGI,cAAc,eAAe,OAAf,CAHlB;;AAKA,WAAO,OAAP,EAAgB;AACd,WAAK,KAAL,IAAc,UAAU,KAAV,CAAd;AACD;AACD,QAAI,UAAW,SAAS,CAAT,IAAc,KAAK,CAAL,MAAY,WAA1B,IAAyC,KAAK,SAAS,CAAd,MAAqB,WAA/D,GACV,EADU,GAEV,eAAe,IAAf,EAAqB,WAArB,CAFJ;;AAIA,cAAU,QAAQ,MAAlB;AACA,QAAI,SAAS,KAAb,EAAoB;AAClB,aAAO,qBACL,IADK,EACC,OADD,EACU,mBADV,EAC+B,QAAQ,WADvC,EACoD,SADpD,EAEL,IAFK,EAEC,OAFD,EAEU,SAFV,EAEqB,SAFrB,EAEgC,QAAQ,MAFxC,CAAP;AAGD;AACD,QAAI,KAAM,QAAQ,SAAS,IAAjB,IAAyB,gBAAgB,OAA1C,GAAqD,IAArD,GAA4D,IAArE;AACA,WAAO,MAAM,EAAN,EAAU,IAAV,EAAgB,IAAhB,CAAP;AACD;AACD,SAAO,OAAP;AACD;;AAED,OAAO,OAAP,GAAiB,kBAAjB","file":"_createCurryWrapper-compiled.js","sourcesContent":["var apply = require('./_apply'),\n    createCtorWrapper = require('./_createCtorWrapper'),\n    createHybridWrapper = require('./_createHybridWrapper'),\n    createRecurryWrapper = require('./_createRecurryWrapper'),\n    getPlaceholder = require('./_getPlaceholder'),\n    replaceHolders = require('./_replaceHolders'),\n    root = require('./_root');\n\n/**\n * Creates a function that wraps `func` to enable currying.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`\n *  for more details.\n * @param {number} arity The arity of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createCurryWrapper(func, bitmask, arity) {\n  var Ctor = createCtorWrapper(func);\n\n  function wrapper() {\n    var length = arguments.length,\n        args = Array(length),\n        index = length,\n        placeholder = getPlaceholder(wrapper);\n\n    while (index--) {\n      args[index] = arguments[index];\n    }\n    var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n      ? []\n      : replaceHolders(args, placeholder);\n\n    length -= holders.length;\n    if (length < arity) {\n      return createRecurryWrapper(\n        func, bitmask, createHybridWrapper, wrapper.placeholder, undefined,\n        args, holders, undefined, undefined, arity - length);\n    }\n    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n    return apply(fn, this, args);\n  }\n  return wrapper;\n}\n\nmodule.exports = createCurryWrapper;\n"]}