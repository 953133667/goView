{"version":3,"sources":["cond.js"],"names":[],"mappings":"AAAA,IAAI,QAAQ,QAAQ,UAAR,CAAZ;AAAA,IACI,WAAW,QAAQ,aAAR,CADf;AAAA,IAEI,eAAe,QAAQ,iBAAR,CAFnB;AAAA,IAGI,OAAO,QAAQ,QAAR,CAHX;;AAKA;AACA,IAAI,kBAAkB,qBAAtB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,SAAS,IAAT,CAAc,KAAd,EAAqB;AACnB,MAAI,SAAS,QAAQ,MAAM,MAAd,GAAuB,CAApC;AAAA,MACI,aAAa,YADjB;;AAGA,UAAQ,CAAC,MAAD,GAAU,EAAV,GAAe,SAAS,KAAT,EAAgB,UAAS,IAAT,EAAe;AACpD,QAAI,OAAO,KAAK,CAAL,CAAP,IAAkB,UAAtB,EAAkC;AAChC,YAAM,IAAI,SAAJ,CAAc,eAAd,CAAN;AACD;AACD,WAAO,CAAC,WAAW,KAAK,CAAL,CAAX,CAAD,EAAsB,KAAK,CAAL,CAAtB,CAAP;AACD,GALsB,CAAvB;;AAOA,SAAO,KAAK,UAAS,IAAT,EAAe;AACzB,QAAI,QAAQ,CAAC,CAAb;AACA,WAAO,EAAE,KAAF,GAAU,MAAjB,EAAyB;AACvB,UAAI,OAAO,MAAM,KAAN,CAAX;AACA,UAAI,MAAM,KAAK,CAAL,CAAN,EAAe,IAAf,EAAqB,IAArB,CAAJ,EAAgC;AAC9B,eAAO,MAAM,KAAK,CAAL,CAAN,EAAe,IAAf,EAAqB,IAArB,CAAP;AACD;AACF;AACF,GARM,CAAP;AASD;;AAED,OAAO,OAAP,GAAiB,IAAjB","file":"cond-compiled.js","sourcesContent":["var apply = require('./_apply'),\n    arrayMap = require('./_arrayMap'),\n    baseIteratee = require('./_baseIteratee'),\n    rest = require('./rest');\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that iterates over `pairs` and invokes the corresponding\n * function of the first predicate to return truthy. The predicate-function\n * pairs are invoked with the `this` binding and arguments of the created\n * function.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Util\n * @param {Array} pairs The predicate-function pairs.\n * @returns {Function} Returns the new function.\n * @example\n *\n * var func = _.cond([\n *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n *   [_.constant(true),                _.constant('no match')]\n * ]);\n *\n * func({ 'a': 1, 'b': 2 });\n * // => 'matches A'\n *\n * func({ 'a': 0, 'b': 1 });\n * // => 'matches B'\n *\n * func({ 'a': '1', 'b': '2' });\n * // => 'no match'\n */\nfunction cond(pairs) {\n  var length = pairs ? pairs.length : 0,\n      toIteratee = baseIteratee;\n\n  pairs = !length ? [] : arrayMap(pairs, function(pair) {\n    if (typeof pair[1] != 'function') {\n      throw new TypeError(FUNC_ERROR_TEXT);\n    }\n    return [toIteratee(pair[0]), pair[1]];\n  });\n\n  return rest(function(args) {\n    var index = -1;\n    while (++index < length) {\n      var pair = pairs[index];\n      if (apply(pair[0], this, args)) {\n        return apply(pair[1], this, args);\n      }\n    }\n  });\n}\n\nmodule.exports = cond;\n"]}