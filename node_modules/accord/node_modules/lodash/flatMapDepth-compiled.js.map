{"version":3,"sources":["flatMapDepth.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,gBAAR,CAAlB;AAAA,IACI,MAAM,QAAQ,OAAR,CADV;AAAA,IAEI,YAAY,QAAQ,aAAR,CAFhB;;AAIA;;;;;;;;;;;;;;;;;;;;;;AAsBA,SAAS,YAAT,CAAsB,UAAtB,EAAkC,QAAlC,EAA4C,KAA5C,EAAmD;AACjD,UAAQ,UAAU,SAAV,GAAsB,CAAtB,GAA0B,UAAU,KAAV,CAAlC;AACA,SAAO,YAAY,IAAI,UAAJ,EAAgB,QAAhB,CAAZ,EAAuC,KAAvC,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,YAAjB","file":"flatMapDepth-compiled.js","sourcesContent":["var baseFlatten = require('./_baseFlatten'),\n    map = require('./map'),\n    toInteger = require('./toInteger');\n\n/**\n * This method is like `_.flatMap` except that it recursively flattens the\n * mapped results up to `depth` times.\n *\n * @static\n * @memberOf _\n * @since 4.7.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array|Function|Object|string} [iteratee=_.identity]\n *  The function invoked per iteration.\n * @param {number} [depth=1] The maximum recursion depth.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * function duplicate(n) {\n *   return [[[n, n]]];\n * }\n *\n * _.flatMapDepth([1, 2], duplicate, 2);\n * // => [[1, 1], [2, 2]]\n */\nfunction flatMapDepth(collection, iteratee, depth) {\n  depth = depth === undefined ? 1 : toInteger(depth);\n  return baseFlatten(map(collection, iteratee), depth);\n}\n\nmodule.exports = flatMapDepth;\n"]}