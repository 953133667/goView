{"version":3,"sources":["_createBaseWrapper.js"],"names":[],"mappings":"AAAA,IAAI,oBAAoB,QAAQ,sBAAR,CAAxB;AAAA,IACI,OAAO,QAAQ,SAAR,CADX;;AAGA;AACA,IAAI,YAAY,CAAhB;;AAEA;;;;;;;;;;;AAWA,SAAS,iBAAT,CAA2B,IAA3B,EAAiC,OAAjC,EAA0C,OAA1C,EAAmD;AACjD,MAAI,SAAS,UAAU,SAAvB;AAAA,MACI,OAAO,kBAAkB,IAAlB,CADX;;AAGA,WAAS,OAAT,GAAmB;AACjB,QAAI,KAAM,QAAQ,SAAS,IAAjB,IAAyB,gBAAgB,OAA1C,GAAqD,IAArD,GAA4D,IAArE;AACA,WAAO,GAAG,KAAH,CAAS,SAAS,OAAT,GAAmB,IAA5B,EAAkC,SAAlC,CAAP;AACD;AACD,SAAO,OAAP;AACD;;AAED,OAAO,OAAP,GAAiB,iBAAjB","file":"_createBaseWrapper-compiled.js","sourcesContent":["var createCtorWrapper = require('./_createCtorWrapper'),\n    root = require('./_root');\n\n/** Used to compose bitmasks for wrapper metadata. */\nvar BIND_FLAG = 1;\n\n/**\n * Creates a function that wraps `func` to invoke it with the optional `this`\n * binding of `thisArg`.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`\n *  for more details.\n * @param {*} [thisArg] The `this` binding of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createBaseWrapper(func, bitmask, thisArg) {\n  var isBind = bitmask & BIND_FLAG,\n      Ctor = createCtorWrapper(func);\n\n  function wrapper() {\n    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n    return fn.apply(isBind ? thisArg : this, arguments);\n  }\n  return wrapper;\n}\n\nmodule.exports = createBaseWrapper;\n"]}