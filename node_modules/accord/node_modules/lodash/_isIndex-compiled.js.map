{"version":3,"sources":["_isIndex.js"],"names":[],"mappings":"AAAA;AACA,IAAI,mBAAmB,gBAAvB;;AAEA;AACA,IAAI,WAAW,kBAAf;;AAEA;;;;;;;;AAQA,SAAS,OAAT,CAAiB,KAAjB,EAAwB,MAAxB,EAAgC;AAC9B,WAAS,UAAU,IAAV,GAAiB,gBAAjB,GAAoC,MAA7C;AACA,SAAO,CAAC,CAAC,MAAF,KACJ,OAAO,KAAP,IAAgB,QAAhB,IAA4B,SAAS,IAAT,CAAc,KAAd,CADxB,KAEJ,QAAQ,CAAC,CAAT,IAAc,QAAQ,CAAR,IAAa,CAA3B,IAAgC,QAAQ,MAF3C;AAGD;;AAED,OAAO,OAAP,GAAiB,OAAjB","file":"_isIndex-compiled.js","sourcesContent":["/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n"]}