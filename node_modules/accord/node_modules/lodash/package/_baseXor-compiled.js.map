{"version":3,"sources":["_baseXor.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,cAAR,CAAhB;AAAA,IACI,iBAAiB,QAAQ,mBAAR,CADrB;AAAA,IAEI,WAAW,QAAQ,aAAR,CAFf;;AAIA;;;;;;;;;;AAUA,SAAS,OAAT,CAAiB,MAAjB,EAAyB,QAAzB,EAAmC,UAAnC,EAA+C;AAC7C,QAAI,QAAQ,CAAC,CAAb;AAAA,QACI,SAAS,OAAO,MADpB;;AAGA,WAAO,EAAE,KAAF,GAAU,MAAjB,EAAyB;AACvB,YAAI,SAAS,SACT,UACE,eAAe,MAAf,EAAuB,OAAO,KAAP,CAAvB,EAAsC,QAAtC,EAAgD,UAAhD,CADF,EAEE,eAAe,OAAO,KAAP,CAAf,EAA8B,MAA9B,EAAsC,QAAtC,EAAgD,UAAhD,CAFF,CADS,GAKT,OAAO,KAAP,CALJ;AAMD;AACD,WAAQ,UAAU,OAAO,MAAlB,GAA4B,SAAS,MAAT,EAAiB,QAAjB,EAA2B,UAA3B,CAA5B,GAAqE,EAA5E;AACD;;AAED,OAAO,OAAP,GAAiB,OAAjB","file":"_baseXor-compiled.js","sourcesContent":["var arrayPush = require('./_arrayPush'),\n    baseDifference = require('./_baseDifference'),\n    baseUniq = require('./_baseUniq');\n\n/**\n * The base implementation of methods like `_.xor`, without support for\n * iteratee shorthands, that accepts an array of arrays to inspect.\n *\n * @private\n * @param {Array} arrays The arrays to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of values.\n */\nfunction baseXor(arrays, iteratee, comparator) {\n  var index = -1,\n      length = arrays.length;\n\n  while (++index < length) {\n    var result = result\n      ? arrayPush(\n          baseDifference(result, arrays[index], iteratee, comparator),\n          baseDifference(arrays[index], result, iteratee, comparator)\n        )\n      : arrays[index];\n  }\n  return (result && result.length) ? baseUniq(result, iteratee, comparator) : [];\n}\n\nmodule.exports = baseXor;\n"]}