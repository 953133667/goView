{"version":3,"sources":["invertBy.js"],"names":[],"mappings":"AAAA,IAAI,eAAe,QAAQ,iBAAR,CAAnB;AAAA,IACI,iBAAiB,QAAQ,mBAAR,CADrB;;AAGA;AACA,IAAI,cAAc,OAAO,SAAzB;;AAEA;AACA,IAAI,iBAAiB,YAAY,cAAjC;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,IAAI,WAAW,eAAe,UAAS,MAAT,EAAiB,KAAjB,EAAwB,GAAxB,EAA6B;AACzD,MAAI,eAAe,IAAf,CAAoB,MAApB,EAA4B,KAA5B,CAAJ,EAAwC;AACtC,WAAO,KAAP,EAAc,IAAd,CAAmB,GAAnB;AACD,GAFD,MAEO;AACL,WAAO,KAAP,IAAgB,CAAC,GAAD,CAAhB;AACD;AACF,CANc,EAMZ,YANY,CAAf;;AAQA,OAAO,OAAP,GAAiB,QAAjB","file":"invertBy-compiled.js","sourcesContent":["var baseIteratee = require('./_baseIteratee'),\n    createInverter = require('./_createInverter');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * This method is like `_.invert` except that the inverted object is generated\n * from the results of running each element of `object` thru `iteratee`. The\n * corresponding inverted value of each inverted key is an array of keys\n * responsible for generating the inverted value. The iteratee is invoked\n * with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.1.0\n * @category Object\n * @param {Object} object The object to invert.\n * @param {Array|Function|Object|string} [iteratee=_.identity]\n *  The iteratee invoked per element.\n * @returns {Object} Returns the new inverted object.\n * @example\n *\n * var object = { 'a': 1, 'b': 2, 'c': 1 };\n *\n * _.invertBy(object);\n * // => { '1': ['a', 'c'], '2': ['b'] }\n *\n * _.invertBy(object, function(value) {\n *   return 'group' + value;\n * });\n * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n */\nvar invertBy = createInverter(function(result, value, key) {\n  if (hasOwnProperty.call(result, value)) {\n    result[value].push(key);\n  } else {\n    result[value] = [key];\n  }\n}, baseIteratee);\n\nmodule.exports = invertBy;\n"]}