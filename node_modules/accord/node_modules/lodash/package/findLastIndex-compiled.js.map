{"version":3,"sources":["findLastIndex.js"],"names":[],"mappings":"AAAA,IAAI,gBAAgB,QAAQ,kBAAR,CAApB;AAAA,IACI,eAAe,QAAQ,iBAAR,CADnB;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,SAAS,aAAT,CAAuB,KAAvB,EAA8B,SAA9B,EAAyC;AACvC,WAAQ,SAAS,MAAM,MAAhB,GACH,cAAc,KAAd,EAAqB,aAAa,SAAb,EAAwB,CAAxB,CAArB,EAAiD,IAAjD,CADG,GAEH,CAAC,CAFL;AAGD;;AAED,OAAO,OAAP,GAAiB,aAAjB","file":"findLastIndex-compiled.js","sourcesContent":["var baseFindIndex = require('./_baseFindIndex'),\n    baseIteratee = require('./_baseIteratee');\n\n/**\n * This method is like `_.findIndex` except that it iterates over elements\n * of `collection` from right to left.\n *\n * @static\n * @memberOf _\n * @since 2.0.0\n * @category Array\n * @param {Array} array The array to search.\n * @param {Array|Function|Object|string} [predicate=_.identity]\n *  The function invoked per iteration.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': true },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': false }\n * ];\n *\n * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n * // => 2\n *\n * // The `_.matches` iteratee shorthand.\n * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n * // => 0\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findLastIndex(users, ['active', false]);\n * // => 2\n *\n * // The `_.property` iteratee shorthand.\n * _.findLastIndex(users, 'active');\n * // => 0\n */\nfunction findLastIndex(array, predicate) {\n  return (array && array.length)\n    ? baseFindIndex(array, baseIteratee(predicate, 3), true)\n    : -1;\n}\n\nmodule.exports = findLastIndex;\n"]}