{"version":3,"sources":["method.js"],"names":[],"mappings":"AAAA,IAAI,aAAa,QAAQ,eAAR,CAAjB;AAAA,IACI,OAAO,QAAQ,QAAR,CADX;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,IAAI,SAAS,KAAK,UAAS,IAAT,EAAe,IAAf,EAAqB;AACrC,SAAO,UAAS,MAAT,EAAiB;AACtB,WAAO,WAAW,MAAX,EAAmB,IAAnB,EAAyB,IAAzB,CAAP;AACD,GAFD;AAGD,CAJY,CAAb;;AAMA,OAAO,OAAP,GAAiB,MAAjB","file":"method-compiled.js","sourcesContent":["var baseInvoke = require('./_baseInvoke'),\n    rest = require('./rest');\n\n/**\n * Creates a function that invokes the method at `path` of a given object.\n * Any additional arguments are provided to the invoked method.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Util\n * @param {Array|string} path The path of the method to invoke.\n * @param {...*} [args] The arguments to invoke the method with.\n * @returns {Function} Returns the new function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': _.constant(2) } },\n *   { 'a': { 'b': _.constant(1) } }\n * ];\n *\n * _.map(objects, _.method('a.b'));\n * // => [2, 1]\n *\n * _.map(objects, _.method(['a', 'b']));\n * // => [2, 1]\n */\nvar method = rest(function(path, args) {\n  return function(object) {\n    return baseInvoke(object, path, args);\n  };\n});\n\nmodule.exports = method;\n"]}