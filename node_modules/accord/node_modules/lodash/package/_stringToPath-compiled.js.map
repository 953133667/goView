{"version":3,"sources":["_stringToPath.js"],"names":[],"mappings":"AAAA,IAAI,UAAU,QAAQ,WAAR,CAAd;AAAA,IACI,WAAW,QAAQ,YAAR,CADf;;AAGA;AACA,IAAI,aAAa,qEAAjB;;AAEA;AACA,IAAI,eAAe,UAAnB;;AAEA;;;;;;;AAOA,IAAI,eAAe,QAAQ,UAAS,MAAT,EAAiB;AAC1C,MAAI,SAAS,EAAb;AACA,WAAS,MAAT,EAAiB,OAAjB,CAAyB,UAAzB,EAAqC,UAAS,KAAT,EAAgB,MAAhB,EAAwB,KAAxB,EAA+B,MAA/B,EAAuC;AAC1E,WAAO,IAAP,CAAY,QAAQ,OAAO,OAAP,CAAe,YAAf,EAA6B,IAA7B,CAAR,GAA8C,UAAU,KAApE;AACD,GAFD;AAGA,SAAO,MAAP;AACD,CANkB,CAAnB;;AAQA,OAAO,OAAP,GAAiB,YAAjB","file":"_stringToPath-compiled.js","sourcesContent":["var memoize = require('./memoize'),\n    toString = require('./toString');\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  var result = [];\n  toString(string).replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nmodule.exports = stringToPath;\n"]}