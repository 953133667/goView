{"version":3,"sources":["_baseInverter.js"],"names":[],"mappings":"AAAA,IAAI,aAAa,QAAQ,eAAR,CAAjB;;AAEA;;;;;;;;;;;AAWA,SAAS,YAAT,CAAsB,MAAtB,EAA8B,MAA9B,EAAsC,QAAtC,EAAgD,WAAhD,EAA6D;AAC3D,aAAW,MAAX,EAAmB,UAAS,KAAT,EAAgB,GAAhB,EAAqB,MAArB,EAA6B;AAC9C,WAAO,WAAP,EAAoB,SAAS,KAAT,CAApB,EAAqC,GAArC,EAA0C,MAA1C;AACD,GAFD;AAGA,SAAO,WAAP;AACD;;AAED,OAAO,OAAP,GAAiB,YAAjB","file":"_baseInverter-compiled.js","sourcesContent":["var baseForOwn = require('./_baseForOwn');\n\n/**\n * The base implementation of `_.invert` and `_.invertBy` which inverts\n * `object` with values transformed by `iteratee` and set by `setter`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform values.\n * @param {Object} accumulator The initial inverted object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseInverter(object, setter, iteratee, accumulator) {\n  baseForOwn(object, function(value, key, object) {\n    setter(accumulator, iteratee(value), key, object);\n  });\n  return accumulator;\n}\n\nmodule.exports = baseInverter;\n"]}