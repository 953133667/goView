{"version":3,"sources":["_baseFlatten.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,cAAR,CAAhB;AAAA,IACI,gBAAgB,QAAQ,kBAAR,CADpB;;AAGA;;;;;;;;;;;AAWA,SAAS,WAAT,CAAqB,KAArB,EAA4B,KAA5B,EAAmC,SAAnC,EAA8C,QAA9C,EAAwD,MAAxD,EAAgE;AAC9D,MAAI,QAAQ,CAAC,CAAb;AAAA,MACI,SAAS,MAAM,MADnB;;AAGA,gBAAc,YAAY,aAA1B;AACA,aAAW,SAAS,EAApB;;AAEA,SAAO,EAAE,KAAF,GAAU,MAAjB,EAAyB;AACvB,QAAI,QAAQ,MAAM,KAAN,CAAZ;AACA,QAAI,QAAQ,CAAR,IAAa,UAAU,KAAV,CAAjB,EAAmC;AACjC,UAAI,QAAQ,CAAZ,EAAe;AACb;AACA,oBAAY,KAAZ,EAAmB,QAAQ,CAA3B,EAA8B,SAA9B,EAAyC,QAAzC,EAAmD,MAAnD;AACD,OAHD,MAGO;AACL,kBAAU,MAAV,EAAkB,KAAlB;AACD;AACF,KAPD,MAOO,IAAI,CAAC,QAAL,EAAe;AACpB,aAAO,OAAO,MAAd,IAAwB,KAAxB;AACD;AACF;AACD,SAAO,MAAP;AACD;;AAED,OAAO,OAAP,GAAiB,WAAjB","file":"_baseFlatten-compiled.js","sourcesContent":["var arrayPush = require('./_arrayPush'),\n    isFlattenable = require('./_isFlattenable');\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseFlatten;\n"]}