{"version":3,"sources":["uniqWith.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,aAAR,CAAf;;AAEA;;;;;;;;;;;;;;;;;;;AAmBA,SAAS,QAAT,CAAkB,KAAlB,EAAyB,UAAzB,EAAqC;AACnC,SAAQ,SAAS,MAAM,MAAhB,GACH,SAAS,KAAT,EAAgB,SAAhB,EAA2B,UAA3B,CADG,GAEH,EAFJ;AAGD;;AAED,OAAO,OAAP,GAAiB,QAAjB","file":"uniqWith-compiled.js","sourcesContent":["var baseUniq = require('./_baseUniq');\n\n/**\n * This method is like `_.uniq` except that it accepts `comparator` which\n * is invoked to compare elements of `array`. The comparator is invoked with\n * two arguments: (arrVal, othVal).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 },  { 'x': 1, 'y': 2 }];\n *\n * _.uniqWith(objects, _.isEqual);\n * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n */\nfunction uniqWith(array, comparator) {\n  return (array && array.length)\n    ? baseUniq(array, undefined, comparator)\n    : [];\n}\n\nmodule.exports = uniqWith;\n"]}