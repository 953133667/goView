{"version":3,"sources":["_createCaseFirst.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,cAAR,CAAhB;AAAA,IACI,qBAAqB,QAAQ,uBAAR,CADzB;AAAA,IAEI,gBAAgB,QAAQ,kBAAR,CAFpB;AAAA,IAGI,WAAW,QAAQ,YAAR,CAHf;;AAKA;;;;;;;AAOA,SAAS,eAAT,CAAyB,UAAzB,EAAqC;AACnC,SAAO,UAAS,MAAT,EAAiB;AACtB,aAAS,SAAS,MAAT,CAAT;;AAEA,QAAI,aAAa,mBAAmB,IAAnB,CAAwB,MAAxB,IACb,cAAc,MAAd,CADa,GAEb,SAFJ;;AAIA,QAAI,MAAM,aACN,WAAW,CAAX,CADM,GAEN,OAAO,MAAP,CAAc,CAAd,CAFJ;;AAIA,QAAI,WAAW,aACX,UAAU,UAAV,EAAsB,CAAtB,EAAyB,IAAzB,CAA8B,EAA9B,CADW,GAEX,OAAO,KAAP,CAAa,CAAb,CAFJ;;AAIA,WAAO,IAAI,UAAJ,MAAoB,QAA3B;AACD,GAhBD;AAiBD;;AAED,OAAO,OAAP,GAAiB,eAAjB","file":"_createCaseFirst-compiled.js","sourcesContent":["var castSlice = require('./_castSlice'),\n    reHasComplexSymbol = require('./_reHasComplexSymbol'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/**\n * Creates a function like `_.lowerFirst`.\n *\n * @private\n * @param {string} methodName The name of the `String` case method to use.\n * @returns {Function} Returns the new function.\n */\nfunction createCaseFirst(methodName) {\n  return function(string) {\n    string = toString(string);\n\n    var strSymbols = reHasComplexSymbol.test(string)\n      ? stringToArray(string)\n      : undefined;\n\n    var chr = strSymbols\n      ? strSymbols[0]\n      : string.charAt(0);\n\n    var trailing = strSymbols\n      ? castSlice(strSymbols, 1).join('')\n      : string.slice(1);\n\n    return chr[methodName]() + trailing;\n  };\n}\n\nmodule.exports = createCaseFirst;\n"]}