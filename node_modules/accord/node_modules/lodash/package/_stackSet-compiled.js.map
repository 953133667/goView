{"version":3,"sources":["_stackSet.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,aAAR,CAAf;AAAA,IACI,WAAW,QAAQ,aAAR,CADf;;AAGA;AACA,IAAI,mBAAmB,GAAvB;;AAEA;;;;;;;;;;AAUA,SAAS,QAAT,CAAkB,GAAlB,EAAuB,KAAvB,EAA8B;AAC5B,MAAI,OAAO,KAAK,QAAhB;AAAA,MACI,QAAQ,KAAK,KADjB;;AAGA,MAAI,KAAJ,EAAW;AACT,QAAI,MAAM,MAAN,GAAgB,mBAAmB,CAAvC,EAA2C;AACzC,eAAS,KAAT,EAAgB,GAAhB,EAAqB,KAArB;AACD,KAFD,MAEO;AACL,WAAK,KAAL,GAAa,IAAb;AACA,WAAK,GAAL,GAAW,IAAI,QAAJ,CAAa,KAAb,CAAX;AACD;AACF;AACD,MAAI,MAAM,KAAK,GAAf;AACA,MAAI,GAAJ,EAAS;AACP,QAAI,GAAJ,CAAQ,GAAR,EAAa,KAAb;AACD;AACD,SAAO,IAAP;AACD;;AAED,OAAO,OAAP,GAAiB,QAAjB","file":"_stackSet-compiled.js","sourcesContent":["var MapCache = require('./_MapCache'),\n    assocSet = require('./_assocSet');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__,\n      array = data.array;\n\n  if (array) {\n    if (array.length < (LARGE_ARRAY_SIZE - 1)) {\n      assocSet(array, key, value);\n    } else {\n      data.array = null;\n      data.map = new MapCache(array);\n    }\n  }\n  var map = data.map;\n  if (map) {\n    map.set(key, value);\n  }\n  return this;\n}\n\nmodule.exports = stackSet;\n"]}