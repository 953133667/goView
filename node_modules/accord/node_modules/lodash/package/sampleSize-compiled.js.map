{"version":3,"sources":["sampleSize.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,cAAR,CAAhB;AAAA,IACI,aAAa,QAAQ,eAAR,CADjB;AAAA,IAEI,iBAAiB,QAAQ,mBAAR,CAFrB;AAAA,IAGI,UAAU,QAAQ,WAAR,CAHd;AAAA,IAII,YAAY,QAAQ,aAAR,CAJhB;;AAMA;;;;;;;;;;;;;;;;;;;;AAoBA,SAAS,UAAT,CAAoB,UAApB,EAAgC,CAAhC,EAAmC,KAAnC,EAA0C;AACxC,MAAI,QAAQ,CAAC,CAAb;AAAA,MACI,SAAS,QAAQ,UAAR,CADb;AAAA,MAEI,SAAS,OAAO,MAFpB;AAAA,MAGI,YAAY,SAAS,CAHzB;;AAKA,MAAK,QAAQ,eAAe,UAAf,EAA2B,CAA3B,EAA8B,KAA9B,CAAR,GAA+C,MAAM,SAA1D,EAAsE;AACpE,QAAI,CAAJ;AACD,GAFD,MAEO;AACL,QAAI,UAAU,UAAU,CAAV,CAAV,EAAwB,CAAxB,EAA2B,MAA3B,CAAJ;AACD;AACD,SAAO,EAAE,KAAF,GAAU,CAAjB,EAAoB;AAClB,QAAI,OAAO,WAAW,KAAX,EAAkB,SAAlB,CAAX;AAAA,QACI,QAAQ,OAAO,IAAP,CADZ;;AAGA,WAAO,IAAP,IAAe,OAAO,KAAP,CAAf;AACA,WAAO,KAAP,IAAgB,KAAhB;AACD;AACD,SAAO,MAAP,GAAgB,CAAhB;AACA,SAAO,MAAP;AACD;;AAED,OAAO,OAAP,GAAiB,UAAjB","file":"sampleSize-compiled.js","sourcesContent":["var baseClamp = require('./_baseClamp'),\n    baseRandom = require('./_baseRandom'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toArray = require('./toArray'),\n    toInteger = require('./toInteger');\n\n/**\n * Gets `n` random elements at unique keys from `collection` up to the\n * size of `collection`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to sample.\n * @param {number} [n=1] The number of elements to sample.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the random elements.\n * @example\n *\n * _.sampleSize([1, 2, 3], 2);\n * // => [3, 1]\n *\n * _.sampleSize([1, 2, 3], 4);\n * // => [2, 3, 1]\n */\nfunction sampleSize(collection, n, guard) {\n  var index = -1,\n      result = toArray(collection),\n      length = result.length,\n      lastIndex = length - 1;\n\n  if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {\n    n = 1;\n  } else {\n    n = baseClamp(toInteger(n), 0, length);\n  }\n  while (++index < n) {\n    var rand = baseRandom(index, lastIndex),\n        value = result[rand];\n\n    result[rand] = result[index];\n    result[index] = value;\n  }\n  result.length = n;\n  return result;\n}\n\nmodule.exports = sampleSize;\n"]}