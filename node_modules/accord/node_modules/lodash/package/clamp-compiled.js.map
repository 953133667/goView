{"version":3,"sources":["clamp.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,cAAR,CAAhB;AAAA,IACI,WAAW,QAAQ,YAAR,CADf;;AAGA;;;;;;;;;;;;;;;;;;;AAmBA,SAAS,KAAT,CAAe,MAAf,EAAuB,KAAvB,EAA8B,KAA9B,EAAqC;AACnC,MAAI,UAAU,SAAd,EAAyB;AACvB,YAAQ,KAAR;AACA,YAAQ,SAAR;AACD;AACD,MAAI,UAAU,SAAd,EAAyB;AACvB,YAAQ,SAAS,KAAT,CAAR;AACA,YAAQ,UAAU,KAAV,GAAkB,KAAlB,GAA0B,CAAlC;AACD;AACD,MAAI,UAAU,SAAd,EAAyB;AACvB,YAAQ,SAAS,KAAT,CAAR;AACA,YAAQ,UAAU,KAAV,GAAkB,KAAlB,GAA0B,CAAlC;AACD;AACD,SAAO,UAAU,SAAS,MAAT,CAAV,EAA4B,KAA5B,EAAmC,KAAnC,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,KAAjB","file":"clamp-compiled.js","sourcesContent":["var baseClamp = require('./_baseClamp'),\n    toNumber = require('./toNumber');\n\n/**\n * Clamps `number` within the inclusive `lower` and `upper` bounds.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Number\n * @param {number} number The number to clamp.\n * @param {number} [lower] The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the clamped number.\n * @example\n *\n * _.clamp(-10, -5, 5);\n * // => -5\n *\n * _.clamp(10, -5, 5);\n * // => 5\n */\nfunction clamp(number, lower, upper) {\n  if (upper === undefined) {\n    upper = lower;\n    lower = undefined;\n  }\n  if (upper !== undefined) {\n    upper = toNumber(upper);\n    upper = upper === upper ? upper : 0;\n  }\n  if (lower !== undefined) {\n    lower = toNumber(lower);\n    lower = lower === lower ? lower : 0;\n  }\n  return baseClamp(toNumber(number), lower, upper);\n}\n\nmodule.exports = clamp;\n"]}