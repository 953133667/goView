{"version":3,"sources":["maxBy.js"],"names":[],"mappings":"AAAA,IAAI,eAAe,QAAQ,iBAAR,CAAnB;AAAA,IACI,SAAS,QAAQ,WAAR,CADb;AAAA,IAEI,eAAe,QAAQ,iBAAR,CAFnB;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SAAS,KAAT,CAAe,KAAf,EAAsB,QAAtB,EAAgC;AAC9B,WAAQ,SAAS,MAAM,MAAhB,GACH,aAAa,KAAb,EAAoB,aAAa,QAAb,CAApB,EAA4C,MAA5C,CADG,GAEH,SAFJ;AAGD;;AAED,OAAO,OAAP,GAAiB,KAAjB","file":"maxBy-compiled.js","sourcesContent":["var baseExtremum = require('./_baseExtremum'),\n    baseGt = require('./_baseGt'),\n    baseIteratee = require('./_baseIteratee');\n\n/**\n * This method is like `_.max` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * the value is ranked. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @param {Array|Function|Object|string} [iteratee=_.identity]\n *  The iteratee invoked per element.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * var objects = [{ 'n': 1 }, { 'n': 2 }];\n *\n * _.maxBy(objects, function(o) { return o.n; });\n * // => { 'n': 2 }\n *\n * // The `_.property` iteratee shorthand.\n * _.maxBy(objects, 'n');\n * // => { 'n': 2 }\n */\nfunction maxBy(array, iteratee) {\n  return (array && array.length)\n    ? baseExtremum(array, baseIteratee(iteratee), baseGt)\n    : undefined;\n}\n\nmodule.exports = maxBy;\n"]}