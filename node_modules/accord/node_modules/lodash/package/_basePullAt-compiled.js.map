{"version":3,"sources":["_basePullAt.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,aAAR,CAAf;AAAA,IACI,UAAU,QAAQ,YAAR,CADd;AAAA,IAEI,QAAQ,QAAQ,UAAR,CAFZ;AAAA,IAGI,OAAO,QAAQ,QAAR,CAHX;AAAA,IAII,SAAS,QAAQ,WAAR,CAJb;AAAA,IAKI,QAAQ,QAAQ,UAAR,CALZ;;AAOA;AACA,IAAI,aAAa,MAAM,SAAvB;;AAEA;AACA,IAAI,SAAS,WAAW,MAAxB;;AAEA;;;;;;;;;AASA,SAAS,UAAT,CAAoB,KAApB,EAA2B,OAA3B,EAAoC;AAClC,MAAI,SAAS,QAAQ,QAAQ,MAAhB,GAAyB,CAAtC;AAAA,MACI,YAAY,SAAS,CADzB;;AAGA,SAAO,QAAP,EAAiB;AACf,QAAI,QAAQ,QAAQ,MAAR,CAAZ;AACA,QAAI,UAAU,SAAV,IAAuB,UAAU,QAArC,EAA+C;AAC7C,UAAI,WAAW,KAAf;AACA,UAAI,QAAQ,KAAR,CAAJ,EAAoB;AAClB,eAAO,IAAP,CAAY,KAAZ,EAAmB,KAAnB,EAA0B,CAA1B;AACD,OAFD,MAGK,IAAI,CAAC,MAAM,KAAN,EAAa,KAAb,CAAL,EAA0B;AAC7B,YAAI,OAAO,SAAS,KAAT,CAAX;AAAA,YACI,SAAS,OAAO,KAAP,EAAc,IAAd,CADb;;AAGA,YAAI,UAAU,IAAd,EAAoB;AAClB,iBAAO,OAAO,MAAM,KAAK,IAAL,CAAN,CAAP,CAAP;AACD;AACF,OAPI,MAQA;AACH,eAAO,MAAM,MAAM,KAAN,CAAN,CAAP;AACD;AACF;AACF;AACD,SAAO,KAAP;AACD;;AAED,OAAO,OAAP,GAAiB,UAAjB","file":"_basePullAt-compiled.js","sourcesContent":["var castPath = require('./_castPath'),\n    isIndex = require('./_isIndex'),\n    isKey = require('./_isKey'),\n    last = require('./last'),\n    parent = require('./_parent'),\n    toKey = require('./_toKey');\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * The base implementation of `_.pullAt` without support for individual\n * indexes or capturing the removed elements.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {number[]} indexes The indexes of elements to remove.\n * @returns {Array} Returns `array`.\n */\nfunction basePullAt(array, indexes) {\n  var length = array ? indexes.length : 0,\n      lastIndex = length - 1;\n\n  while (length--) {\n    var index = indexes[length];\n    if (length == lastIndex || index !== previous) {\n      var previous = index;\n      if (isIndex(index)) {\n        splice.call(array, index, 1);\n      }\n      else if (!isKey(index, array)) {\n        var path = castPath(index),\n            object = parent(array, path);\n\n        if (object != null) {\n          delete object[toKey(last(path))];\n        }\n      }\n      else {\n        delete array[toKey(index)];\n      }\n    }\n  }\n  return array;\n}\n\nmodule.exports = basePullAt;\n"]}