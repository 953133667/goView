{"version":3,"sources":["parseInt.js"],"names":[],"mappings":"AAAA,IAAI,OAAO,QAAQ,SAAR,CAAX;AAAA,IACI,WAAW,QAAQ,YAAR,CADf;;AAGA;AACA,IAAI,SAAS,YAAb;;AAEA;AACA,IAAI,iBAAiB,MAArB;;AAEA;AACA,IAAI,iBAAiB,KAAK,QAA1B;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SAAS,QAAT,CAAkB,MAAlB,EAA0B,KAA1B,EAAiC,KAAjC,EAAwC;AACtC;AACA;AACA,MAAI,SAAS,SAAS,IAAtB,EAA4B;AAC1B,YAAQ,CAAR;AACD,GAFD,MAEO,IAAI,KAAJ,EAAW;AAChB,YAAQ,CAAC,KAAT;AACD;AACD,WAAS,SAAS,MAAT,EAAiB,OAAjB,CAAyB,MAAzB,EAAiC,EAAjC,CAAT;AACA,SAAO,eAAe,MAAf,EAAuB,UAAU,eAAe,IAAf,CAAoB,MAApB,IAA8B,EAA9B,GAAmC,EAA7C,CAAvB,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,QAAjB","file":"parseInt-compiled.js","sourcesContent":["var root = require('./_root'),\n    toString = require('./toString');\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect hexadecimal string values. */\nvar reHasHexPrefix = /^0x/i;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeParseInt = root.parseInt;\n\n/**\n * Converts `string` to an integer of the specified radix. If `radix` is\n * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\n * hexadecimal, in which case a `radix` of `16` is used.\n *\n * **Note:** This method aligns with the\n * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category String\n * @param {string} string The string to convert.\n * @param {number} [radix=10] The radix to interpret `value` by.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.parseInt('08');\n * // => 8\n *\n * _.map(['6', '08', '10'], _.parseInt);\n * // => [6, 8, 10]\n */\nfunction parseInt(string, radix, guard) {\n  // Chrome fails to trim leading <BOM> whitespace characters.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=3109 for more details.\n  if (guard || radix == null) {\n    radix = 0;\n  } else if (radix) {\n    radix = +radix;\n  }\n  string = toString(string).replace(reTrim, '');\n  return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));\n}\n\nmodule.exports = parseInt;\n"]}