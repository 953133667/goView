{"version":3,"sources":["_reorder.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,cAAR,CAAhB;AAAA,IACI,UAAU,QAAQ,YAAR,CADd;;AAGA;AACA,IAAI,YAAY,KAAK,GAArB;;AAEA;;;;;;;;;;AAUA,SAAS,OAAT,CAAiB,KAAjB,EAAwB,OAAxB,EAAiC;AAC/B,MAAI,YAAY,MAAM,MAAtB;AAAA,MACI,SAAS,UAAU,QAAQ,MAAlB,EAA0B,SAA1B,CADb;AAAA,MAEI,WAAW,UAAU,KAAV,CAFf;;AAIA,SAAO,QAAP,EAAiB;AACf,QAAI,QAAQ,QAAQ,MAAR,CAAZ;AACA,UAAM,MAAN,IAAgB,QAAQ,KAAR,EAAe,SAAf,IAA4B,SAAS,KAAT,CAA5B,GAA8C,SAA9D;AACD;AACD,SAAO,KAAP;AACD;;AAED,OAAO,OAAP,GAAiB,OAAjB","file":"_reorder-compiled.js","sourcesContent":["var copyArray = require('./_copyArray'),\n    isIndex = require('./_isIndex');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Reorder `array` according to the specified indexes where the element at\n * the first index is assigned as the first element, the element at\n * the second index is assigned as the second element, and so on.\n *\n * @private\n * @param {Array} array The array to reorder.\n * @param {Array} indexes The arranged array indexes.\n * @returns {Array} Returns `array`.\n */\nfunction reorder(array, indexes) {\n  var arrLength = array.length,\n      length = nativeMin(indexes.length, arrLength),\n      oldArray = copyArray(array);\n\n  while (length--) {\n    var index = indexes[length];\n    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n  }\n  return array;\n}\n\nmodule.exports = reorder;\n"]}