{"version":3,"sources":["convert.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,gBAAR,CAAlB;AAAA,IACI,OAAO,QAAQ,SAAR,CADX;;AAGA;;;;;;;;;;AAUA,SAAS,OAAT,CAAiB,IAAjB,EAAuB,IAAvB,EAA6B,OAA7B,EAAsC;AACpC,SAAO,YAAY,IAAZ,EAAkB,IAAlB,EAAwB,IAAxB,EAA8B,OAA9B,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,OAAjB","file":"convert-compiled.js","sourcesContent":["var baseConvert = require('./_baseConvert'),\n    util = require('./_util');\n\n/**\n * Converts `func` of `name` to an immutable auto-curried iteratee-first data-last\n * version with conversion `options` applied. If `name` is an object its methods\n * will be converted.\n *\n * @param {string} name The name of the function to wrap.\n * @param {Function} [func] The function to wrap.\n * @param {Object} [options] The options object. See `baseConvert` for more details.\n * @returns {Function|Object} Returns the converted function or object.\n */\nfunction convert(name, func, options) {\n  return baseConvert(util, name, func, options);\n}\n\nmodule.exports = convert;\n"]}