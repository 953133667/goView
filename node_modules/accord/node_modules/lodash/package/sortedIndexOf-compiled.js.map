{"version":3,"sources":["sortedIndexOf.js"],"names":[],"mappings":"AAAA,IAAI,kBAAkB,QAAQ,oBAAR,CAAtB;AAAA,IACI,KAAK,QAAQ,MAAR,CADT;;AAGA;;;;;;;;;;;;;;;;AAgBA,SAAS,aAAT,CAAuB,KAAvB,EAA8B,KAA9B,EAAqC;AACnC,MAAI,SAAS,QAAQ,MAAM,MAAd,GAAuB,CAApC;AACA,MAAI,MAAJ,EAAY;AACV,QAAI,QAAQ,gBAAgB,KAAhB,EAAuB,KAAvB,CAAZ;AACA,QAAI,QAAQ,MAAR,IAAkB,GAAG,MAAM,KAAN,CAAH,EAAiB,KAAjB,CAAtB,EAA+C;AAC7C,aAAO,KAAP;AACD;AACF;AACD,SAAO,CAAC,CAAR;AACD;;AAED,OAAO,OAAP,GAAiB,aAAjB","file":"sortedIndexOf-compiled.js","sourcesContent":["var baseSortedIndex = require('./_baseSortedIndex'),\n    eq = require('./eq');\n\n/**\n * This method is like `_.indexOf` except that it performs a binary\n * search on a sorted `array`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to search.\n * @param {*} value The value to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * _.sortedIndexOf([1, 1, 2, 2], 2);\n * // => 2\n */\nfunction sortedIndexOf(array, value) {\n  var length = array ? array.length : 0;\n  if (length) {\n    var index = baseSortedIndex(array, value);\n    if (index < length && eq(array[index], value)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = sortedIndexOf;\n"]}