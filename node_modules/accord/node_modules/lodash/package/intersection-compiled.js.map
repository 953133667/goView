{"version":3,"sources":["intersection.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,aAAR,CAAf;AAAA,IACI,mBAAmB,QAAQ,qBAAR,CADvB;AAAA,IAEI,sBAAsB,QAAQ,wBAAR,CAF1B;AAAA,IAGI,OAAO,QAAQ,QAAR,CAHX;;AAKA;;;;;;;;;;;;;;;;;AAiBA,IAAI,eAAe,KAAK,UAAS,MAAT,EAAiB;AACvC,QAAI,SAAS,SAAS,MAAT,EAAiB,mBAAjB,CAAb;AACA,WAAQ,OAAO,MAAP,IAAiB,OAAO,CAAP,MAAc,OAAO,CAAP,CAAhC,GACH,iBAAiB,MAAjB,CADG,GAEH,EAFJ;AAGD,CALkB,CAAnB;;AAOA,OAAO,OAAP,GAAiB,YAAjB","file":"intersection-compiled.js","sourcesContent":["var arrayMap = require('./_arrayMap'),\n    baseIntersection = require('./_baseIntersection'),\n    castArrayLikeObject = require('./_castArrayLikeObject'),\n    rest = require('./rest');\n\n/**\n * Creates an array of unique values that are included in all given arrays\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n * for equality comparisons. The order of result values is determined by the\n * order they occur in the first array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @returns {Array} Returns the new array of intersecting values.\n * @example\n *\n * _.intersection([2, 1], [4, 2], [1, 2]);\n * // => [2]\n */\nvar intersection = rest(function(arrays) {\n  var mapped = arrayMap(arrays, castArrayLikeObject);\n  return (mapped.length && mapped[0] === arrays[0])\n    ? baseIntersection(mapped)\n    : [];\n});\n\nmodule.exports = intersection;\n"]}