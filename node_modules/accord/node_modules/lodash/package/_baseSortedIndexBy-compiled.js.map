{"version":3,"sources":["_baseSortedIndexBy.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,YAAR,CAAf;;AAEA;AACA,IAAI,mBAAmB,UAAvB;AAAA,IACI,kBAAkB,mBAAmB,CADzC;;AAGA;AACA,IAAI,cAAc,KAAK,KAAvB;AAAA,IACI,YAAY,KAAK,GADrB;;AAGA;;;;;;;;;;;;;AAaA,SAAS,iBAAT,CAA2B,KAA3B,EAAkC,KAAlC,EAAyC,QAAzC,EAAmD,UAAnD,EAA+D;AAC7D,UAAQ,SAAS,KAAT,CAAR;;AAEA,MAAI,MAAM,CAAV;AAAA,MACI,OAAO,QAAQ,MAAM,MAAd,GAAuB,CADlC;AAAA,MAEI,WAAW,UAAU,KAFzB;AAAA,MAGI,YAAY,UAAU,IAH1B;AAAA,MAII,cAAc,SAAS,KAAT,CAJlB;AAAA,MAKI,iBAAiB,UAAU,SAL/B;;AAOA,SAAO,MAAM,IAAb,EAAmB;AACjB,QAAI,MAAM,YAAY,CAAC,MAAM,IAAP,IAAe,CAA3B,CAAV;AAAA,QACI,WAAW,SAAS,MAAM,GAAN,CAAT,CADf;AAAA,QAEI,eAAe,aAAa,SAFhC;AAAA,QAGI,YAAY,aAAa,IAH7B;AAAA,QAII,iBAAiB,aAAa,QAJlC;AAAA,QAKI,cAAc,SAAS,QAAT,CALlB;;AAOA,QAAI,QAAJ,EAAc;AACZ,UAAI,SAAS,cAAc,cAA3B;AACD,KAFD,MAEO,IAAI,cAAJ,EAAoB;AACzB,eAAS,mBAAmB,cAAc,YAAjC,CAAT;AACD,KAFM,MAEA,IAAI,SAAJ,EAAe;AACpB,eAAS,kBAAkB,YAAlB,KAAmC,cAAc,CAAC,SAAlD,CAAT;AACD,KAFM,MAEA,IAAI,WAAJ,EAAiB;AACtB,eAAS,kBAAkB,YAAlB,IAAkC,CAAC,SAAnC,KAAiD,cAAc,CAAC,WAAhE,CAAT;AACD,KAFM,MAEA,IAAI,aAAa,WAAjB,EAA8B;AACnC,eAAS,KAAT;AACD,KAFM,MAEA;AACL,eAAS,aAAc,YAAY,KAA1B,GAAoC,WAAW,KAAxD;AACD;AACD,QAAI,MAAJ,EAAY;AACV,YAAM,MAAM,CAAZ;AACD,KAFD,MAEO;AACL,aAAO,GAAP;AACD;AACF;AACD,SAAO,UAAU,IAAV,EAAgB,eAAhB,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,iBAAjB","file":"_baseSortedIndexBy-compiled.js","sourcesContent":["var isSymbol = require('./isSymbol');\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295,\n    MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeMin = Math.min;\n\n/**\n * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n * which invokes `iteratee` for `value` and each element of `array` to compute\n * their sort ranking. The iteratee is invoked with one argument; (value).\n *\n * @private\n * @param {Array} array The sorted array to inspect.\n * @param {*} value The value to evaluate.\n * @param {Function} iteratee The iteratee invoked per element.\n * @param {boolean} [retHighest] Specify returning the highest qualified index.\n * @returns {number} Returns the index at which `value` should be inserted\n *  into `array`.\n */\nfunction baseSortedIndexBy(array, value, iteratee, retHighest) {\n  value = iteratee(value);\n\n  var low = 0,\n      high = array ? array.length : 0,\n      valIsNaN = value !== value,\n      valIsNull = value === null,\n      valIsSymbol = isSymbol(value),\n      valIsUndefined = value === undefined;\n\n  while (low < high) {\n    var mid = nativeFloor((low + high) / 2),\n        computed = iteratee(array[mid]),\n        othIsDefined = computed !== undefined,\n        othIsNull = computed === null,\n        othIsReflexive = computed === computed,\n        othIsSymbol = isSymbol(computed);\n\n    if (valIsNaN) {\n      var setLow = retHighest || othIsReflexive;\n    } else if (valIsUndefined) {\n      setLow = othIsReflexive && (retHighest || othIsDefined);\n    } else if (valIsNull) {\n      setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);\n    } else if (valIsSymbol) {\n      setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);\n    } else if (othIsNull || othIsSymbol) {\n      setLow = false;\n    } else {\n      setLow = retHighest ? (computed <= value) : (computed < value);\n    }\n    if (setLow) {\n      low = mid + 1;\n    } else {\n      high = mid;\n    }\n  }\n  return nativeMin(high, MAX_ARRAY_INDEX);\n}\n\nmodule.exports = baseSortedIndexBy;\n"]}