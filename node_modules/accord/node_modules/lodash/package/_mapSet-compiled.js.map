{"version":3,"sources":["_mapSet.js"],"names":[],"mappings":"AAAA,IAAI,MAAM,QAAQ,QAAR,CAAV;AAAA,IACI,WAAW,QAAQ,aAAR,CADf;AAAA,IAEI,UAAU,QAAQ,YAAR,CAFd;AAAA,IAGI,YAAY,QAAQ,cAAR,CAHhB;;AAKA;;;;;;;;;;AAUA,SAAS,MAAT,CAAgB,GAAhB,EAAqB,KAArB,EAA4B;AAC1B,MAAI,OAAO,KAAK,QAAhB;AACA,MAAI,UAAU,GAAV,CAAJ,EAAoB;AAClB,YAAQ,OAAO,GAAP,IAAc,QAAd,GAAyB,KAAK,MAA9B,GAAuC,KAAK,IAApD,EAA0D,GAA1D,EAA+D,KAA/D;AACD,GAFD,MAEO,IAAI,GAAJ,EAAS;AACd,SAAK,GAAL,CAAS,GAAT,CAAa,GAAb,EAAkB,KAAlB;AACD,GAFM,MAEA;AACL,aAAS,KAAK,GAAd,EAAmB,GAAnB,EAAwB,KAAxB;AACD;AACD,SAAO,IAAP;AACD;;AAED,OAAO,OAAP,GAAiB,MAAjB","file":"_mapSet-compiled.js","sourcesContent":["var Map = require('./_Map'),\n    assocSet = require('./_assocSet'),\n    hashSet = require('./_hashSet'),\n    isKeyable = require('./_isKeyable');\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapSet(key, value) {\n  var data = this.__data__;\n  if (isKeyable(key)) {\n    hashSet(typeof key == 'string' ? data.string : data.hash, key, value);\n  } else if (Map) {\n    data.map.set(key, value);\n  } else {\n    assocSet(data.map, key, value);\n  }\n  return this;\n}\n\nmodule.exports = mapSet;\n"]}