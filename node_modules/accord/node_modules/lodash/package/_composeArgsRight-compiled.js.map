{"version":3,"sources":["_composeArgsRight.js"],"names":[],"mappings":"AAAA;AACA,IAAI,YAAY,KAAK,GAArB;;AAEA;;;;;;;;;;;AAWA,SAAS,gBAAT,CAA0B,IAA1B,EAAgC,QAAhC,EAA0C,OAA1C,EAAmD,SAAnD,EAA8D;AAC5D,MAAI,YAAY,CAAC,CAAjB;AAAA,MACI,aAAa,KAAK,MADtB;AAAA,MAEI,eAAe,CAAC,CAFpB;AAAA,MAGI,gBAAgB,QAAQ,MAH5B;AAAA,MAII,aAAa,CAAC,CAJlB;AAAA,MAKI,cAAc,SAAS,MAL3B;AAAA,MAMI,cAAc,UAAU,aAAa,aAAvB,EAAsC,CAAtC,CANlB;AAAA,MAOI,SAAS,MAAM,cAAc,WAApB,CAPb;AAAA,MAQI,cAAc,CAAC,SARnB;;AAUA,SAAO,EAAE,SAAF,GAAc,WAArB,EAAkC;AAChC,WAAO,SAAP,IAAoB,KAAK,SAAL,CAApB;AACD;AACD,MAAI,SAAS,SAAb;AACA,SAAO,EAAE,UAAF,GAAe,WAAtB,EAAmC;AACjC,WAAO,SAAS,UAAhB,IAA8B,SAAS,UAAT,CAA9B;AACD;AACD,SAAO,EAAE,YAAF,GAAiB,aAAxB,EAAuC;AACrC,QAAI,eAAe,YAAY,UAA/B,EAA2C;AACzC,aAAO,SAAS,QAAQ,YAAR,CAAhB,IAAyC,KAAK,WAAL,CAAzC;AACD;AACF;AACD,SAAO,MAAP;AACD;;AAED,OAAO,OAAP,GAAiB,gBAAjB","file":"_composeArgsRight-compiled.js","sourcesContent":["/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This function is like `composeArgs` except that the arguments composition\n * is tailored for `_.partialRight`.\n *\n * @private\n * @param {Array|Object} args The provided arguments.\n * @param {Array} partials The arguments to append to those provided.\n * @param {Array} holders The `partials` placeholder indexes.\n * @params {boolean} [isCurried] Specify composing for a curried function.\n * @returns {Array} Returns the new array of composed arguments.\n */\nfunction composeArgsRight(args, partials, holders, isCurried) {\n  var argsIndex = -1,\n      argsLength = args.length,\n      holdersIndex = -1,\n      holdersLength = holders.length,\n      rightIndex = -1,\n      rightLength = partials.length,\n      rangeLength = nativeMax(argsLength - holdersLength, 0),\n      result = Array(rangeLength + rightLength),\n      isUncurried = !isCurried;\n\n  while (++argsIndex < rangeLength) {\n    result[argsIndex] = args[argsIndex];\n  }\n  var offset = argsIndex;\n  while (++rightIndex < rightLength) {\n    result[offset + rightIndex] = partials[rightIndex];\n  }\n  while (++holdersIndex < holdersLength) {\n    if (isUncurried || argsIndex < argsLength) {\n      result[offset + holders[holdersIndex]] = args[argsIndex++];\n    }\n  }\n  return result;\n}\n\nmodule.exports = composeArgsRight;\n"]}