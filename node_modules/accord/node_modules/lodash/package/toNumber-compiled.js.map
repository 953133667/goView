{"version":3,"sources":["toNumber.js"],"names":[],"mappings":"AAAA,IAAI,aAAa,QAAQ,cAAR,CAAjB;AAAA,IACI,WAAW,QAAQ,YAAR,CADf;AAAA,IAEI,WAAW,QAAQ,YAAR,CAFf;;AAIA;AACA,IAAI,MAAM,IAAI,CAAd;;AAEA;AACA,IAAI,SAAS,YAAb;;AAEA;AACA,IAAI,aAAa,oBAAjB;;AAEA;AACA,IAAI,aAAa,YAAjB;;AAEA;AACA,IAAI,YAAY,aAAhB;;AAEA;AACA,IAAI,eAAe,QAAnB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAAS,QAAT,CAAkB,KAAlB,EAAyB;AACvB,MAAI,OAAO,KAAP,IAAgB,QAApB,EAA8B;AAC5B,WAAO,KAAP;AACD;AACD,MAAI,SAAS,KAAT,CAAJ,EAAqB;AACnB,WAAO,GAAP;AACD;AACD,MAAI,SAAS,KAAT,CAAJ,EAAqB;AACnB,QAAI,QAAQ,WAAW,MAAM,OAAjB,IAA4B,MAAM,OAAN,EAA5B,GAA8C,KAA1D;AACA,YAAQ,SAAS,KAAT,IAAmB,QAAQ,EAA3B,GAAiC,KAAzC;AACD;AACD,MAAI,OAAO,KAAP,IAAgB,QAApB,EAA8B;AAC5B,WAAO,UAAU,CAAV,GAAc,KAAd,GAAsB,CAAC,KAA9B;AACD;AACD,UAAQ,MAAM,OAAN,CAAc,MAAd,EAAsB,EAAtB,CAAR;AACA,MAAI,WAAW,WAAW,IAAX,CAAgB,KAAhB,CAAf;AACA,SAAQ,YAAY,UAAU,IAAV,CAAe,KAAf,CAAb,GACH,aAAa,MAAM,KAAN,CAAY,CAAZ,CAAb,EAA6B,WAAW,CAAX,GAAe,CAA5C,CADG,GAEF,WAAW,IAAX,CAAgB,KAAhB,IAAyB,GAAzB,GAA+B,CAAC,KAFrC;AAGD;;AAED,OAAO,OAAP,GAAiB,QAAjB","file":"toNumber-compiled.js","sourcesContent":["var isFunction = require('./isFunction'),\n    isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3);\n * // => 3\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3');\n * // => 3\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = isFunction(value.valueOf) ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n"]}