{"version":3,"sources":["unionBy.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,gBAAR,CAAlB;AAAA,IACI,eAAe,QAAQ,iBAAR,CADnB;AAAA,IAEI,WAAW,QAAQ,aAAR,CAFf;AAAA,IAGI,oBAAoB,QAAQ,qBAAR,CAHxB;AAAA,IAII,OAAO,QAAQ,QAAR,CAJX;AAAA,IAKI,OAAO,QAAQ,QAAR,CALX;;AAOA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAI,UAAU,KAAK,UAAS,MAAT,EAAiB;AAClC,MAAI,WAAW,KAAK,MAAL,CAAf;AACA,MAAI,kBAAkB,QAAlB,CAAJ,EAAiC;AAC/B,eAAW,SAAX;AACD;AACD,SAAO,SAAS,YAAY,MAAZ,EAAoB,CAApB,EAAuB,iBAAvB,EAA0C,IAA1C,CAAT,EAA0D,aAAa,QAAb,CAA1D,CAAP;AACD,CANa,CAAd;;AAQA,OAAO,OAAP,GAAiB,OAAjB","file":"unionBy-compiled.js","sourcesContent":["var baseFlatten = require('./_baseFlatten'),\n    baseIteratee = require('./_baseIteratee'),\n    baseUniq = require('./_baseUniq'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    last = require('./last'),\n    rest = require('./rest');\n\n/**\n * This method is like `_.union` except that it accepts `iteratee` which is\n * invoked for each element of each `arrays` to generate the criterion by\n * which uniqueness is computed. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Array|Function|Object|string} [iteratee=_.identity]\n *  The iteratee invoked per element.\n * @returns {Array} Returns the new array of combined values.\n * @example\n *\n * _.unionBy([2.1, 1.2], [4.3, 2.4], Math.floor);\n * // => [2.1, 1.2, 4.3]\n *\n * // The `_.property` iteratee shorthand.\n * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }, { 'x': 2 }]\n */\nvar unionBy = rest(function(arrays) {\n  var iteratee = last(arrays);\n  if (isArrayLikeObject(iteratee)) {\n    iteratee = undefined;\n  }\n  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), baseIteratee(iteratee));\n});\n\nmodule.exports = unionBy;\n"]}