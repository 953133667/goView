{"version":3,"sources":["transform.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,cAAR,CAAhB;AAAA,IACI,aAAa,QAAQ,eAAR,CADjB;AAAA,IAEI,aAAa,QAAQ,eAAR,CAFjB;AAAA,IAGI,eAAe,QAAQ,iBAAR,CAHnB;AAAA,IAII,eAAe,QAAQ,iBAAR,CAJnB;AAAA,IAKI,UAAU,QAAQ,WAAR,CALd;AAAA,IAMI,aAAa,QAAQ,cAAR,CANjB;AAAA,IAOI,WAAW,QAAQ,YAAR,CAPf;AAAA,IAQI,eAAe,QAAQ,gBAAR,CARnB;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,SAAS,SAAT,CAAmB,MAAnB,EAA2B,QAA3B,EAAqC,WAArC,EAAkD;AAChD,MAAI,QAAQ,QAAQ,MAAR,KAAmB,aAAa,MAAb,CAA/B;AACA,aAAW,aAAa,QAAb,EAAuB,CAAvB,CAAX;;AAEA,MAAI,eAAe,IAAnB,EAAyB;AACvB,QAAI,SAAS,SAAS,MAAT,CAAb,EAA+B;AAC7B,UAAI,OAAO,OAAO,WAAlB;AACA,UAAI,KAAJ,EAAW;AACT,sBAAc,QAAQ,MAAR,IAAkB,IAAI,IAAJ,EAAlB,GAA6B,EAA3C;AACD,OAFD,MAEO;AACL,sBAAc,WAAW,IAAX,IAAmB,WAAW,aAAa,MAAb,CAAX,CAAnB,GAAsD,EAApE;AACD;AACF,KAPD,MAOO;AACL,oBAAc,EAAd;AACD;AACF;AACD,GAAC,QAAQ,SAAR,GAAoB,UAArB,EAAiC,MAAjC,EAAyC,UAAS,KAAT,EAAgB,KAAhB,EAAuB,MAAvB,EAA+B;AACtE,WAAO,SAAS,WAAT,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,MAApC,CAAP;AACD,GAFD;AAGA,SAAO,WAAP;AACD;;AAED,OAAO,OAAP,GAAiB,SAAjB","file":"transform-compiled.js","sourcesContent":["var arrayEach = require('./_arrayEach'),\n    baseCreate = require('./_baseCreate'),\n    baseForOwn = require('./_baseForOwn'),\n    baseIteratee = require('./_baseIteratee'),\n    getPrototype = require('./_getPrototype'),\n    isArray = require('./isArray'),\n    isFunction = require('./isFunction'),\n    isObject = require('./isObject'),\n    isTypedArray = require('./isTypedArray');\n\n/**\n * An alternative to `_.reduce`; this method transforms `object` to a new\n * `accumulator` object which is the result of running each of its own\n * enumerable string keyed properties thru `iteratee`, with each invocation\n * potentially mutating the `accumulator` object. The iteratee is invoked\n * with four arguments: (accumulator, value, key, object). Iteratee functions\n * may exit iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 1.3.0\n * @category Object\n * @param {Array|Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [accumulator] The custom accumulator value.\n * @returns {*} Returns the accumulated value.\n * @example\n *\n * _.transform([2, 3, 4], function(result, n) {\n *   result.push(n *= n);\n *   return n % 2 == 0;\n * }, []);\n * // => [4, 9]\n *\n * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n *   (result[value] || (result[value] = [])).push(key);\n * }, {});\n * // => { '1': ['a', 'c'], '2': ['b'] }\n */\nfunction transform(object, iteratee, accumulator) {\n  var isArr = isArray(object) || isTypedArray(object);\n  iteratee = baseIteratee(iteratee, 4);\n\n  if (accumulator == null) {\n    if (isArr || isObject(object)) {\n      var Ctor = object.constructor;\n      if (isArr) {\n        accumulator = isArray(object) ? new Ctor : [];\n      } else {\n        accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n      }\n    } else {\n      accumulator = {};\n    }\n  }\n  (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {\n    return iteratee(accumulator, value, index, object);\n  });\n  return accumulator;\n}\n\nmodule.exports = transform;\n"]}