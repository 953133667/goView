{"version":3,"sources":["isMatchWith.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,gBAAR,CAAlB;AAAA,IACI,eAAe,QAAQ,iBAAR,CADnB;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,SAAS,WAAT,CAAqB,MAArB,EAA6B,MAA7B,EAAqC,UAArC,EAAiD;AAC/C,eAAa,OAAO,UAAP,IAAqB,UAArB,GAAkC,UAAlC,GAA+C,SAA5D;AACA,SAAO,YAAY,MAAZ,EAAoB,MAApB,EAA4B,aAAa,MAAb,CAA5B,EAAkD,UAAlD,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,WAAjB","file":"isMatchWith-compiled.js","sourcesContent":["var baseIsMatch = require('./_baseIsMatch'),\n    getMatchData = require('./_getMatchData');\n\n/**\n * This method is like `_.isMatch` except that it accepts `customizer` which\n * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n * are handled by the method instead. The `customizer` is invoked with five\n * arguments: (objValue, srcValue, index|key, object, source).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n * @example\n *\n * function isGreeting(value) {\n *   return /^h(?:i|ello)$/.test(value);\n * }\n *\n * function customizer(objValue, srcValue) {\n *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n *     return true;\n *   }\n * }\n *\n * var object = { 'greeting': 'hello' };\n * var source = { 'greeting': 'hi' };\n *\n * _.isMatchWith(object, source, customizer);\n * // => true\n */\nfunction isMatchWith(object, source, customizer) {\n  customizer = typeof customizer == 'function' ? customizer : undefined;\n  return baseIsMatch(object, source, getMatchData(source), customizer);\n}\n\nmodule.exports = isMatchWith;\n"]}