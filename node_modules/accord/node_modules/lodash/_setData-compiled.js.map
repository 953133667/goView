{"version":3,"sources":["_setData.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,gBAAR,CAAlB;AAAA,IACI,MAAM,QAAQ,OAAR,CADV;;AAGA;AACA,IAAI,YAAY,GAAhB;AAAA,IACI,WAAW,EADf;;AAGA;;;;;;;;;;;;;;AAcA,IAAI,UAAW,YAAW;AACxB,MAAI,QAAQ,CAAZ;AAAA,MACI,aAAa,CADjB;;AAGA,SAAO,UAAS,GAAT,EAAc,KAAd,EAAqB;AAC1B,QAAI,QAAQ,KAAZ;AAAA,QACI,YAAY,YAAY,QAAQ,UAApB,CADhB;;AAGA,iBAAa,KAAb;AACA,QAAI,YAAY,CAAhB,EAAmB;AACjB,UAAI,EAAE,KAAF,IAAW,SAAf,EAA0B;AACxB,eAAO,GAAP;AACD;AACF,KAJD,MAIO;AACL,cAAQ,CAAR;AACD;AACD,WAAO,YAAY,GAAZ,EAAiB,KAAjB,CAAP;AACD,GAbD;AAcD,CAlBc,EAAf;;AAoBA,OAAO,OAAP,GAAiB,OAAjB","file":"_setData-compiled.js","sourcesContent":["var baseSetData = require('./_baseSetData'),\n    now = require('./now');\n\n/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 150,\n    HOT_SPAN = 16;\n\n/**\n * Sets metadata for `func`.\n *\n * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n * period of time, it will trip its breaker and transition to an identity\n * function to avoid garbage collection pauses in V8. See\n * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\n * for more details.\n *\n * @private\n * @param {Function} func The function to associate metadata with.\n * @param {*} data The metadata.\n * @returns {Function} Returns `func`.\n */\nvar setData = (function() {\n  var count = 0,\n      lastCalled = 0;\n\n  return function(key, value) {\n    var stamp = now(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return key;\n      }\n    } else {\n      count = 0;\n    }\n    return baseSetData(key, value);\n  };\n}());\n\nmodule.exports = setData;\n"]}