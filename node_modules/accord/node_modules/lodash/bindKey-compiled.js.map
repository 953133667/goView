{"version":3,"sources":["bindKey.js"],"names":[],"mappings":"AAAA,IAAI,gBAAgB,QAAQ,kBAAR,CAApB;AAAA,IACI,iBAAiB,QAAQ,mBAAR,CADrB;AAAA,IAEI,iBAAiB,QAAQ,mBAAR,CAFrB;AAAA,IAGI,OAAO,QAAQ,QAAR,CAHX;;AAKA;AACA,IAAI,YAAY,CAAhB;AAAA,IACI,gBAAgB,CADpB;AAAA,IAEI,eAAe,EAFnB;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA,IAAI,UAAU,KAAK,UAAS,MAAT,EAAiB,GAAjB,EAAsB,QAAtB,EAAgC;AACjD,QAAI,UAAU,YAAY,aAA1B;AACA,QAAI,SAAS,MAAb,EAAqB;AACnB,YAAI,UAAU,eAAe,QAAf,EAAyB,eAAe,OAAf,CAAzB,CAAd;AACA,mBAAW,YAAX;AACD;AACD,WAAO,cAAc,GAAd,EAAmB,OAAnB,EAA4B,MAA5B,EAAoC,QAApC,EAA8C,OAA9C,CAAP;AACD,CAPa,CAAd;;AASA;AACA,QAAQ,WAAR,GAAsB,EAAtB;;AAEA,OAAO,OAAP,GAAiB,OAAjB","file":"bindKey-compiled.js","sourcesContent":["var createWrapper = require('./_createWrapper'),\n    getPlaceholder = require('./_getPlaceholder'),\n    replaceHolders = require('./_replaceHolders'),\n    rest = require('./rest');\n\n/** Used to compose bitmasks for wrapper metadata. */\nvar BIND_FLAG = 1,\n    BIND_KEY_FLAG = 2,\n    PARTIAL_FLAG = 32;\n\n/**\n * Creates a function that invokes the method at `object[key]` with `partials`\n * prepended to the arguments it receives.\n *\n * This method differs from `_.bind` by allowing bound functions to reference\n * methods that may be redefined or don't yet exist. See\n * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n * for more details.\n *\n * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n * builds, may be used as a placeholder for partially applied arguments.\n *\n * @static\n * @memberOf _\n * @since 0.10.0\n * @category Function\n * @param {Object} object The object to invoke the method on.\n * @param {string} key The key of the method.\n * @param {...*} [partials] The arguments to be partially applied.\n * @returns {Function} Returns the new bound function.\n * @example\n *\n * var object = {\n *   'user': 'fred',\n *   'greet': function(greeting, punctuation) {\n *     return greeting + ' ' + this.user + punctuation;\n *   }\n * };\n *\n * var bound = _.bindKey(object, 'greet', 'hi');\n * bound('!');\n * // => 'hi fred!'\n *\n * object.greet = function(greeting, punctuation) {\n *   return greeting + 'ya ' + this.user + punctuation;\n * };\n *\n * bound('!');\n * // => 'hiya fred!'\n *\n * // Bound with placeholders.\n * var bound = _.bindKey(object, 'greet', _, '!');\n * bound('hi');\n * // => 'hiya fred!'\n */\nvar bindKey = rest(function(object, key, partials) {\n  var bitmask = BIND_FLAG | BIND_KEY_FLAG;\n  if (partials.length) {\n    var holders = replaceHolders(partials, getPlaceholder(bindKey));\n    bitmask |= PARTIAL_FLAG;\n  }\n  return createWrapper(key, bitmask, object, partials, holders);\n});\n\n// Assign default placeholders.\nbindKey.placeholder = {};\n\nmodule.exports = bindKey;\n"]}