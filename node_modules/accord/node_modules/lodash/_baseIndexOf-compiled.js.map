{"version":3,"sources":["_baseIndexOf.js"],"names":[],"mappings":"AAAA,IAAI,aAAa,QAAQ,eAAR,CAAjB;;AAEA;;;;;;;;;AASA,SAAS,WAAT,CAAqB,KAArB,EAA4B,KAA5B,EAAmC,SAAnC,EAA8C;AAC5C,MAAI,UAAU,KAAd,EAAqB;AACnB,WAAO,WAAW,KAAX,EAAkB,SAAlB,CAAP;AACD;AACD,MAAI,QAAQ,YAAY,CAAxB;AAAA,MACI,SAAS,MAAM,MADnB;;AAGA,SAAO,EAAE,KAAF,GAAU,MAAjB,EAAyB;AACvB,QAAI,MAAM,KAAN,MAAiB,KAArB,EAA4B;AAC1B,aAAO,KAAP;AACD;AACF;AACD,SAAO,CAAC,CAAR;AACD;;AAED,OAAO,OAAP,GAAiB,WAAjB","file":"_baseIndexOf-compiled.js","sourcesContent":["var indexOfNaN = require('./_indexOfNaN');\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to search.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  if (value !== value) {\n    return indexOfNaN(array, fromIndex);\n  }\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = baseIndexOf;\n"]}