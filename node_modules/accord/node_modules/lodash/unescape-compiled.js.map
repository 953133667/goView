{"version":3,"sources":["unescape.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,YAAR,CAAf;AAAA,IACI,mBAAmB,QAAQ,qBAAR,CADvB;;AAGA;AACA,IAAI,gBAAgB,+BAApB;AAAA,IACI,mBAAmB,OAAO,cAAc,MAArB,CADvB;;AAGA;;;;;;;;;;;;;;;;;;;AAmBA,SAAS,QAAT,CAAkB,MAAlB,EAA0B;AACxB,aAAS,SAAS,MAAT,CAAT;AACA,WAAQ,UAAU,iBAAiB,IAAjB,CAAsB,MAAtB,CAAX,GACH,OAAO,OAAP,CAAe,aAAf,EAA8B,gBAA9B,CADG,GAEH,MAFJ;AAGD;;AAED,OAAO,OAAP,GAAiB,QAAjB","file":"unescape-compiled.js","sourcesContent":["var toString = require('./toString'),\n    unescapeHtmlChar = require('./_unescapeHtmlChar');\n\n/** Used to match HTML entities and HTML characters. */\nvar reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,\n    reHasEscapedHtml = RegExp(reEscapedHtml.source);\n\n/**\n * The inverse of `_.escape`; this method converts the HTML entities\n * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to\n * their corresponding characters.\n *\n * **Note:** No other HTML entities are unescaped. To unescape additional\n * HTML entities use a third-party library like [_he_](https://mths.be/he).\n *\n * @static\n * @memberOf _\n * @since 0.6.0\n * @category String\n * @param {string} [string=''] The string to unescape.\n * @returns {string} Returns the unescaped string.\n * @example\n *\n * _.unescape('fred, barney, &amp; pebbles');\n * // => 'fred, barney, & pebbles'\n */\nfunction unescape(string) {\n  string = toString(string);\n  return (string && reHasEscapedHtml.test(string))\n    ? string.replace(reEscapedHtml, unescapeHtmlChar)\n    : string;\n}\n\nmodule.exports = unescape;\n"]}