{"version":3,"sources":["_baseSortedIndex.js"],"names":[],"mappings":"AAAA,IAAI,oBAAoB,QAAQ,sBAAR,CAAxB;AAAA,IACI,WAAW,QAAQ,YAAR,CADf;AAAA,IAEI,WAAW,QAAQ,YAAR,CAFf;;AAIA;AACA,IAAI,mBAAmB,UAAvB;AAAA,IACI,wBAAwB,qBAAqB,CADjD;;AAGA;;;;;;;;;;;;AAYA,SAAS,eAAT,CAAyB,KAAzB,EAAgC,KAAhC,EAAuC,UAAvC,EAAmD;AACjD,MAAI,MAAM,CAAV;AAAA,MACI,OAAO,QAAQ,MAAM,MAAd,GAAuB,GADlC;;AAGA,MAAI,OAAO,KAAP,IAAgB,QAAhB,IAA4B,UAAU,KAAtC,IAA+C,QAAQ,qBAA3D,EAAkF;AAChF,WAAO,MAAM,IAAb,EAAmB;AACjB,UAAI,MAAO,MAAM,IAAP,KAAiB,CAA3B;AAAA,UACI,WAAW,MAAM,GAAN,CADf;;AAGA,UAAI,aAAa,IAAb,IAAqB,CAAC,SAAS,QAAT,CAAtB,KACC,aAAc,YAAY,KAA1B,GAAoC,WAAW,KADhD,CAAJ,EAC6D;AAC3D,cAAM,MAAM,CAAZ;AACD,OAHD,MAGO;AACL,eAAO,GAAP;AACD;AACF;AACD,WAAO,IAAP;AACD;AACD,SAAO,kBAAkB,KAAlB,EAAyB,KAAzB,EAAgC,QAAhC,EAA0C,UAA1C,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,eAAjB","file":"_baseSortedIndex-compiled.js","sourcesContent":["var baseSortedIndexBy = require('./_baseSortedIndexBy'),\n    identity = require('./identity'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295,\n    HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n/**\n * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n * performs a binary search of `array` to determine the index at which `value`\n * should be inserted into `array` in order to maintain its sort order.\n *\n * @private\n * @param {Array} array The sorted array to inspect.\n * @param {*} value The value to evaluate.\n * @param {boolean} [retHighest] Specify returning the highest qualified index.\n * @returns {number} Returns the index at which `value` should be inserted\n *  into `array`.\n */\nfunction baseSortedIndex(array, value, retHighest) {\n  var low = 0,\n      high = array ? array.length : low;\n\n  if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n    while (low < high) {\n      var mid = (low + high) >>> 1,\n          computed = array[mid];\n\n      if (computed !== null && !isSymbol(computed) &&\n          (retHighest ? (computed <= value) : (computed < value))) {\n        low = mid + 1;\n      } else {\n        high = mid;\n      }\n    }\n    return high;\n  }\n  return baseSortedIndexBy(array, value, identity, retHighest);\n}\n\nmodule.exports = baseSortedIndex;\n"]}