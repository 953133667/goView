{"version":3,"sources":["_equalByTag.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,QAAQ,WAAR,CAAb;AAAA,IACI,aAAa,QAAQ,eAAR,CADjB;AAAA,IAEI,cAAc,QAAQ,gBAAR,CAFlB;AAAA,IAGI,aAAa,QAAQ,eAAR,CAHjB;AAAA,IAII,aAAa,QAAQ,eAAR,CAJjB;;AAMA;AACA,IAAI,yBAAyB,CAA7B;AAAA,IACI,uBAAuB,CAD3B;;AAGA;AACA,IAAI,UAAU,kBAAd;AAAA,IACI,UAAU,eADd;AAAA,IAEI,WAAW,gBAFf;AAAA,IAGI,SAAS,cAHb;AAAA,IAII,YAAY,iBAJhB;AAAA,IAKI,YAAY,iBALhB;AAAA,IAMI,SAAS,cANb;AAAA,IAOI,YAAY,iBAPhB;AAAA,IAQI,YAAY,iBARhB;;AAUA,IAAI,iBAAiB,sBAArB;AAAA,IACI,cAAc,mBADlB;;AAGA;AACA,IAAI,cAAc,SAAS,OAAO,SAAhB,GAA4B,SAA9C;AAAA,IACI,gBAAgB,cAAc,YAAY,OAA1B,GAAoC,SADxD;;AAGA;;;;;;;;;;;;;;;;;;AAkBA,SAAS,UAAT,CAAoB,MAApB,EAA4B,KAA5B,EAAmC,GAAnC,EAAwC,SAAxC,EAAmD,UAAnD,EAA+D,OAA/D,EAAwE,KAAxE,EAA+E;AAC7E,UAAQ,GAAR;AACE,SAAK,WAAL;AACE,UAAK,OAAO,UAAP,IAAqB,MAAM,UAA5B,IACC,OAAO,UAAP,IAAqB,MAAM,UADhC,EAC6C;AAC3C,eAAO,KAAP;AACD;AACD,eAAS,OAAO,MAAhB;AACA,cAAQ,MAAM,MAAd;;AAEF,SAAK,cAAL;AACE,UAAK,OAAO,UAAP,IAAqB,MAAM,UAA5B,IACA,CAAC,UAAU,IAAI,UAAJ,CAAe,MAAf,CAAV,EAAkC,IAAI,UAAJ,CAAe,KAAf,CAAlC,CADL,EAC+D;AAC7D,eAAO,KAAP;AACD;AACD,aAAO,IAAP;;AAEF,SAAK,OAAL;AACA,SAAK,OAAL;AACE;AACA;AACA;AACA,aAAO,CAAC,MAAD,IAAW,CAAC,KAAnB;;AAEF,SAAK,QAAL;AACE,aAAO,OAAO,IAAP,IAAe,MAAM,IAArB,IAA6B,OAAO,OAAP,IAAkB,MAAM,OAA5D;;AAEF,SAAK,SAAL;AACE;AACA,aAAQ,UAAU,CAAC,MAAZ,GAAsB,SAAS,CAAC,KAAhC,GAAwC,UAAU,CAAC,KAA1D;;AAEF,SAAK,SAAL;AACA,SAAK,SAAL;AACE;AACA;AACA;AACA,aAAO,UAAW,QAAQ,EAA1B;;AAEF,SAAK,MAAL;AACE,UAAI,UAAU,UAAd;;AAEF,SAAK,MAAL;AACE,UAAI,YAAY,UAAU,oBAA1B;AACA,kBAAY,UAAU,UAAtB;;AAEA,UAAI,OAAO,IAAP,IAAe,MAAM,IAArB,IAA6B,CAAC,SAAlC,EAA6C;AAC3C,eAAO,KAAP;AACD;AACD;AACA,UAAI,UAAU,MAAM,GAAN,CAAU,MAAV,CAAd;AACA,UAAI,OAAJ,EAAa;AACX,eAAO,WAAW,KAAlB;AACD;AACD,iBAAW,sBAAX;AACA,YAAM,GAAN,CAAU,MAAV,EAAkB,KAAlB;;AAEA;AACA,aAAO,YAAY,QAAQ,MAAR,CAAZ,EAA6B,QAAQ,KAAR,CAA7B,EAA6C,SAA7C,EAAwD,UAAxD,EAAoE,OAApE,EAA6E,KAA7E,CAAP;;AAEF,SAAK,SAAL;AACE,UAAI,aAAJ,EAAmB;AACjB,eAAO,cAAc,IAAd,CAAmB,MAAnB,KAA8B,cAAc,IAAd,CAAmB,KAAnB,CAArC;AACD;AA7DL;AA+DA,SAAO,KAAP;AACD;;AAED,OAAO,OAAP,GAAiB,UAAjB","file":"_equalByTag-compiled.js","sourcesContent":["var Symbol = require('./_Symbol'),\n    Uint8Array = require('./_Uint8Array'),\n    equalArrays = require('./_equalArrays'),\n    mapToArray = require('./_mapToArray'),\n    setToArray = require('./_setToArray');\n\n/** Used to compose bitmasks for comparison styles. */\nvar UNORDERED_COMPARE_FLAG = 1,\n    PARTIAL_COMPARE_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n      // Coerce dates and booleans to numbers, dates to milliseconds and\n      // booleans to `1` or `0` treating invalid dates coerced to `NaN` as\n      // not equal.\n      return +object == +other;\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case numberTag:\n      // Treat `NaN` vs. `NaN` as equal.\n      return (object != +object) ? other != +other : object == +other;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/6.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= UNORDERED_COMPARE_FLAG;\n      stack.set(object, other);\n\n      // Recursively compare objects (susceptible to call stack limits).\n      return equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nmodule.exports = equalByTag;\n"]}