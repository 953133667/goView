{"version":3,"sources":["find.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,aAAR,CAAf;AAAA,IACI,WAAW,QAAQ,aAAR,CADf;AAAA,IAEI,gBAAgB,QAAQ,kBAAR,CAFpB;AAAA,IAGI,eAAe,QAAQ,iBAAR,CAHnB;AAAA,IAII,UAAU,QAAQ,WAAR,CAJd;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,SAAS,IAAT,CAAc,UAAd,EAA0B,SAA1B,EAAqC;AACnC,cAAY,aAAa,SAAb,EAAwB,CAAxB,CAAZ;AACA,MAAI,QAAQ,UAAR,CAAJ,EAAyB;AACvB,QAAI,QAAQ,cAAc,UAAd,EAA0B,SAA1B,CAAZ;AACA,WAAO,QAAQ,CAAC,CAAT,GAAa,WAAW,KAAX,CAAb,GAAiC,SAAxC;AACD;AACD,SAAO,SAAS,UAAT,EAAqB,SAArB,EAAgC,QAAhC,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,IAAjB","file":"find-compiled.js","sourcesContent":["var baseEach = require('./_baseEach'),\n    baseFind = require('./_baseFind'),\n    baseFindIndex = require('./_baseFindIndex'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Iterates over elements of `collection`, returning the first element\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to search.\n * @param {Array|Function|Object|string} [predicate=_.identity]\n *  The function invoked per iteration.\n * @returns {*} Returns the matched element, else `undefined`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': true },\n *   { 'user': 'fred',    'age': 40, 'active': false },\n *   { 'user': 'pebbles', 'age': 1,  'active': true }\n * ];\n *\n * _.find(users, function(o) { return o.age < 40; });\n * // => object for 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.find(users, { 'age': 1, 'active': true });\n * // => object for 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.find(users, ['active', false]);\n * // => object for 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.find(users, 'active');\n * // => object for 'barney'\n */\nfunction find(collection, predicate) {\n  predicate = baseIteratee(predicate, 3);\n  if (isArray(collection)) {\n    var index = baseFindIndex(collection, predicate);\n    return index > -1 ? collection[index] : undefined;\n  }\n  return baseFind(collection, predicate, baseEach);\n}\n\nmodule.exports = find;\n"]}