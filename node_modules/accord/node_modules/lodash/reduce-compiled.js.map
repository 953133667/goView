{"version":3,"sources":["reduce.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,gBAAR,CAAlB;AAAA,IACI,WAAW,QAAQ,aAAR,CADf;AAAA,IAEI,eAAe,QAAQ,iBAAR,CAFnB;AAAA,IAGI,aAAa,QAAQ,eAAR,CAHjB;AAAA,IAII,UAAU,QAAQ,WAAR,CAJd;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,SAAS,MAAT,CAAgB,UAAhB,EAA4B,QAA5B,EAAsC,WAAtC,EAAmD;AACjD,QAAI,OAAO,QAAQ,UAAR,IAAsB,WAAtB,GAAoC,UAA/C;AAAA,QACI,YAAY,UAAU,MAAV,GAAmB,CADnC;;AAGA,WAAO,KAAK,UAAL,EAAiB,aAAa,QAAb,EAAuB,CAAvB,CAAjB,EAA4C,WAA5C,EAAyD,SAAzD,EAAoE,QAApE,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,MAAjB","file":"reduce-compiled.js","sourcesContent":["var arrayReduce = require('./_arrayReduce'),\n    baseEach = require('./_baseEach'),\n    baseIteratee = require('./_baseIteratee'),\n    baseReduce = require('./_baseReduce'),\n    isArray = require('./isArray');\n\n/**\n * Reduces `collection` to a value which is the accumulated result of running\n * each element in `collection` thru `iteratee`, where each successive\n * invocation is supplied the return value of the previous. If `accumulator`\n * is not given, the first element of `collection` is used as the initial\n * value. The iteratee is invoked with four arguments:\n * (accumulator, value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.reduce`, `_.reduceRight`, and `_.transform`.\n *\n * The guarded methods are:\n * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n * and `sortBy`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @returns {*} Returns the accumulated value.\n * @see _.reduceRight\n * @example\n *\n * _.reduce([1, 2], function(sum, n) {\n *   return sum + n;\n * }, 0);\n * // => 3\n *\n * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n *   (result[value] || (result[value] = [])).push(key);\n *   return result;\n * }, {});\n * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n */\nfunction reduce(collection, iteratee, accumulator) {\n  var func = isArray(collection) ? arrayReduce : baseReduce,\n      initAccum = arguments.length < 3;\n\n  return func(collection, baseIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n}\n\nmodule.exports = reduce;\n"]}