{"version":3,"sources":["inRange.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,gBAAR,CAAlB;AAAA,IACI,WAAW,QAAQ,YAAR,CADf;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,SAAS,OAAT,CAAiB,MAAjB,EAAyB,KAAzB,EAAgC,GAAhC,EAAqC;AACnC,UAAQ,SAAS,KAAT,KAAmB,CAA3B;AACA,MAAI,QAAQ,SAAZ,EAAuB;AACrB,UAAM,KAAN;AACA,YAAQ,CAAR;AACD,GAHD,MAGO;AACL,UAAM,SAAS,GAAT,KAAiB,CAAvB;AACD;AACD,WAAS,SAAS,MAAT,CAAT;AACA,SAAO,YAAY,MAAZ,EAAoB,KAApB,EAA2B,GAA3B,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,OAAjB","file":"inRange-compiled.js","sourcesContent":["var baseInRange = require('./_baseInRange'),\n    toNumber = require('./toNumber');\n\n/**\n * Checks if `n` is between `start` and up to, but not including, `end`. If\n * `end` is not specified, it's set to `start` with `start` then set to `0`.\n * If `start` is greater than `end` the params are swapped to support\n * negative ranges.\n *\n * @static\n * @memberOf _\n * @since 3.3.0\n * @category Number\n * @param {number} number The number to check.\n * @param {number} [start=0] The start of the range.\n * @param {number} end The end of the range.\n * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n * @see _.range, _.rangeRight\n * @example\n *\n * _.inRange(3, 2, 4);\n * // => true\n *\n * _.inRange(4, 8);\n * // => true\n *\n * _.inRange(4, 2);\n * // => false\n *\n * _.inRange(2, 2);\n * // => false\n *\n * _.inRange(1.2, 2);\n * // => true\n *\n * _.inRange(5.2, 4);\n * // => false\n *\n * _.inRange(-3, -2, -6);\n * // => true\n */\nfunction inRange(number, start, end) {\n  start = toNumber(start) || 0;\n  if (end === undefined) {\n    end = start;\n    start = 0;\n  } else {\n    end = toNumber(end) || 0;\n  }\n  number = toNumber(number);\n  return baseInRange(number, start, end);\n}\n\nmodule.exports = inRange;\n"]}