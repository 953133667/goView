{"version":3,"sources":["invokeMap.js"],"names":[],"mappings":"AAAA,IAAI,QAAQ,QAAQ,UAAR,CAAZ;AAAA,IACI,WAAW,QAAQ,aAAR,CADf;AAAA,IAEI,aAAa,QAAQ,eAAR,CAFjB;AAAA,IAGI,cAAc,QAAQ,eAAR,CAHlB;AAAA,IAII,QAAQ,QAAQ,UAAR,CAJZ;AAAA,IAKI,OAAO,QAAQ,QAAR,CALX;;AAOA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAI,YAAY,KAAK,UAAS,UAAT,EAAqB,IAArB,EAA2B,IAA3B,EAAiC;AACpD,QAAI,QAAQ,CAAC,CAAb;AAAA,QACI,SAAS,OAAO,IAAP,IAAe,UAD5B;AAAA,QAEI,SAAS,MAAM,IAAN,CAFb;AAAA,QAGI,SAAS,YAAY,UAAZ,IAA0B,MAAM,WAAW,MAAjB,CAA1B,GAAqD,EAHlE;;AAKA,aAAS,UAAT,EAAqB,UAAS,KAAT,EAAgB;AACnC,YAAI,OAAO,SAAS,IAAT,GAAkB,UAAU,SAAS,IAApB,GAA4B,MAAM,IAAN,CAA5B,GAA0C,SAAtE;AACA,eAAO,EAAE,KAAT,IAAkB,OAAO,MAAM,IAAN,EAAY,KAAZ,EAAmB,IAAnB,CAAP,GAAkC,WAAW,KAAX,EAAkB,IAAlB,EAAwB,IAAxB,CAApD;AACD,KAHD;AAIA,WAAO,MAAP;AACD,CAXe,CAAhB;;AAaA,OAAO,OAAP,GAAiB,SAAjB","file":"invokeMap-compiled.js","sourcesContent":["var apply = require('./_apply'),\n    baseEach = require('./_baseEach'),\n    baseInvoke = require('./_baseInvoke'),\n    isArrayLike = require('./isArrayLike'),\n    isKey = require('./_isKey'),\n    rest = require('./rest');\n\n/**\n * Invokes the method at `path` of each element in `collection`, returning\n * an array of the results of each invoked method. Any additional arguments\n * are provided to each invoked method. If `methodName` is a function, it's\n * invoked for and `this` bound to, each element in `collection`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array|Function|string} path The path of the method to invoke or\n *  the function invoked per iteration.\n * @param {...*} [args] The arguments to invoke each method with.\n * @returns {Array} Returns the array of results.\n * @example\n *\n * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n * // => [[1, 5, 7], [1, 2, 3]]\n *\n * _.invokeMap([123, 456], String.prototype.split, '');\n * // => [['1', '2', '3'], ['4', '5', '6']]\n */\nvar invokeMap = rest(function(collection, path, args) {\n  var index = -1,\n      isFunc = typeof path == 'function',\n      isProp = isKey(path),\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value) {\n    var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);\n    result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);\n  });\n  return result;\n});\n\nmodule.exports = invokeMap;\n"]}