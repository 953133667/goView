{"version":3,"sources":["_createCtorWrapper.js"],"names":[],"mappings":"AAAA,IAAI,aAAa,QAAQ,eAAR,CAAjB;AAAA,IACI,WAAW,QAAQ,YAAR,CADf;;AAGA;;;;;;;;AAQA,SAAS,iBAAT,CAA2B,IAA3B,EAAiC;AAC/B,SAAO,YAAW;AAChB;AACA;AACA;AACA,QAAI,OAAO,SAAX;AACA,YAAQ,KAAK,MAAb;AACE,WAAK,CAAL;AAAQ,eAAO,IAAI,IAAJ,EAAP;AACR,WAAK,CAAL;AAAQ,eAAO,IAAI,IAAJ,CAAS,KAAK,CAAL,CAAT,CAAP;AACR,WAAK,CAAL;AAAQ,eAAO,IAAI,IAAJ,CAAS,KAAK,CAAL,CAAT,EAAkB,KAAK,CAAL,CAAlB,CAAP;AACR,WAAK,CAAL;AAAQ,eAAO,IAAI,IAAJ,CAAS,KAAK,CAAL,CAAT,EAAkB,KAAK,CAAL,CAAlB,EAA2B,KAAK,CAAL,CAA3B,CAAP;AACR,WAAK,CAAL;AAAQ,eAAO,IAAI,IAAJ,CAAS,KAAK,CAAL,CAAT,EAAkB,KAAK,CAAL,CAAlB,EAA2B,KAAK,CAAL,CAA3B,EAAoC,KAAK,CAAL,CAApC,CAAP;AACR,WAAK,CAAL;AAAQ,eAAO,IAAI,IAAJ,CAAS,KAAK,CAAL,CAAT,EAAkB,KAAK,CAAL,CAAlB,EAA2B,KAAK,CAAL,CAA3B,EAAoC,KAAK,CAAL,CAApC,EAA6C,KAAK,CAAL,CAA7C,CAAP;AACR,WAAK,CAAL;AAAQ,eAAO,IAAI,IAAJ,CAAS,KAAK,CAAL,CAAT,EAAkB,KAAK,CAAL,CAAlB,EAA2B,KAAK,CAAL,CAA3B,EAAoC,KAAK,CAAL,CAApC,EAA6C,KAAK,CAAL,CAA7C,EAAsD,KAAK,CAAL,CAAtD,CAAP;AACR,WAAK,CAAL;AAAQ,eAAO,IAAI,IAAJ,CAAS,KAAK,CAAL,CAAT,EAAkB,KAAK,CAAL,CAAlB,EAA2B,KAAK,CAAL,CAA3B,EAAoC,KAAK,CAAL,CAApC,EAA6C,KAAK,CAAL,CAA7C,EAAsD,KAAK,CAAL,CAAtD,EAA+D,KAAK,CAAL,CAA/D,CAAP;AARV;AAUA,QAAI,cAAc,WAAW,KAAK,SAAhB,CAAlB;AAAA,QACI,SAAS,KAAK,KAAL,CAAW,WAAX,EAAwB,IAAxB,CADb;;AAGA;AACA;AACA,WAAO,SAAS,MAAT,IAAmB,MAAnB,GAA4B,WAAnC;AACD,GArBD;AAsBD;;AAED,OAAO,OAAP,GAAiB,iBAAjB","file":"_createCtorWrapper-compiled.js","sourcesContent":["var baseCreate = require('./_baseCreate'),\n    isObject = require('./isObject');\n\n/**\n * Creates a function that produces an instance of `Ctor` regardless of\n * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n *\n * @private\n * @param {Function} Ctor The constructor to wrap.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createCtorWrapper(Ctor) {\n  return function() {\n    // Use a `switch` statement to work with class constructors. See\n    // http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n    // for more details.\n    var args = arguments;\n    switch (args.length) {\n      case 0: return new Ctor;\n      case 1: return new Ctor(args[0]);\n      case 2: return new Ctor(args[0], args[1]);\n      case 3: return new Ctor(args[0], args[1], args[2]);\n      case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n      case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n      case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n      case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n    }\n    var thisBinding = baseCreate(Ctor.prototype),\n        result = Ctor.apply(thisBinding, args);\n\n    // Mimic the constructor's `return` behavior.\n    // See https://es5.github.io/#x13.2.2 for more details.\n    return isObject(result) ? result : thisBinding;\n  };\n}\n\nmodule.exports = createCtorWrapper;\n"]}