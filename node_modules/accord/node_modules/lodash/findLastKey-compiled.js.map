{"version":3,"sources":["findLastKey.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,aAAR,CAAf;AAAA,IACI,kBAAkB,QAAQ,oBAAR,CADtB;AAAA,IAEI,eAAe,QAAQ,iBAAR,CAFnB;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,SAAS,WAAT,CAAqB,MAArB,EAA6B,SAA7B,EAAwC;AACtC,SAAO,SAAS,MAAT,EAAiB,aAAa,SAAb,EAAwB,CAAxB,CAAjB,EAA6C,eAA7C,EAA8D,IAA9D,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,WAAjB","file":"findLastKey-compiled.js","sourcesContent":["var baseFind = require('./_baseFind'),\n    baseForOwnRight = require('./_baseForOwnRight'),\n    baseIteratee = require('./_baseIteratee');\n\n/**\n * This method is like `_.findKey` except that it iterates over elements of\n * a collection in the opposite order.\n *\n * @static\n * @memberOf _\n * @since 2.0.0\n * @category Object\n * @param {Object} object The object to search.\n * @param {Array|Function|Object|string} [predicate=_.identity]\n *  The function invoked per iteration.\n * @returns {string|undefined} Returns the key of the matched element,\n *  else `undefined`.\n * @example\n *\n * var users = {\n *   'barney':  { 'age': 36, 'active': true },\n *   'fred':    { 'age': 40, 'active': false },\n *   'pebbles': { 'age': 1,  'active': true }\n * };\n *\n * _.findLastKey(users, function(o) { return o.age < 40; });\n * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.findLastKey(users, { 'age': 36, 'active': true });\n * // => 'barney'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findLastKey(users, ['active', false]);\n * // => 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.findLastKey(users, 'active');\n * // => 'pebbles'\n */\nfunction findLastKey(object, predicate) {\n  return baseFind(object, baseIteratee(predicate, 3), baseForOwnRight, true);\n}\n\nmodule.exports = findLastKey;\n"]}