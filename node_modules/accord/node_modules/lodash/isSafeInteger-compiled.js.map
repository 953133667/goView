{"version":3,"sources":["isSafeInteger.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,aAAR,CAAhB;;AAEA;AACA,IAAI,mBAAmB,gBAAvB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,SAAS,aAAT,CAAuB,KAAvB,EAA8B;AAC5B,SAAO,UAAU,KAAV,KAAoB,SAAS,CAAC,gBAA9B,IAAkD,SAAS,gBAAlE;AACD;;AAED,OAAO,OAAP,GAAiB,aAAjB","file":"isSafeInteger-compiled.js","sourcesContent":["var isInteger = require('./isInteger');\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n * double precision number which isn't the result of a rounded unsafe integer.\n *\n * **Note:** This method is based on\n * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a safe integer,\n *  else `false`.\n * @example\n *\n * _.isSafeInteger(3);\n * // => true\n *\n * _.isSafeInteger(Number.MIN_VALUE);\n * // => false\n *\n * _.isSafeInteger(Infinity);\n * // => false\n *\n * _.isSafeInteger('3');\n * // => false\n */\nfunction isSafeInteger(value) {\n  return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isSafeInteger;\n"]}