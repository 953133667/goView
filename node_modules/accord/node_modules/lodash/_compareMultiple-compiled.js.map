{"version":3,"sources":["_compareMultiple.js"],"names":[],"mappings":"AAAA,IAAI,mBAAmB,QAAQ,qBAAR,CAAvB;;AAEA;;;;;;;;;;;;;;AAcA,SAAS,eAAT,CAAyB,MAAzB,EAAiC,KAAjC,EAAwC,MAAxC,EAAgD;AAC9C,MAAI,QAAQ,CAAC,CAAb;AAAA,MACI,cAAc,OAAO,QADzB;AAAA,MAEI,cAAc,MAAM,QAFxB;AAAA,MAGI,SAAS,YAAY,MAHzB;AAAA,MAII,eAAe,OAAO,MAJ1B;;AAMA,SAAO,EAAE,KAAF,GAAU,MAAjB,EAAyB;AACvB,QAAI,SAAS,iBAAiB,YAAY,KAAZ,CAAjB,EAAqC,YAAY,KAAZ,CAArC,CAAb;AACA,QAAI,MAAJ,EAAY;AACV,UAAI,SAAS,YAAb,EAA2B;AACzB,eAAO,MAAP;AACD;AACD,UAAI,QAAQ,OAAO,KAAP,CAAZ;AACA,aAAO,UAAU,SAAS,MAAT,GAAkB,CAAC,CAAnB,GAAuB,CAAjC,CAAP;AACD;AACF;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAO,OAAO,KAAP,GAAe,MAAM,KAA5B;AACD;;AAED,OAAO,OAAP,GAAiB,eAAjB","file":"_compareMultiple-compiled.js","sourcesContent":["var compareAscending = require('./_compareAscending');\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nmodule.exports = compareMultiple;\n"]}