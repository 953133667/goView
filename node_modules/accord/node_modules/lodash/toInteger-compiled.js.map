{"version":3,"sources":["toInteger.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,YAAR,CAAf;;AAEA;AACA,IAAI,WAAW,IAAI,CAAnB;AAAA,IACI,cAAc,uBADlB;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,SAAS,SAAT,CAAmB,KAAnB,EAA0B;AACxB,MAAI,CAAC,KAAL,EAAY;AACV,WAAO,UAAU,CAAV,GAAc,KAAd,GAAsB,CAA7B;AACD;AACD,UAAQ,SAAS,KAAT,CAAR;AACA,MAAI,UAAU,QAAV,IAAsB,UAAU,CAAC,QAArC,EAA+C;AAC7C,QAAI,OAAQ,QAAQ,CAAR,GAAY,CAAC,CAAb,GAAiB,CAA7B;AACA,WAAO,OAAO,WAAd;AACD;AACD,MAAI,YAAY,QAAQ,CAAxB;AACA,SAAO,UAAU,KAAV,GAAmB,YAAY,QAAQ,SAApB,GAAgC,KAAnD,GAA4D,CAAnE;AACD;;AAED,OAAO,OAAP,GAAiB,SAAjB","file":"toInteger-compiled.js","sourcesContent":["var toNumber = require('./toNumber');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This function is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3');\n * // => 3\n */\nfunction toInteger(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  var remainder = value % 1;\n  return value === value ? (remainder ? value - remainder : value) : 0;\n}\n\nmodule.exports = toInteger;\n"]}