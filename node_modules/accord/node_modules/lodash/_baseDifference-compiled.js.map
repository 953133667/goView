{"version":3,"sources":["_baseDifference.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,aAAR,CAAf;AAAA,IACI,gBAAgB,QAAQ,kBAAR,CADpB;AAAA,IAEI,oBAAoB,QAAQ,sBAAR,CAFxB;AAAA,IAGI,WAAW,QAAQ,aAAR,CAHf;AAAA,IAII,YAAY,QAAQ,cAAR,CAJhB;AAAA,IAKI,WAAW,QAAQ,aAAR,CALf;;AAOA;AACA,IAAI,mBAAmB,GAAvB;;AAEA;;;;;;;;;;;AAWA,SAAS,cAAT,CAAwB,KAAxB,EAA+B,MAA/B,EAAuC,QAAvC,EAAiD,UAAjD,EAA6D;AAC3D,MAAI,QAAQ,CAAC,CAAb;AAAA,MACI,WAAW,aADf;AAAA,MAEI,WAAW,IAFf;AAAA,MAGI,SAAS,MAAM,MAHnB;AAAA,MAII,SAAS,EAJb;AAAA,MAKI,eAAe,OAAO,MAL1B;;AAOA,MAAI,CAAC,MAAL,EAAa;AACX,WAAO,MAAP;AACD;AACD,MAAI,QAAJ,EAAc;AACZ,aAAS,SAAS,MAAT,EAAiB,UAAU,QAAV,CAAjB,CAAT;AACD;AACD,MAAI,UAAJ,EAAgB;AACd,eAAW,iBAAX;AACA,eAAW,KAAX;AACD,GAHD,MAIK,IAAI,OAAO,MAAP,IAAiB,gBAArB,EAAuC;AAC1C,eAAW,QAAX;AACA,eAAW,KAAX;AACA,aAAS,IAAI,QAAJ,CAAa,MAAb,CAAT;AACD;AACD,SACA,OAAO,EAAE,KAAF,GAAU,MAAjB,EAAyB;AACvB,QAAI,QAAQ,MAAM,KAAN,CAAZ;AAAA,QACI,WAAW,WAAW,SAAS,KAAT,CAAX,GAA6B,KAD5C;;AAGA,YAAS,cAAc,UAAU,CAAzB,GAA8B,KAA9B,GAAsC,CAA9C;AACA,QAAI,YAAY,aAAa,QAA7B,EAAuC;AACrC,UAAI,cAAc,YAAlB;AACA,aAAO,aAAP,EAAsB;AACpB,YAAI,OAAO,WAAP,MAAwB,QAA5B,EAAsC;AACpC,mBAAS,KAAT;AACD;AACF;AACD,aAAO,IAAP,CAAY,KAAZ;AACD,KARD,MASK,IAAI,CAAC,SAAS,MAAT,EAAiB,QAAjB,EAA2B,UAA3B,CAAL,EAA6C;AAChD,aAAO,IAAP,CAAY,KAAZ;AACD;AACF;AACD,SAAO,MAAP;AACD;;AAED,OAAO,OAAP,GAAiB,cAAjB","file":"_baseDifference-compiled.js","sourcesContent":["var SetCache = require('./_SetCache'),\n    arrayIncludes = require('./_arrayIncludes'),\n    arrayIncludesWith = require('./_arrayIncludesWith'),\n    arrayMap = require('./_arrayMap'),\n    baseUnary = require('./_baseUnary'),\n    cacheHas = require('./_cacheHas');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseDifference;\n"]}