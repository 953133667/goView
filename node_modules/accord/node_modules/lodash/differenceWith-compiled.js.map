{"version":3,"sources":["differenceWith.js"],"names":[],"mappings":"AAAA,IAAI,iBAAiB,QAAQ,mBAAR,CAArB;AAAA,IACI,cAAc,QAAQ,gBAAR,CADlB;AAAA,IAEI,oBAAoB,QAAQ,qBAAR,CAFxB;AAAA,IAGI,OAAO,QAAQ,QAAR,CAHX;AAAA,IAII,OAAO,QAAQ,QAAR,CAJX;;AAMA;;;;;;;;;;;;;;;;;;;;;AAqBA,IAAI,iBAAiB,KAAK,UAAS,KAAT,EAAgB,MAAhB,EAAwB;AAChD,MAAI,aAAa,KAAK,MAAL,CAAjB;AACA,MAAI,kBAAkB,UAAlB,CAAJ,EAAmC;AACjC,iBAAa,SAAb;AACD;AACD,SAAO,kBAAkB,KAAlB,IACH,eAAe,KAAf,EAAsB,YAAY,MAAZ,EAAoB,CAApB,EAAuB,iBAAvB,EAA0C,IAA1C,CAAtB,EAAuE,SAAvE,EAAkF,UAAlF,CADG,GAEH,EAFJ;AAGD,CARoB,CAArB;;AAUA,OAAO,OAAP,GAAiB,cAAjB","file":"differenceWith-compiled.js","sourcesContent":["var baseDifference = require('./_baseDifference'),\n    baseFlatten = require('./_baseFlatten'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    last = require('./last'),\n    rest = require('./rest');\n\n/**\n * This method is like `_.difference` except that it accepts `comparator`\n * which is invoked to compare elements of `array` to `values`. Result values\n * are chosen from the first array. The comparator is invoked with two arguments:\n * (arrVal, othVal).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n *\n * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n * // => [{ 'x': 2, 'y': 1 }]\n */\nvar differenceWith = rest(function(array, values) {\n  var comparator = last(values);\n  if (isArrayLikeObject(comparator)) {\n    comparator = undefined;\n  }\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n    : [];\n});\n\nmodule.exports = differenceWith;\n"]}