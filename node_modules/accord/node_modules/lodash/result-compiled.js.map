{"version":3,"sources":["result.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,aAAR,CAAf;AAAA,IACI,aAAa,QAAQ,cAAR,CADjB;AAAA,IAEI,QAAQ,QAAQ,UAAR,CAFZ;AAAA,IAGI,QAAQ,QAAQ,UAAR,CAHZ;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,SAAS,MAAT,CAAgB,MAAhB,EAAwB,IAAxB,EAA8B,YAA9B,EAA4C;AAC1C,SAAO,MAAM,IAAN,EAAY,MAAZ,IAAsB,CAAC,IAAD,CAAtB,GAA+B,SAAS,IAAT,CAAtC;;AAEA,MAAI,QAAQ,CAAC,CAAb;AAAA,MACI,SAAS,KAAK,MADlB;;AAGA;AACA,MAAI,CAAC,MAAL,EAAa;AACX,aAAS,SAAT;AACA,aAAS,CAAT;AACD;AACD,SAAO,EAAE,KAAF,GAAU,MAAjB,EAAyB;AACvB,QAAI,QAAQ,UAAU,IAAV,GAAiB,SAAjB,GAA6B,OAAO,MAAM,KAAK,KAAL,CAAN,CAAP,CAAzC;AACA,QAAI,UAAU,SAAd,EAAyB;AACvB,cAAQ,MAAR;AACA,cAAQ,YAAR;AACD;AACD,aAAS,WAAW,KAAX,IAAoB,MAAM,IAAN,CAAW,MAAX,CAApB,GAAyC,KAAlD;AACD;AACD,SAAO,MAAP;AACD;;AAED,OAAO,OAAP,GAAiB,MAAjB","file":"result-compiled.js","sourcesContent":["var castPath = require('./_castPath'),\n    isFunction = require('./isFunction'),\n    isKey = require('./_isKey'),\n    toKey = require('./_toKey');\n\n/**\n * This method is like `_.get` except that if the resolved value is a\n * function it's invoked with the `this` binding of its parent object and\n * its result is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to resolve.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n *\n * _.result(object, 'a[0].b.c1');\n * // => 3\n *\n * _.result(object, 'a[0].b.c2');\n * // => 4\n *\n * _.result(object, 'a[0].b.c3', 'default');\n * // => 'default'\n *\n * _.result(object, 'a[0].b.c3', _.constant('default'));\n * // => 'default'\n */\nfunction result(object, path, defaultValue) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = -1,\n      length = path.length;\n\n  // Ensure the loop is entered when path is empty.\n  if (!length) {\n    object = undefined;\n    length = 1;\n  }\n  while (++index < length) {\n    var value = object == null ? undefined : object[toKey(path[index])];\n    if (value === undefined) {\n      index = length;\n      value = defaultValue;\n    }\n    object = isFunction(value) ? value.call(object) : value;\n  }\n  return object;\n}\n\nmodule.exports = result;\n"]}