{"version":3,"sources":["truncate.js"],"names":[],"mappings":"AAAA,IAAI,eAAe,QAAQ,iBAAR,CAAnB;AAAA,IACI,YAAY,QAAQ,cAAR,CADhB;AAAA,IAEI,WAAW,QAAQ,YAAR,CAFf;AAAA,IAGI,WAAW,QAAQ,YAAR,CAHf;AAAA,IAII,qBAAqB,QAAQ,uBAAR,CAJzB;AAAA,IAKI,aAAa,QAAQ,eAAR,CALjB;AAAA,IAMI,gBAAgB,QAAQ,kBAAR,CANpB;AAAA,IAOI,YAAY,QAAQ,aAAR,CAPhB;AAAA,IAQI,WAAW,QAAQ,YAAR,CARf;;AAUA;AACA,IAAI,uBAAuB,EAA3B;AAAA,IACI,yBAAyB,KAD7B;;AAGA;AACA,IAAI,UAAU,MAAd;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,SAAS,QAAT,CAAkB,MAAlB,EAA0B,OAA1B,EAAmC;AACjC,MAAI,SAAS,oBAAb;AAAA,MACI,WAAW,sBADf;;AAGA,MAAI,SAAS,OAAT,CAAJ,EAAuB;AACrB,QAAI,YAAY,eAAe,OAAf,GAAyB,QAAQ,SAAjC,GAA6C,SAA7D;AACA,aAAS,YAAY,OAAZ,GAAsB,UAAU,QAAQ,MAAlB,CAAtB,GAAkD,MAA3D;AACA,eAAW,cAAc,OAAd,GAAwB,aAAa,QAAQ,QAArB,CAAxB,GAAyD,QAApE;AACD;AACD,WAAS,SAAS,MAAT,CAAT;;AAEA,MAAI,YAAY,OAAO,MAAvB;AACA,MAAI,mBAAmB,IAAnB,CAAwB,MAAxB,CAAJ,EAAqC;AACnC,QAAI,aAAa,cAAc,MAAd,CAAjB;AACA,gBAAY,WAAW,MAAvB;AACD;AACD,MAAI,UAAU,SAAd,EAAyB;AACvB,WAAO,MAAP;AACD;AACD,MAAI,MAAM,SAAS,WAAW,QAAX,CAAnB;AACA,MAAI,MAAM,CAAV,EAAa;AACX,WAAO,QAAP;AACD;AACD,MAAI,SAAS,aACT,UAAU,UAAV,EAAsB,CAAtB,EAAyB,GAAzB,EAA8B,IAA9B,CAAmC,EAAnC,CADS,GAET,OAAO,KAAP,CAAa,CAAb,EAAgB,GAAhB,CAFJ;;AAIA,MAAI,cAAc,SAAlB,EAA6B;AAC3B,WAAO,SAAS,QAAhB;AACD;AACD,MAAI,UAAJ,EAAgB;AACd,WAAQ,OAAO,MAAP,GAAgB,GAAxB;AACD;AACD,MAAI,SAAS,SAAT,CAAJ,EAAyB;AACvB,QAAI,OAAO,KAAP,CAAa,GAAb,EAAkB,MAAlB,CAAyB,SAAzB,CAAJ,EAAyC;AACvC,UAAI,KAAJ;AAAA,UACI,YAAY,MADhB;;AAGA,UAAI,CAAC,UAAU,MAAf,EAAuB;AACrB,oBAAY,OAAO,UAAU,MAAjB,EAAyB,SAAS,QAAQ,IAAR,CAAa,SAAb,CAAT,IAAoC,GAA7D,CAAZ;AACD;AACD,gBAAU,SAAV,GAAsB,CAAtB;AACA,aAAQ,QAAQ,UAAU,IAAV,CAAe,SAAf,CAAhB,EAA4C;AAC1C,YAAI,SAAS,MAAM,KAAnB;AACD;AACD,eAAS,OAAO,KAAP,CAAa,CAAb,EAAgB,WAAW,SAAX,GAAuB,GAAvB,GAA6B,MAA7C,CAAT;AACD;AACF,GAdD,MAcO,IAAI,OAAO,OAAP,CAAe,aAAa,SAAb,CAAf,EAAwC,GAAxC,KAAgD,GAApD,EAAyD;AAC9D,QAAI,QAAQ,OAAO,WAAP,CAAmB,SAAnB,CAAZ;AACA,QAAI,QAAQ,CAAC,CAAb,EAAgB;AACd,eAAS,OAAO,KAAP,CAAa,CAAb,EAAgB,KAAhB,CAAT;AACD;AACF;AACD,SAAO,SAAS,QAAhB;AACD;;AAED,OAAO,OAAP,GAAiB,QAAjB","file":"truncate-compiled.js","sourcesContent":["var baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    isObject = require('./isObject'),\n    isRegExp = require('./isRegExp'),\n    reHasComplexSymbol = require('./_reHasComplexSymbol'),\n    stringSize = require('./_stringSize'),\n    stringToArray = require('./_stringToArray'),\n    toInteger = require('./toInteger'),\n    toString = require('./toString');\n\n/** Used as default options for `_.truncate`. */\nvar DEFAULT_TRUNC_LENGTH = 30,\n    DEFAULT_TRUNC_OMISSION = '...';\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Truncates `string` if it's longer than the given maximum string length.\n * The last characters of the truncated string are replaced with the omission\n * string which defaults to \"...\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to truncate.\n * @param {Object} [options={}] The options object.\n * @param {number} [options.length=30] The maximum string length.\n * @param {string} [options.omission='...'] The string to indicate text is omitted.\n * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n * @returns {string} Returns the truncated string.\n * @example\n *\n * _.truncate('hi-diddly-ho there, neighborino');\n * // => 'hi-diddly-ho there, neighbo...'\n *\n * _.truncate('hi-diddly-ho there, neighborino', {\n *   'length': 24,\n *   'separator': ' '\n * });\n * // => 'hi-diddly-ho there,...'\n *\n * _.truncate('hi-diddly-ho there, neighborino', {\n *   'length': 24,\n *   'separator': /,? +/\n * });\n * // => 'hi-diddly-ho there...'\n *\n * _.truncate('hi-diddly-ho there, neighborino', {\n *   'omission': ' [...]'\n * });\n * // => 'hi-diddly-ho there, neig [...]'\n */\nfunction truncate(string, options) {\n  var length = DEFAULT_TRUNC_LENGTH,\n      omission = DEFAULT_TRUNC_OMISSION;\n\n  if (isObject(options)) {\n    var separator = 'separator' in options ? options.separator : separator;\n    length = 'length' in options ? toInteger(options.length) : length;\n    omission = 'omission' in options ? baseToString(options.omission) : omission;\n  }\n  string = toString(string);\n\n  var strLength = string.length;\n  if (reHasComplexSymbol.test(string)) {\n    var strSymbols = stringToArray(string);\n    strLength = strSymbols.length;\n  }\n  if (length >= strLength) {\n    return string;\n  }\n  var end = length - stringSize(omission);\n  if (end < 1) {\n    return omission;\n  }\n  var result = strSymbols\n    ? castSlice(strSymbols, 0, end).join('')\n    : string.slice(0, end);\n\n  if (separator === undefined) {\n    return result + omission;\n  }\n  if (strSymbols) {\n    end += (result.length - end);\n  }\n  if (isRegExp(separator)) {\n    if (string.slice(end).search(separator)) {\n      var match,\n          substring = result;\n\n      if (!separator.global) {\n        separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n      }\n      separator.lastIndex = 0;\n      while ((match = separator.exec(substring))) {\n        var newEnd = match.index;\n      }\n      result = result.slice(0, newEnd === undefined ? end : newEnd);\n    }\n  } else if (string.indexOf(baseToString(separator), end) != end) {\n    var index = result.lastIndexOf(separator);\n    if (index > -1) {\n      result = result.slice(0, index);\n    }\n  }\n  return result + omission;\n}\n\nmodule.exports = truncate;\n"]}