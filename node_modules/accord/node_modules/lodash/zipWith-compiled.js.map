{"version":3,"sources":["zipWith.js"],"names":[],"mappings":"AAAA,IAAI,OAAO,QAAQ,QAAR,CAAX;AAAA,IACI,YAAY,QAAQ,aAAR,CADhB;;AAGA;;;;;;;;;;;;;;;;;;;AAmBA,IAAI,UAAU,KAAK,UAAS,MAAT,EAAiB;AAClC,QAAI,SAAS,OAAO,MAApB;AAAA,QACI,WAAW,SAAS,CAAT,GAAa,OAAO,SAAS,CAAhB,CAAb,GAAkC,SADjD;;AAGA,eAAW,OAAO,QAAP,IAAmB,UAAnB,IAAiC,OAAO,GAAP,IAAc,QAA/C,IAA2D,SAAtE;AACA,WAAO,UAAU,MAAV,EAAkB,QAAlB,CAAP;AACD,CANa,CAAd;;AAQA,OAAO,OAAP,GAAiB,OAAjB","file":"zipWith-compiled.js","sourcesContent":["var rest = require('./rest'),\n    unzipWith = require('./unzipWith');\n\n/**\n * This method is like `_.zip` except that it accepts `iteratee` to specify\n * how grouped values should be combined. The iteratee is invoked with the\n * elements of each group: (...group).\n *\n * @static\n * @memberOf _\n * @since 3.8.0\n * @category Array\n * @param {...Array} [arrays] The arrays to process.\n * @param {Function} [iteratee=_.identity] The function to combine grouped values.\n * @returns {Array} Returns the new array of grouped elements.\n * @example\n *\n * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n *   return a + b + c;\n * });\n * // => [111, 222]\n */\nvar zipWith = rest(function(arrays) {\n  var length = arrays.length,\n      iteratee = length > 1 ? arrays[length - 1] : undefined;\n\n  iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n  return unzipWith(arrays, iteratee);\n});\n\nmodule.exports = zipWith;\n"]}