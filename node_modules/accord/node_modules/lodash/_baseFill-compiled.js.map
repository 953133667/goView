{"version":3,"sources":["_baseFill.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,aAAR,CAAhB;AAAA,IACI,WAAW,QAAQ,YAAR,CADf;;AAGA;;;;;;;;;;AAUA,SAAS,QAAT,CAAkB,KAAlB,EAAyB,KAAzB,EAAgC,KAAhC,EAAuC,GAAvC,EAA4C;AAC1C,MAAI,SAAS,MAAM,MAAnB;;AAEA,UAAQ,UAAU,KAAV,CAAR;AACA,MAAI,QAAQ,CAAZ,EAAe;AACb,YAAQ,CAAC,KAAD,GAAS,MAAT,GAAkB,CAAlB,GAAuB,SAAS,KAAxC;AACD;AACD,QAAO,QAAQ,SAAR,IAAqB,MAAM,MAA5B,GAAsC,MAAtC,GAA+C,UAAU,GAAV,CAArD;AACA,MAAI,MAAM,CAAV,EAAa;AACX,WAAO,MAAP;AACD;AACD,QAAM,QAAQ,GAAR,GAAc,CAAd,GAAkB,SAAS,GAAT,CAAxB;AACA,SAAO,QAAQ,GAAf,EAAoB;AAClB,UAAM,OAAN,IAAiB,KAAjB;AACD;AACD,SAAO,KAAP;AACD;;AAED,OAAO,OAAP,GAAiB,QAAjB","file":"_baseFill-compiled.js","sourcesContent":["var toInteger = require('./toInteger'),\n    toLength = require('./toLength');\n\n/**\n * The base implementation of `_.fill` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to fill.\n * @param {*} value The value to fill `array` with.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns `array`.\n */\nfunction baseFill(array, value, start, end) {\n  var length = array.length;\n\n  start = toInteger(start);\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = (end === undefined || end > length) ? length : toInteger(end);\n  if (end < 0) {\n    end += length;\n  }\n  end = start > end ? 0 : toLength(end);\n  while (start < end) {\n    array[start++] = value;\n  }\n  return array;\n}\n\nmodule.exports = baseFill;\n"]}