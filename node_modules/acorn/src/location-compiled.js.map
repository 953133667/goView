{"version":3,"sources":["location.js"],"names":[],"mappings":"AAAA,SAAQ,MAAR,QAAqB,SAArB;AACA,SAAQ,QAAR,EAAkB,WAAlB,QAAoC,WAApC;;AAEA,MAAM,KAAK,OAAO,SAAlB;;AAEA;AACA;AACA;AACA;AACA;;AAEA,GAAG,KAAH,GAAW,UAAS,GAAT,EAAc,OAAd,EAAuB;AAChC,MAAI,MAAM,YAAY,KAAK,KAAjB,EAAwB,GAAxB,CAAV;AACA,aAAW,OAAO,IAAI,IAAX,GAAkB,GAAlB,GAAwB,IAAI,MAA5B,GAAqC,GAAhD;AACA,MAAI,MAAM,IAAI,WAAJ,CAAgB,OAAhB,CAAV;AACA,MAAI,GAAJ,GAAU,GAAV,CAAe,IAAI,GAAJ,GAAU,GAAV,CAAe,IAAI,QAAJ,GAAe,KAAK,GAApB;AAC9B,QAAM,GAAN;AACD,CAND;;AAQA,GAAG,gBAAH,GAAsB,GAAG,KAAzB;;AAEA,GAAG,WAAH,GAAiB,YAAW;AAC1B,MAAI,KAAK,OAAL,CAAa,SAAjB,EAA4B;AAC1B,WAAO,IAAI,QAAJ,CAAa,KAAK,OAAlB,EAA2B,KAAK,GAAL,GAAW,KAAK,SAA3C,CAAP;AACD;AACF,CAJD","file":"location-compiled.js","sourcesContent":["import {Parser} from \"./state\"\nimport {Position, getLineInfo} from \"./locutil\"\n\nconst pp = Parser.prototype\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\npp.raise = function(pos, message) {\n  let loc = getLineInfo(this.input, pos)\n  message += \" (\" + loc.line + \":\" + loc.column + \")\"\n  let err = new SyntaxError(message)\n  err.pos = pos; err.loc = loc; err.raisedAt = this.pos\n  throw err\n}\n\npp.raiseRecoverable = pp.raise\n\npp.curPosition = function() {\n  if (this.options.locations) {\n    return new Position(this.curLine, this.pos - this.lineStart)\n  }\n}\n"]}