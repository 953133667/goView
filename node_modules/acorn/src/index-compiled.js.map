{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQ,MAAR,QAAqB,SAArB;AACA,OAAO,aAAP;AACA,OAAO,aAAP;AACA,OAAO,QAAP;AACA,OAAO,cAAP;AACA,OAAO,YAAP;;AAEA,SAAQ,MAAR,EAAgB,OAAhB,QAA8B,SAA9B;AACA,SAAQ,cAAR,QAA6B,WAA7B;AACA,SAAQ,QAAR,EAAkB,cAAlB,EAAkC,WAAlC,QAAoD,WAApD;AACA,SAAQ,IAAR,QAAmB,QAAnB;AACA,SAAQ,SAAR,EAAmB,SAAS,QAA5B,QAA2C,aAA3C;AACA,SAAQ,UAAR,EAAoB,SAAS,WAA7B,QAA+C,gBAA/C;AACA,SAAQ,gBAAR,EAA0B,iBAA1B,QAAkD,cAAlD;AACA,SAAQ,KAAR,QAAoB,YAApB;AACA,SAAQ,SAAR,EAAmB,SAAnB,EAA8B,UAA9B,QAA+C,cAA/C;;AAEA,OAAO,MAAM,UAAU,OAAhB;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAAS,KAAT,CAAe,KAAf,EAAsB,OAAtB,EAA+B;AACpC,SAAO,IAAI,MAAJ,CAAW,OAAX,EAAoB,KAApB,EAA2B,KAA3B,EAAP;AACD;;AAED;AACA;AACA;;AAEA,OAAO,SAAS,iBAAT,CAA2B,KAA3B,EAAkC,GAAlC,EAAuC,OAAvC,EAAgD;AACrD,MAAI,IAAI,IAAI,MAAJ,CAAW,OAAX,EAAoB,KAApB,EAA2B,GAA3B,CAAR;AACA,IAAE,SAAF;AACA,SAAO,EAAE,eAAF,EAAP;AACD;;AAED;AACA;;AAEA,OAAO,SAAS,SAAT,CAAmB,KAAnB,EAA0B,OAA1B,EAAmC;AACxC,SAAO,IAAI,MAAJ,CAAW,OAAX,EAAoB,KAApB,CAAP;AACD","file":"index-compiled.js","sourcesContent":["// Acorn is a tiny, fast JavaScript parser written in JavaScript.\n//\n// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and\n// various contributors and released under an MIT license.\n//\n// Git repositories for Acorn are available at\n//\n//     http://marijnhaverbeke.nl/git/acorn\n//     https://github.com/ternjs/acorn.git\n//\n// Please use the [github bug tracker][ghbt] to report issues.\n//\n// [ghbt]: https://github.com/ternjs/acorn/issues\n//\n// This file defines the main parser interface. The library also comes\n// with a [error-tolerant parser][dammit] and an\n// [abstract syntax tree walker][walk], defined in other files.\n//\n// [dammit]: acorn_loose.js\n// [walk]: util/walk.js\n\nimport {Parser} from \"./state\"\nimport \"./parseutil\"\nimport \"./statement\"\nimport \"./lval\"\nimport \"./expression\"\nimport \"./location\"\n\nexport {Parser, plugins} from \"./state\"\nexport {defaultOptions} from \"./options\"\nexport {Position, SourceLocation, getLineInfo} from \"./locutil\"\nexport {Node} from \"./node\"\nexport {TokenType, types as tokTypes} from \"./tokentype\"\nexport {TokContext, types as tokContexts} from \"./tokencontext\"\nexport {isIdentifierChar, isIdentifierStart} from \"./identifier\"\nexport {Token} from \"./tokenize\"\nexport {isNewLine, lineBreak, lineBreakG} from \"./whitespace\"\n\nexport const version = \"3.1.0\"\n\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\nexport function parse(input, options) {\n  return new Parser(options, input).parse()\n}\n\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\nexport function parseExpressionAt(input, pos, options) {\n  let p = new Parser(options, input, pos)\n  p.nextToken()\n  return p.parseExpression()\n}\n\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenizer` export provides an interface to the tokenizer.\n\nexport function tokenizer(input, options) {\n  return new Parser(options, input)\n}\n"]}