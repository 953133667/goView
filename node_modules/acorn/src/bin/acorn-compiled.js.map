{"version":3,"sources":["acorn.js"],"names":[],"mappings":"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","file":"acorn-compiled.js","sourcesContent":["#!/usr/bin/env node\n\nimport {basename} from \"path\"\nimport {readFileSync as readFile} from \"fs\"\nimport * as acorn from \"../dist/acorn.js\"\n\nlet infile, forceFile, silent = false, compact = false, tokenize = false\nconst options = {}\n\nfunction help(status) {\n  const print = (status == 0) ? console.log : console.error\n  print(\"usage: \" + basename(process.argv[1]) + \" [--ecma3|--ecma5|--ecma6|--ecma7]\")\n  print(\"        [--tokenize] [--locations] [---allow-hash-bang] [--compact] [--silent] [--module] [--help] [--] [infile]\")\n  process.exit(status)\n}\n\nfor (let i = 2; i < process.argv.length; ++i) {\n  const arg = process.argv[i]\n  if ((arg == \"-\" || arg[0] != \"-\") && !infile) infile = arg\n  else if (arg == \"--\" && !infile && i + 2 == process.argv.length) forceFile = infile = process.argv[++i]\n  else if (arg == \"--ecma3\") options.ecmaVersion = 3\n  else if (arg == \"--ecma5\") options.ecmaVersion = 5\n  else if (arg == \"--ecma6\") options.ecmaVersion = 6\n  else if (arg == \"--ecma7\") options.ecmaVersion = 7\n  else if (arg == \"--locations\") options.locations = true\n  else if (arg == \"--allow-hash-bang\") options.allowHashBang = true\n  else if (arg == \"--silent\") silent = true\n  else if (arg == \"--compact\") compact = true\n  else if (arg == \"--help\") help(0)\n  else if (arg == \"--tokenize\") tokenize = true\n  else if (arg == \"--module\") options.sourceType = 'module'\n  else help(1)\n}\n\nfunction run(code) {\n  let result\n  if (!tokenize) {\n    try { result = acorn.parse(code, options) }\n    catch(e) { console.error(e.message); process.exit(1) }\n  } else {\n    result = []\n    let tokenizer = acorn.tokenizer(code, options), token\n    while (true) {\n      try { token = tokenizer.getToken() }\n      catch(e) { console.error(e.message); process.exit(1) }\n      result.push(token)\n      if (token.type == acorn.tokTypes.eof) break\n    }\n  }\n  if (!silent) console.log(JSON.stringify(result, null, compact ? null : 2))\n}\n\nif (forceFile || infile && infile != \"-\") {\n  run(readFile(infile, \"utf8\"))\n} else {\n  let code = \"\"\n  process.stdin.resume()\n  process.stdin.on(\"data\", chunk => code += chunk)\n  process.stdin.on(\"end\", () => run(code))\n}\n"]}