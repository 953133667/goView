{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["// AST walker module for Mozilla Parser API compatible trees\n\n// A simple walk is one where you simply specify callbacks to be\n// called on specific nodes. The last two arguments are optional. A\n// simple use would be\n//\n//     walk.simple(myTree, {\n//         Expression: function(node) { ... }\n//     });\n//\n// to do something with all expressions. All Parser API node types\n// can be used to identify node types, as well as Expression,\n// Statement, and ScopeBody, which denote categories of nodes.\n//\n// The base argument can be used to pass a custom (recursive)\n// walker, and state can be used to give this walked an initial\n// state.\n\nexport function simple(node, visitors, base, state, override) {\n  if (!base) base = exports.base\n  ;(function c(node, st, override) {\n    let type = override || node.type, found = visitors[type]\n    base[type](node, st, c)\n    if (found) found(node, st)\n  })(node, state, override)\n}\n\n// An ancestor walk keeps an array of ancestor nodes (including the\n// current node) and passes them to the callback as third parameter\n// (and also as state parameter when no other state is present).\nexport function ancestor(node, visitors, base, state) {\n  if (!base) base = exports.base\n  let ancestors = []\n  ;(function c(node, st, override) {\n    let type = override || node.type, found = visitors[type]\n    let isNew = node != ancestors[ancestors.length - 1]\n    if (isNew) ancestors.push(node)\n    base[type](node, st, c)\n    if (found) found(node, st || ancestors, ancestors)\n    if (isNew) ancestors.pop()\n  })(node, state)\n}\n\n// A recursive walk is one where your functions override the default\n// walkers. They can modify and replace the state parameter that's\n// threaded through the walk, and can opt how and whether to walk\n// their child nodes (by calling their third argument on these\n// nodes).\nexport function recursive(node, state, funcs, base, override) {\n  let visitor = funcs ? exports.make(funcs, base) : base\n  ;(function c(node, st, override) {\n    visitor[override || node.type](node, st, c)\n  })(node, state, override)\n}\n\nfunction makeTest(test) {\n  if (typeof test == \"string\")\n    return type => type == test\n  else if (!test)\n    return () => true\n  else\n    return test\n}\n\nclass Found {\n  constructor(node, state) { this.node = node; this.state = state }\n}\n\n// Find a node with a given start, end, and type (all are optional,\n// null can be used as wildcard). Returns a {node, state} object, or\n// undefined when it doesn't find a matching node.\nexport function findNodeAt(node, start, end, test, base, state) {\n  test = makeTest(test)\n  if (!base) base = exports.base\n  try {\n    ;(function c(node, st, override) {\n      let type = override || node.type\n      if ((start == null || node.start <= start) &&\n          (end == null || node.end >= end))\n        base[type](node, st, c)\n      if ((start == null || node.start == start) &&\n          (end == null || node.end == end) &&\n          test(type, node))\n        throw new Found(node, st)\n    })(node, state)\n  } catch (e) {\n    if (e instanceof Found) return e\n    throw e\n  }\n}\n\n// Find the innermost node of a given type that contains the given\n// position. Interface similar to findNodeAt.\nexport function findNodeAround(node, pos, test, base, state) {\n  test = makeTest(test)\n  if (!base) base = exports.base\n  try {\n    ;(function c(node, st, override) {\n      let type = override || node.type\n      if (node.start > pos || node.end < pos) return\n      base[type](node, st, c)\n      if (test(type, node)) throw new Found(node, st)\n    })(node, state)\n  } catch (e) {\n    if (e instanceof Found) return e\n    throw e\n  }\n}\n\n// Find the outermost matching node after a given position.\nexport function findNodeAfter(node, pos, test, base, state) {\n  test = makeTest(test)\n  if (!base) base = exports.base\n  try {\n    ;(function c(node, st, override) {\n      if (node.end < pos) return\n      let type = override || node.type\n      if (node.start >= pos && test(type, node)) throw new Found(node, st)\n      base[type](node, st, c)\n    })(node, state)\n  } catch (e) {\n    if (e instanceof Found) return e\n    throw e\n  }\n}\n\n// Find the outermost matching node before a given position.\nexport function findNodeBefore(node, pos, test, base, state) {\n  test = makeTest(test)\n  if (!base) base = exports.base\n  let max\n  ;(function c(node, st, override) {\n    if (node.start > pos) return\n    let type = override || node.type\n    if (node.end <= pos && (!max || max.node.end < node.end) && test(type, node))\n      max = new Found(node, st)\n    base[type](node, st, c)\n  })(node, state)\n  return max\n}\n\n// Fallback to an Object.create polyfill for older environments.\nconst create = Object.create || function(proto) {\n  function Ctor() {}\n  Ctor.prototype = proto\n  return new Ctor\n}\n\n// Used to create a custom walker. Will fill in all missing node\n// type properties with the defaults.\nexport function make(funcs, base) {\n  if (!base) base = exports.base\n  let visitor = create(base)\n  for (var type in funcs) visitor[type] = funcs[type]\n  return visitor\n}\n\nfunction skipThrough(node, st, c) { c(node, st) }\nfunction ignore(_node, _st, _c) {}\n\n// Node walkers.\n\nexport const base = {}\n\nbase.Program = base.BlockStatement = (node, st, c) => {\n  for (let i = 0; i < node.body.length; ++i)\n    c(node.body[i], st, \"Statement\")\n}\nbase.Statement = skipThrough\nbase.EmptyStatement = ignore\nbase.ExpressionStatement = base.ParenthesizedExpression =\n  (node, st, c) => c(node.expression, st, \"Expression\")\nbase.IfStatement = (node, st, c) => {\n  c(node.test, st, \"Expression\")\n  c(node.consequent, st, \"Statement\")\n  if (node.alternate) c(node.alternate, st, \"Statement\")\n}\nbase.LabeledStatement = (node, st, c) => c(node.body, st, \"Statement\")\nbase.BreakStatement = base.ContinueStatement = ignore\nbase.WithStatement = (node, st, c) => {\n  c(node.object, st, \"Expression\")\n  c(node.body, st, \"Statement\")\n}\nbase.SwitchStatement = (node, st, c) => {\n  c(node.discriminant, st, \"Expression\")\n  for (let i = 0; i < node.cases.length; ++i) {\n    let cs = node.cases[i]\n    if (cs.test) c(cs.test, st, \"Expression\")\n    for (let j = 0; j < cs.consequent.length; ++j)\n      c(cs.consequent[j], st, \"Statement\")\n  }\n}\nbase.ReturnStatement = base.YieldExpression = (node, st, c) => {\n  if (node.argument) c(node.argument, st, \"Expression\")\n}\nbase.ThrowStatement = base.SpreadElement =\n  (node, st, c) => c(node.argument, st, \"Expression\")\nbase.TryStatement = (node, st, c) => {\n  c(node.block, st, \"Statement\")\n  if (node.handler) c(node.handler, st)\n  if (node.finalizer) c(node.finalizer, st, \"Statement\")\n}\nbase.CatchClause = (node, st, c) => {\n  c(node.param, st, \"Pattern\")\n  c(node.body, st, \"ScopeBody\")\n}\nbase.WhileStatement = base.DoWhileStatement = (node, st, c) => {\n  c(node.test, st, \"Expression\")\n  c(node.body, st, \"Statement\")\n}\nbase.ForStatement = (node, st, c) => {\n  if (node.init) c(node.init, st, \"ForInit\")\n  if (node.test) c(node.test, st, \"Expression\")\n  if (node.update) c(node.update, st, \"Expression\")\n  c(node.body, st, \"Statement\")\n}\nbase.ForInStatement = base.ForOfStatement = (node, st, c) => {\n  c(node.left, st, \"ForInit\")\n  c(node.right, st, \"Expression\")\n  c(node.body, st, \"Statement\")\n}\nbase.ForInit = (node, st, c) => {\n  if (node.type == \"VariableDeclaration\") c(node, st)\n  else c(node, st, \"Expression\")\n}\nbase.DebuggerStatement = ignore\n\nbase.FunctionDeclaration = (node, st, c) => c(node, st, \"Function\")\nbase.VariableDeclaration = (node, st, c) => {\n  for (let i = 0; i < node.declarations.length; ++i)\n    c(node.declarations[i], st)\n}\nbase.VariableDeclarator = (node, st, c) => {\n  c(node.id, st, \"Pattern\")\n  if (node.init) c(node.init, st, \"Expression\")\n}\n\nbase.Function = (node, st, c) => {\n  if (node.id) c(node.id, st, \"Pattern\")\n  for (let i = 0; i < node.params.length; i++)\n    c(node.params[i], st, \"Pattern\")\n  c(node.body, st, node.expression ? \"ScopeExpression\" : \"ScopeBody\")\n}\n// FIXME drop these node types in next major version\n// (They are awkward, and in ES6 every block can be a scope.)\nbase.ScopeBody = (node, st, c) => c(node, st, \"Statement\")\nbase.ScopeExpression = (node, st, c) => c(node, st, \"Expression\")\n\nbase.Pattern = (node, st, c) => {\n  if (node.type == \"Identifier\")\n    c(node, st, \"VariablePattern\")\n  else if (node.type == \"MemberExpression\")\n    c(node, st, \"MemberPattern\")\n  else\n    c(node, st)\n}\nbase.VariablePattern = ignore\nbase.MemberPattern = skipThrough\nbase.RestElement = (node, st, c) => c(node.argument, st, \"Pattern\")\nbase.ArrayPattern =  (node, st, c) => {\n  for (let i = 0; i < node.elements.length; ++i) {\n    let elt = node.elements[i]\n    if (elt) c(elt, st, \"Pattern\")\n  }\n}\nbase.ObjectPattern = (node, st, c) => {\n  for (let i = 0; i < node.properties.length; ++i)\n    c(node.properties[i].value, st, \"Pattern\")\n}\n\nbase.Expression = skipThrough\nbase.ThisExpression = base.Super = base.MetaProperty = ignore\nbase.ArrayExpression = (node, st, c) => {\n  for (let i = 0; i < node.elements.length; ++i) {\n    let elt = node.elements[i]\n    if (elt) c(elt, st, \"Expression\")\n  }\n}\nbase.ObjectExpression = (node, st, c) => {\n  for (let i = 0; i < node.properties.length; ++i)\n    c(node.properties[i], st)\n}\nbase.FunctionExpression = base.ArrowFunctionExpression = base.FunctionDeclaration\nbase.SequenceExpression = base.TemplateLiteral = (node, st, c) => {\n  for (let i = 0; i < node.expressions.length; ++i)\n    c(node.expressions[i], st, \"Expression\")\n}\nbase.UnaryExpression = base.UpdateExpression = (node, st, c) => {\n  c(node.argument, st, \"Expression\")\n}\nbase.BinaryExpression = base.LogicalExpression = (node, st, c) => {\n  c(node.left, st, \"Expression\")\n  c(node.right, st, \"Expression\")\n}\nbase.AssignmentExpression = base.AssignmentPattern = (node, st, c) => {\n  c(node.left, st, \"Pattern\")\n  c(node.right, st, \"Expression\")\n}\nbase.ConditionalExpression = (node, st, c) => {\n  c(node.test, st, \"Expression\")\n  c(node.consequent, st, \"Expression\")\n  c(node.alternate, st, \"Expression\")\n}\nbase.NewExpression = base.CallExpression = (node, st, c) => {\n  c(node.callee, st, \"Expression\")\n  if (node.arguments) for (let i = 0; i < node.arguments.length; ++i)\n    c(node.arguments[i], st, \"Expression\")\n}\nbase.MemberExpression = (node, st, c) => {\n  c(node.object, st, \"Expression\")\n  if (node.computed) c(node.property, st, \"Expression\")\n}\nbase.ExportNamedDeclaration = base.ExportDefaultDeclaration = (node, st, c) => {\n  if (node.declaration)\n    c(node.declaration, st, node.type == \"ExportNamedDeclaration\" || node.declaration.id ? \"Statement\" : \"Expression\")\n  if (node.source) c(node.source, st, \"Expression\")\n}\nbase.ExportAllDeclaration = (node, st, c) => {\n  c(node.source, st, \"Expression\")\n}\nbase.ImportDeclaration = (node, st, c) => {\n  for (let i = 0; i < node.specifiers.length; i++)\n    c(node.specifiers[i], st)\n  c(node.source, st, \"Expression\")\n}\nbase.ImportSpecifier = base.ImportDefaultSpecifier = base.ImportNamespaceSpecifier = base.Identifier = base.Literal = ignore\n\nbase.TaggedTemplateExpression = (node, st, c) => {\n  c(node.tag, st, \"Expression\")\n  c(node.quasi, st)\n}\nbase.ClassDeclaration = base.ClassExpression = (node, st, c) => c(node, st, \"Class\")\nbase.Class = (node, st, c) => {\n  if (node.id) c(node.id, st, \"Pattern\")\n  if (node.superClass) c(node.superClass, st, \"Expression\")\n  for (let i = 0; i < node.body.body.length; i++)\n    c(node.body.body[i], st)\n}\nbase.MethodDefinition = base.Property = (node, st, c) => {\n  if (node.computed) c(node.key, st, \"Expression\")\n  c(node.value, st, \"Expression\")\n}\n"]}