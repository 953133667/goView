{"version":3,"sources":["statement.js"],"names":[],"mappings":"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","file":"statement-compiled.js","sourcesContent":["import {LooseParser} from \"./state\"\nimport {isDummy} from \"./parseutil\"\nimport {getLineInfo, tokTypes as tt} from \"..\"\n\nconst lp = LooseParser.prototype\n\nlp.parseTopLevel = function() {\n  let node = this.startNodeAt(this.options.locations ? [0, getLineInfo(this.input, 0)] : 0)\n  node.body = []\n  while (this.tok.type !== tt.eof) node.body.push(this.parseStatement())\n  this.last = this.tok\n  if (this.options.ecmaVersion >= 6) {\n    node.sourceType = this.options.sourceType\n  }\n  return this.finishNode(node, \"Program\")\n}\n\nlp.parseStatement = function() {\n  let starttype = this.tok.type, node = this.startNode(), kind\n\n  if (this.toks.isLet()) {\n    starttype = tt._var\n    kind = \"let\"\n  }\n\n  switch (starttype) {\n  case tt._break: case tt._continue:\n    this.next()\n    let isBreak = starttype === tt._break\n    if (this.semicolon() || this.canInsertSemicolon()) {\n      node.label = null\n    } else {\n      node.label = this.tok.type === tt.name ? this.parseIdent() : null\n      this.semicolon()\n    }\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n\n  case tt._debugger:\n    this.next()\n    this.semicolon()\n    return this.finishNode(node, \"DebuggerStatement\")\n\n  case tt._do:\n    this.next()\n    node.body = this.parseStatement()\n    node.test = this.eat(tt._while) ? this.parseParenExpression() : this.dummyIdent()\n    this.semicolon()\n    return this.finishNode(node, \"DoWhileStatement\")\n\n  case tt._for:\n    this.next()\n    this.pushCx()\n    this.expect(tt.parenL)\n    if (this.tok.type === tt.semi) return this.parseFor(node, null)\n    let isLet = this.toks.isLet()\n    if (isLet || this.tok.type === tt._var || this.tok.type === tt._const) {\n      let init = this.parseVar(true, isLet ? \"let\" : this.tok.value)\n      if (init.declarations.length === 1 && (this.tok.type === tt._in || this.isContextual(\"of\"))) {\n        return this.parseForIn(node, init)\n      }\n      return this.parseFor(node, init)\n    }\n    let init = this.parseExpression(true)\n    if (this.tok.type === tt._in || this.isContextual(\"of\"))\n      return this.parseForIn(node, this.toAssignable(init))\n    return this.parseFor(node, init)\n\n  case tt._function:\n    this.next()\n    return this.parseFunction(node, true)\n\n  case tt._if:\n    this.next()\n    node.test = this.parseParenExpression()\n    node.consequent = this.parseStatement()\n    node.alternate = this.eat(tt._else) ? this.parseStatement() : null\n    return this.finishNode(node, \"IfStatement\")\n\n  case tt._return:\n    this.next()\n    if (this.eat(tt.semi) || this.canInsertSemicolon()) node.argument = null\n    else { node.argument = this.parseExpression(); this.semicolon() }\n    return this.finishNode(node, \"ReturnStatement\")\n\n  case tt._switch:\n    let blockIndent = this.curIndent, line = this.curLineStart\n    this.next()\n    node.discriminant = this.parseParenExpression()\n    node.cases = []\n    this.pushCx()\n    this.expect(tt.braceL)\n\n    let cur\n    while (!this.closes(tt.braceR, blockIndent, line, true)) {\n      if (this.tok.type === tt._case || this.tok.type === tt._default) {\n        let isCase = this.tok.type === tt._case\n        if (cur) this.finishNode(cur, \"SwitchCase\")\n        node.cases.push(cur = this.startNode())\n        cur.consequent = []\n        this.next()\n        if (isCase) cur.test = this.parseExpression()\n        else cur.test = null\n        this.expect(tt.colon)\n      } else {\n        if (!cur) {\n          node.cases.push(cur = this.startNode())\n          cur.consequent = []\n          cur.test = null\n        }\n        cur.consequent.push(this.parseStatement())\n      }\n    }\n    if (cur) this.finishNode(cur, \"SwitchCase\")\n    this.popCx()\n    this.eat(tt.braceR)\n    return this.finishNode(node, \"SwitchStatement\")\n\n  case tt._throw:\n    this.next()\n    node.argument = this.parseExpression()\n    this.semicolon()\n    return this.finishNode(node, \"ThrowStatement\")\n\n  case tt._try:\n    this.next()\n    node.block = this.parseBlock()\n    node.handler = null\n    if (this.tok.type === tt._catch) {\n      let clause = this.startNode()\n      this.next()\n      this.expect(tt.parenL)\n      clause.param = this.toAssignable(this.parseExprAtom(), true)\n      this.expect(tt.parenR)\n      clause.body = this.parseBlock()\n      node.handler = this.finishNode(clause, \"CatchClause\")\n    }\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null\n    if (!node.handler && !node.finalizer) return node.block\n    return this.finishNode(node, \"TryStatement\")\n\n  case tt._var:\n  case tt._const:\n    return this.parseVar(false, kind || this.tok.value)\n\n  case tt._while:\n    this.next()\n    node.test = this.parseParenExpression()\n    node.body = this.parseStatement()\n    return this.finishNode(node, \"WhileStatement\")\n\n  case tt._with:\n    this.next()\n    node.object = this.parseParenExpression()\n    node.body = this.parseStatement()\n    return this.finishNode(node, \"WithStatement\")\n\n  case tt.braceL:\n    return this.parseBlock()\n\n  case tt.semi:\n    this.next()\n    return this.finishNode(node, \"EmptyStatement\")\n\n  case tt._class:\n    return this.parseClass(true)\n\n  case tt._import:\n    return this.parseImport()\n\n  case tt._export:\n    return this.parseExport()\n\n  default:\n    let expr = this.parseExpression()\n    if (isDummy(expr)) {\n      this.next()\n      if (this.tok.type === tt.eof) return this.finishNode(node, \"EmptyStatement\")\n      return this.parseStatement()\n    } else if (starttype === tt.name && expr.type === \"Identifier\" && this.eat(tt.colon)) {\n      node.body = this.parseStatement()\n      node.label = expr\n      return this.finishNode(node, \"LabeledStatement\")\n    } else {\n      node.expression = expr\n      this.semicolon()\n      return this.finishNode(node, \"ExpressionStatement\")\n    }\n  }\n}\n\nlp.parseBlock = function() {\n  let node = this.startNode()\n  this.pushCx()\n  this.expect(tt.braceL)\n  let blockIndent = this.curIndent, line = this.curLineStart\n  node.body = []\n  while (!this.closes(tt.braceR, blockIndent, line, true))\n    node.body.push(this.parseStatement())\n  this.popCx()\n  this.eat(tt.braceR)\n  return this.finishNode(node, \"BlockStatement\")\n}\n\nlp.parseFor = function(node, init) {\n  node.init = init\n  node.test = node.update = null\n  if (this.eat(tt.semi) && this.tok.type !== tt.semi) node.test = this.parseExpression()\n  if (this.eat(tt.semi) && this.tok.type !== tt.parenR) node.update = this.parseExpression()\n  this.popCx()\n  this.expect(tt.parenR)\n  node.body = this.parseStatement()\n  return this.finishNode(node, \"ForStatement\")\n}\n\nlp.parseForIn = function(node, init) {\n  let type = this.tok.type === tt._in ? \"ForInStatement\" : \"ForOfStatement\"\n  this.next()\n  node.left = init\n  node.right = this.parseExpression()\n  this.popCx()\n  this.expect(tt.parenR)\n  node.body = this.parseStatement()\n  return this.finishNode(node, type)\n}\n\nlp.parseVar = function(noIn, kind) {\n  let node = this.startNode()\n  node.kind = kind\n  this.next()\n  node.declarations = []\n  do {\n    let decl = this.startNode()\n    decl.id = this.options.ecmaVersion >= 6 ? this.toAssignable(this.parseExprAtom(), true) : this.parseIdent()\n    decl.init = this.eat(tt.eq) ? this.parseMaybeAssign(noIn) : null\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"))\n  } while (this.eat(tt.comma))\n  if (!node.declarations.length) {\n    let decl = this.startNode()\n    decl.id = this.dummyIdent()\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"))\n  }\n  if (!noIn) this.semicolon()\n  return this.finishNode(node, \"VariableDeclaration\")\n}\n\nlp.parseClass = function(isStatement) {\n  let node = this.startNode()\n  this.next()\n  if (this.tok.type === tt.name) node.id = this.parseIdent()\n  else if (isStatement) node.id = this.dummyIdent()\n  else node.id = null\n  node.superClass = this.eat(tt._extends) ? this.parseExpression() : null\n  node.body = this.startNode()\n  node.body.body = []\n  this.pushCx()\n  let indent = this.curIndent + 1, line = this.curLineStart\n  this.eat(tt.braceL)\n  if (this.curIndent + 1 < indent) { indent = this.curIndent; line = this.curLineStart }\n  while (!this.closes(tt.braceR, indent, line)) {\n    if (this.semicolon()) continue\n    let method = this.startNode(), isGenerator\n    if (this.options.ecmaVersion >= 6) {\n      method.static = false\n      isGenerator = this.eat(tt.star)\n    }\n    this.parsePropertyName(method)\n    if (isDummy(method.key)) { if (isDummy(this.parseMaybeAssign())) this.next(); this.eat(tt.comma); continue }\n    if (method.key.type === \"Identifier\" && !method.computed && method.key.name === \"static\" &&\n        (this.tok.type != tt.parenL && this.tok.type != tt.braceL)) {\n      method.static = true\n      isGenerator = this.eat(tt.star)\n      this.parsePropertyName(method)\n    } else {\n      method.static = false\n    }\n    if (this.options.ecmaVersion >= 5 && method.key.type === \"Identifier\" &&\n        !method.computed && (method.key.name === \"get\" || method.key.name === \"set\") &&\n        this.tok.type !== tt.parenL && this.tok.type !== tt.braceL) {\n      method.kind = method.key.name\n      this.parsePropertyName(method)\n      method.value = this.parseMethod(false)\n    } else {\n      if (!method.computed && !method.static && !isGenerator && (\n        method.key.type === \"Identifier\" && method.key.name === \"constructor\" ||\n          method.key.type === \"Literal\" && method.key.value === \"constructor\")) {\n        method.kind = \"constructor\"\n      } else {\n        method.kind =  \"method\"\n      }\n      method.value = this.parseMethod(isGenerator)\n    }\n    node.body.body.push(this.finishNode(method, \"MethodDefinition\"))\n  }\n  this.popCx()\n  if (!this.eat(tt.braceR)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start\n    if (this.options.locations) this.last.loc.end = this.tok.loc.start\n  }\n  this.semicolon()\n  this.finishNode(node.body, \"ClassBody\")\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n}\n\nlp.parseFunction = function(node, isStatement) {\n  this.initFunction(node)\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = this.eat(tt.star)\n  }\n  if (this.tok.type === tt.name) node.id = this.parseIdent()\n  else if (isStatement) node.id = this.dummyIdent()\n  node.params = this.parseFunctionParams()\n  node.body = this.parseBlock()\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\")\n}\n\nlp.parseExport = function() {\n  let node = this.startNode()\n  this.next()\n  if (this.eat(tt.star)) {\n    node.source = this.eatContextual(\"from\") ? this.parseExprAtom() : this.dummyString()\n    return this.finishNode(node, \"ExportAllDeclaration\")\n  }\n  if (this.eat(tt._default)) {\n    let expr = this.parseMaybeAssign()\n    if (expr.id) {\n      switch (expr.type) {\n      case \"FunctionExpression\": expr.type = \"FunctionDeclaration\"; break\n      case \"ClassExpression\": expr.type = \"ClassDeclaration\"; break\n      }\n    }\n    node.declaration = expr\n    this.semicolon()\n    return this.finishNode(node, \"ExportDefaultDeclaration\")\n  }\n  if (this.tok.type.keyword || this.toks.isLet()) {\n    node.declaration = this.parseStatement()\n    node.specifiers = []\n    node.source = null\n  } else {\n    node.declaration = null\n    node.specifiers = this.parseExportSpecifierList()\n    node.source = this.eatContextual(\"from\") ? this.parseExprAtom() : null\n    this.semicolon()\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\")\n}\n\nlp.parseImport = function() {\n  let node = this.startNode()\n  this.next()\n  if (this.tok.type === tt.string) {\n    node.specifiers = []\n    node.source = this.parseExprAtom()\n    node.kind = ''\n  } else {\n    let elt\n    if (this.tok.type === tt.name && this.tok.value !== \"from\") {\n      elt = this.startNode()\n      elt.local = this.parseIdent()\n      this.finishNode(elt, \"ImportDefaultSpecifier\")\n      this.eat(tt.comma)\n    }\n    node.specifiers = this.parseImportSpecifierList()\n    node.source = this.eatContextual(\"from\") && this.tok.type == tt.string ? this.parseExprAtom() : this.dummyString()\n    if (elt) node.specifiers.unshift(elt)\n  }\n  this.semicolon()\n  return this.finishNode(node, \"ImportDeclaration\")\n}\n\nlp.parseImportSpecifierList = function() {\n  let elts = []\n  if (this.tok.type === tt.star) {\n    let elt = this.startNode()\n    this.next()\n    elt.local = this.eatContextual(\"as\") ? this.parseIdent() : this.dummyIdent()\n    elts.push(this.finishNode(elt, \"ImportNamespaceSpecifier\"))\n  } else {\n    let indent = this.curIndent, line = this.curLineStart, continuedLine = this.nextLineStart\n    this.pushCx()\n    this.eat(tt.braceL)\n    if (this.curLineStart > continuedLine) continuedLine = this.curLineStart\n    while (!this.closes(tt.braceR, indent + (this.curLineStart <= continuedLine ? 1 : 0), line)) {\n      let elt = this.startNode()\n      if (this.eat(tt.star)) {\n        elt.local = this.eatContextual(\"as\") ? this.parseIdent() : this.dummyIdent()\n        this.finishNode(elt, \"ImportNamespaceSpecifier\")\n      } else {\n        if (this.isContextual(\"from\")) break\n        elt.imported = this.parseIdent()\n        if (isDummy(elt.imported)) break\n        elt.local = this.eatContextual(\"as\") ? this.parseIdent() : elt.imported\n        this.finishNode(elt, \"ImportSpecifier\")\n      }\n      elts.push(elt)\n      this.eat(tt.comma)\n    }\n    this.eat(tt.braceR)\n    this.popCx()\n  }\n  return elts\n}\n\nlp.parseExportSpecifierList = function() {\n  let elts = []\n  let indent = this.curIndent, line = this.curLineStart, continuedLine = this.nextLineStart\n  this.pushCx()\n  this.eat(tt.braceL)\n  if (this.curLineStart > continuedLine) continuedLine = this.curLineStart\n  while (!this.closes(tt.braceR, indent + (this.curLineStart <= continuedLine ? 1 : 0), line)) {\n    if (this.isContextual(\"from\")) break\n    let elt = this.startNode()\n    elt.local = this.parseIdent()\n    if (isDummy(elt.local)) break\n    elt.exported = this.eatContextual(\"as\") ? this.parseIdent() : elt.local\n    this.finishNode(elt, \"ExportSpecifier\")\n    elts.push(elt)\n    this.eat(tt.comma)\n  }\n  this.eat(tt.braceR)\n  this.popCx()\n  return elts\n}\n"]}