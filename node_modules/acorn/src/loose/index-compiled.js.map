{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,KAAK,KAAZ,MAAuB,IAAvB;AACA,SAAQ,WAAR,EAAqB,YAArB,QAAwC,SAAxC;AACA,OAAO,YAAP;AACA,OAAO,aAAP;AACA,OAAO,cAAP;;AAEA,SAAQ,WAAR,EAAqB,YAArB,QAAwC,SAAxC;;AAEA,MAAM,cAAN,CAAqB,OAArB,GAA+B,CAA/B;;AAEA,OAAO,SAAS,YAAT,CAAsB,KAAtB,EAA6B,OAA7B,EAAsC;AAC3C,MAAI,IAAI,IAAI,WAAJ,CAAgB,KAAhB,EAAuB,OAAvB,CAAR;AACA,IAAE,IAAF;AACA,SAAO,EAAE,aAAF,EAAP;AACD;;AAED,MAAM,YAAN,GAAqB,YAArB;AACA,MAAM,WAAN,GAAoB,WAApB;AACA,MAAM,YAAN,GAAqB,YAArB","file":"index-compiled.js","sourcesContent":["// Acorn: Loose parser\n//\n// This module provides an alternative parser (`parse_dammit`) that\n// exposes that same interface as `parse`, but will try to parse\n// anything as JavaScript, repairing syntax error the best it can.\n// There are circumstances in which it will raise an error and give\n// up, but they are very rare. The resulting AST will be a mostly\n// valid JavaScript AST (as per the [Mozilla parser API][api], except\n// that:\n//\n// - Return outside functions is allowed\n//\n// - Label consistency (no conflicts, break only to existing labels)\n//   is not enforced.\n//\n// - Bogus Identifier nodes with a name of `\"âœ–\"` are inserted whenever\n//   the parser got too confused to return anything meaningful.\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n//\n// The expected use for this is to *first* try `acorn.parse`, and only\n// if that fails switch to `parse_dammit`. The loose parser might\n// parse badly indented code incorrectly, so **don't** use it as\n// your default parser.\n//\n// Quite a lot of acorn.js is duplicated here. The alternative was to\n// add a *lot* of extra cruft to that file, making it less readable\n// and slower. Copying and editing the code allowed me to make\n// invasive changes and simplifications without creating a complicated\n// tangle.\n\nimport * as acorn from \"..\"\nimport {LooseParser, pluginsLoose} from \"./state\"\nimport \"./tokenize\"\nimport \"./statement\"\nimport \"./expression\"\n\nexport {LooseParser, pluginsLoose} from \"./state\"\n\nacorn.defaultOptions.tabSize = 4\n\nexport function parse_dammit(input, options) {\n  let p = new LooseParser(input, options)\n  p.next()\n  return p.parseTopLevel()\n}\n\nacorn.parse_dammit = parse_dammit\nacorn.LooseParser = LooseParser\nacorn.pluginsLoose = pluginsLoose\n"]}