{"version":3,"sources":["_basePullAll.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,aAAR,CAAf;AAAA,IACI,cAAc,QAAQ,gBAAR,CADlB;AAAA,IAEI,kBAAkB,QAAQ,oBAAR,CAFtB;AAAA,IAGI,YAAY,QAAQ,cAAR,CAHhB;AAAA,IAII,YAAY,QAAQ,cAAR,CAJhB;;AAMA;AACA,IAAI,aAAa,MAAM,SAAvB;;AAEA;AACA,IAAI,SAAS,WAAW,MAAxB;;AAEA;;;;;;;;;;;AAWA,SAAS,WAAT,CAAqB,KAArB,EAA4B,MAA5B,EAAoC,QAApC,EAA8C,UAA9C,EAA0D;AACxD,MAAI,UAAU,aAAa,eAAb,GAA+B,WAA7C;AAAA,MACI,QAAQ,CAAC,CADb;AAAA,MAEI,SAAS,OAAO,MAFpB;AAAA,MAGI,OAAO,KAHX;;AAKA,MAAI,UAAU,MAAd,EAAsB;AACpB,aAAS,UAAU,MAAV,CAAT;AACD;AACD,MAAI,QAAJ,EAAc;AACZ,WAAO,SAAS,KAAT,EAAgB,UAAU,QAAV,CAAhB,CAAP;AACD;AACD,SAAO,EAAE,KAAF,GAAU,MAAjB,EAAyB;AACvB,QAAI,YAAY,CAAhB;AAAA,QACI,QAAQ,OAAO,KAAP,CADZ;AAAA,QAEI,WAAW,WAAW,SAAS,KAAT,CAAX,GAA6B,KAF5C;;AAIA,WAAO,CAAC,YAAY,QAAQ,IAAR,EAAc,QAAd,EAAwB,SAAxB,EAAmC,UAAnC,CAAb,IAA+D,CAAC,CAAvE,EAA0E;AACxE,UAAI,SAAS,KAAb,EAAoB;AAClB,eAAO,IAAP,CAAY,IAAZ,EAAkB,SAAlB,EAA6B,CAA7B;AACD;AACD,aAAO,IAAP,CAAY,KAAZ,EAAmB,SAAnB,EAA8B,CAA9B;AACD;AACF;AACD,SAAO,KAAP;AACD;;AAED,OAAO,OAAP,GAAiB,WAAjB","file":"_basePullAll-compiled.js","sourcesContent":["var arrayMap = require('./_arrayMap'),\n    baseIndexOf = require('./_baseIndexOf'),\n    baseIndexOfWith = require('./_baseIndexOfWith'),\n    baseUnary = require('./_baseUnary'),\n    copyArray = require('./_copyArray');\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * The base implementation of `_.pullAllBy` without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to remove.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns `array`.\n */\nfunction basePullAll(array, values, iteratee, comparator) {\n  var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n      index = -1,\n      length = values.length,\n      seen = array;\n\n  if (array === values) {\n    values = copyArray(values);\n  }\n  if (iteratee) {\n    seen = arrayMap(array, baseUnary(iteratee));\n  }\n  while (++index < length) {\n    var fromIndex = 0,\n        value = values[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n      if (seen !== array) {\n        splice.call(seen, fromIndex, 1);\n      }\n      splice.call(array, fromIndex, 1);\n    }\n  }\n  return array;\n}\n\nmodule.exports = basePullAll;\n"]}