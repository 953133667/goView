{"version":3,"sources":["_createRecurryWrapper.js"],"names":[],"mappings":"AAAA,IAAI,aAAa,QAAQ,eAAR,CAAjB;AAAA,IACI,UAAU,QAAQ,YAAR,CADd;;AAGA;AACA,IAAI,YAAY,CAAhB;AAAA,IACI,gBAAgB,CADpB;AAAA,IAEI,mBAAmB,CAFvB;AAAA,IAGI,aAAa,CAHjB;AAAA,IAII,eAAe,EAJnB;AAAA,IAKI,qBAAqB,EALzB;;AAOA;;;;;;;;;;;;;;;;;;AAkBA,SAAS,oBAAT,CAA8B,IAA9B,EAAoC,OAApC,EAA6C,QAA7C,EAAuD,WAAvD,EAAoE,OAApE,EAA6E,QAA7E,EAAuF,OAAvF,EAAgG,MAAhG,EAAwG,GAAxG,EAA6G,KAA7G,EAAoH;AAClH,MAAI,UAAU,UAAU,UAAxB;AAAA,MACI,aAAa,UAAU,OAAV,GAAoB,SADrC;AAAA,MAEI,kBAAkB,UAAU,SAAV,GAAsB,OAF5C;AAAA,MAGI,cAAc,UAAU,QAAV,GAAqB,SAHvC;AAAA,MAII,mBAAmB,UAAU,SAAV,GAAsB,QAJ7C;;AAMA,aAAY,UAAU,YAAV,GAAyB,kBAArC;AACA,aAAW,EAAE,UAAU,kBAAV,GAA+B,YAAjC,CAAX;;AAEA,MAAI,EAAE,UAAU,gBAAZ,CAAJ,EAAmC;AACjC,eAAW,EAAE,YAAY,aAAd,CAAX;AACD;AACD,MAAI,UAAU,CACZ,IADY,EACN,OADM,EACG,OADH,EACY,WADZ,EACyB,UADzB,EACqC,gBADrC,EAEZ,eAFY,EAEK,MAFL,EAEa,GAFb,EAEkB,KAFlB,CAAd;;AAKA,MAAI,SAAS,SAAS,KAAT,CAAe,SAAf,EAA0B,OAA1B,CAAb;AACA,MAAI,WAAW,IAAX,CAAJ,EAAsB;AACpB,YAAQ,MAAR,EAAgB,OAAhB;AACD;AACD,SAAO,WAAP,GAAqB,WAArB;AACA,SAAO,MAAP;AACD;;AAED,OAAO,OAAP,GAAiB,oBAAjB","file":"_createRecurryWrapper-compiled.js","sourcesContent":["var isLaziable = require('./_isLaziable'),\n    setData = require('./_setData');\n\n/** Used to compose bitmasks for wrapper metadata. */\nvar BIND_FLAG = 1,\n    BIND_KEY_FLAG = 2,\n    CURRY_BOUND_FLAG = 4,\n    CURRY_FLAG = 8,\n    PARTIAL_FLAG = 32,\n    PARTIAL_RIGHT_FLAG = 64;\n\n/**\n * Creates a function that wraps `func` to continue currying.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`\n *  for more details.\n * @param {Function} wrapFunc The function to create the `func` wrapper.\n * @param {*} placeholder The placeholder value.\n * @param {*} [thisArg] The `this` binding of `func`.\n * @param {Array} [partials] The arguments to prepend to those provided to\n *  the new function.\n * @param {Array} [holders] The `partials` placeholder indexes.\n * @param {Array} [argPos] The argument positions of the new function.\n * @param {number} [ary] The arity cap of `func`.\n * @param {number} [arity] The arity of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createRecurryWrapper(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n  var isCurry = bitmask & CURRY_FLAG,\n      newHolders = isCurry ? holders : undefined,\n      newHoldersRight = isCurry ? undefined : holders,\n      newPartials = isCurry ? partials : undefined,\n      newPartialsRight = isCurry ? undefined : partials;\n\n  bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);\n  bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);\n\n  if (!(bitmask & CURRY_BOUND_FLAG)) {\n    bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);\n  }\n  var newData = [\n    func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\n    newHoldersRight, argPos, ary, arity\n  ];\n\n  var result = wrapFunc.apply(undefined, newData);\n  if (isLaziable(func)) {\n    setData(result, newData);\n  }\n  result.placeholder = placeholder;\n  return result;\n}\n\nmodule.exports = createRecurryWrapper;\n"]}