{"version":3,"sources":["_baseIntersection.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,aAAR,CAAf;AAAA,IACI,gBAAgB,QAAQ,kBAAR,CADpB;AAAA,IAEI,oBAAoB,QAAQ,sBAAR,CAFxB;AAAA,IAGI,WAAW,QAAQ,aAAR,CAHf;AAAA,IAII,YAAY,QAAQ,cAAR,CAJhB;AAAA,IAKI,WAAW,QAAQ,aAAR,CALf;;AAOA;AACA,IAAI,YAAY,KAAK,GAArB;;AAEA;;;;;;;;;;AAUA,SAAS,gBAAT,CAA0B,MAA1B,EAAkC,QAAlC,EAA4C,UAA5C,EAAwD;AACtD,MAAI,WAAW,aAAa,iBAAb,GAAiC,aAAhD;AAAA,MACI,SAAS,OAAO,CAAP,EAAU,MADvB;AAAA,MAEI,YAAY,OAAO,MAFvB;AAAA,MAGI,WAAW,SAHf;AAAA,MAII,SAAS,MAAM,SAAN,CAJb;AAAA,MAKI,YAAY,QALhB;AAAA,MAMI,SAAS,EANb;;AAQA,SAAO,UAAP,EAAmB;AACjB,QAAI,QAAQ,OAAO,QAAP,CAAZ;AACA,QAAI,YAAY,QAAhB,EAA0B;AACxB,cAAQ,SAAS,KAAT,EAAgB,UAAU,QAAV,CAAhB,CAAR;AACD;AACD,gBAAY,UAAU,MAAM,MAAhB,EAAwB,SAAxB,CAAZ;AACA,WAAO,QAAP,IAAmB,CAAC,UAAD,KAAgB,YAAa,UAAU,GAAV,IAAiB,MAAM,MAAN,IAAgB,GAA9D,IACf,IAAI,QAAJ,CAAa,YAAY,KAAzB,CADe,GAEf,SAFJ;AAGD;AACD,UAAQ,OAAO,CAAP,CAAR;;AAEA,MAAI,QAAQ,CAAC,CAAb;AAAA,MACI,OAAO,OAAO,CAAP,CADX;;AAGA,SACA,OAAO,EAAE,KAAF,GAAU,MAAV,IAAoB,OAAO,MAAP,GAAgB,SAA3C,EAAsD;AACpD,QAAI,QAAQ,MAAM,KAAN,CAAZ;AAAA,QACI,WAAW,WAAW,SAAS,KAAT,CAAX,GAA6B,KAD5C;;AAGA,YAAS,cAAc,UAAU,CAAzB,GAA8B,KAA9B,GAAsC,CAA9C;AACA,QAAI,EAAE,OACE,SAAS,IAAT,EAAe,QAAf,CADF,GAEE,SAAS,MAAT,EAAiB,QAAjB,EAA2B,UAA3B,CAFJ,CAAJ,EAGO;AACL,iBAAW,SAAX;AACA,aAAO,EAAE,QAAT,EAAmB;AACjB,YAAI,QAAQ,OAAO,QAAP,CAAZ;AACA,YAAI,EAAE,QACE,SAAS,KAAT,EAAgB,QAAhB,CADF,GAEE,SAAS,OAAO,QAAP,CAAT,EAA2B,QAA3B,EAAqC,UAArC,CAFJ,CAAJ,EAGM;AACJ,mBAAS,KAAT;AACD;AACF;AACD,UAAI,IAAJ,EAAU;AACR,aAAK,IAAL,CAAU,QAAV;AACD;AACD,aAAO,IAAP,CAAY,KAAZ;AACD;AACF;AACD,SAAO,MAAP;AACD;;AAED,OAAO,OAAP,GAAiB,gBAAjB","file":"_baseIntersection-compiled.js","sourcesContent":["var SetCache = require('./_SetCache'),\n    arrayIncludes = require('./_arrayIncludes'),\n    arrayIncludesWith = require('./_arrayIncludesWith'),\n    arrayMap = require('./_arrayMap'),\n    baseUnary = require('./_baseUnary'),\n    cacheHas = require('./_cacheHas');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * The base implementation of methods like `_.intersection`, without support\n * for iteratee shorthands, that accepts an array of arrays to inspect.\n *\n * @private\n * @param {Array} arrays The arrays to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of shared values.\n */\nfunction baseIntersection(arrays, iteratee, comparator) {\n  var includes = comparator ? arrayIncludesWith : arrayIncludes,\n      length = arrays[0].length,\n      othLength = arrays.length,\n      othIndex = othLength,\n      caches = Array(othLength),\n      maxLength = Infinity,\n      result = [];\n\n  while (othIndex--) {\n    var array = arrays[othIndex];\n    if (othIndex && iteratee) {\n      array = arrayMap(array, baseUnary(iteratee));\n    }\n    maxLength = nativeMin(array.length, maxLength);\n    caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n      ? new SetCache(othIndex && array)\n      : undefined;\n  }\n  array = arrays[0];\n\n  var index = -1,\n      seen = caches[0];\n\n  outer:\n  while (++index < length && result.length < maxLength) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (!(seen\n          ? cacheHas(seen, computed)\n          : includes(result, computed, comparator)\n        )) {\n      othIndex = othLength;\n      while (--othIndex) {\n        var cache = caches[othIndex];\n        if (!(cache\n              ? cacheHas(cache, computed)\n              : includes(arrays[othIndex], computed, comparator))\n            ) {\n          continue outer;\n        }\n      }\n      if (seen) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseIntersection;\n"]}