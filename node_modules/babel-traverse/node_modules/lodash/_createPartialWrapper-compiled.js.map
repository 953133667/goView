{"version":3,"sources":["_createPartialWrapper.js"],"names":[],"mappings":"AAAA,IAAI,QAAQ,QAAQ,UAAR,CAAZ;AAAA,IACI,oBAAoB,QAAQ,sBAAR,CADxB;AAAA,IAEI,OAAO,QAAQ,SAAR,CAFX;;AAIA;AACA,IAAI,YAAY,CAAhB;;AAEA;;;;;;;;;;;;;AAaA,SAAS,oBAAT,CAA8B,IAA9B,EAAoC,OAApC,EAA6C,OAA7C,EAAsD,QAAtD,EAAgE;AAC9D,MAAI,SAAS,UAAU,SAAvB;AAAA,MACI,OAAO,kBAAkB,IAAlB,CADX;;AAGA,WAAS,OAAT,GAAmB;AACjB,QAAI,YAAY,CAAC,CAAjB;AAAA,QACI,aAAa,UAAU,MAD3B;AAAA,QAEI,YAAY,CAAC,CAFjB;AAAA,QAGI,aAAa,SAAS,MAH1B;AAAA,QAII,OAAO,MAAM,aAAa,UAAnB,CAJX;AAAA,QAKI,KAAM,QAAQ,SAAS,IAAjB,IAAyB,gBAAgB,OAA1C,GAAqD,IAArD,GAA4D,IALrE;;AAOA,WAAO,EAAE,SAAF,GAAc,UAArB,EAAiC;AAC/B,WAAK,SAAL,IAAkB,SAAS,SAAT,CAAlB;AACD;AACD,WAAO,YAAP,EAAqB;AACnB,WAAK,WAAL,IAAoB,UAAU,EAAE,SAAZ,CAApB;AACD;AACD,WAAO,MAAM,EAAN,EAAU,SAAS,OAAT,GAAmB,IAA7B,EAAmC,IAAnC,CAAP;AACD;AACD,SAAO,OAAP;AACD;;AAED,OAAO,OAAP,GAAiB,oBAAjB","file":"_createPartialWrapper-compiled.js","sourcesContent":["var apply = require('./_apply'),\n    createCtorWrapper = require('./_createCtorWrapper'),\n    root = require('./_root');\n\n/** Used to compose bitmasks for wrapper metadata. */\nvar BIND_FLAG = 1;\n\n/**\n * Creates a function that wraps `func` to invoke it with the `this` binding\n * of `thisArg` and `partials` prepended to the arguments it receives.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`\n *  for more details.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} partials The arguments to prepend to those provided to\n *  the new function.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createPartialWrapper(func, bitmask, thisArg, partials) {\n  var isBind = bitmask & BIND_FLAG,\n      Ctor = createCtorWrapper(func);\n\n  function wrapper() {\n    var argsIndex = -1,\n        argsLength = arguments.length,\n        leftIndex = -1,\n        leftLength = partials.length,\n        args = Array(leftLength + argsLength),\n        fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n\n    while (++leftIndex < leftLength) {\n      args[leftIndex] = partials[leftIndex];\n    }\n    while (argsLength--) {\n      args[leftIndex++] = arguments[++argsIndex];\n    }\n    return apply(fn, isBind ? thisArg : this, args);\n  }\n  return wrapper;\n}\n\nmodule.exports = createPartialWrapper;\n"]}