{"version":3,"sources":["_baseWrapperValue.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,gBAAR,CAAlB;AAAA,IACI,YAAY,QAAQ,cAAR,CADhB;AAAA,IAEI,cAAc,QAAQ,gBAAR,CAFlB;;AAIA;;;;;;;;;;AAUA,SAAS,gBAAT,CAA0B,KAA1B,EAAiC,OAAjC,EAA0C;AACxC,MAAI,SAAS,KAAb;AACA,MAAI,kBAAkB,WAAtB,EAAmC;AACjC,aAAS,OAAO,KAAP,EAAT;AACD;AACD,SAAO,YAAY,OAAZ,EAAqB,UAAS,MAAT,EAAiB,MAAjB,EAAyB;AACnD,WAAO,OAAO,IAAP,CAAY,KAAZ,CAAkB,OAAO,OAAzB,EAAkC,UAAU,CAAC,MAAD,CAAV,EAAoB,OAAO,IAA3B,CAAlC,CAAP;AACD,GAFM,EAEJ,MAFI,CAAP;AAGD;;AAED,OAAO,OAAP,GAAiB,gBAAjB","file":"_baseWrapperValue-compiled.js","sourcesContent":["var LazyWrapper = require('./_LazyWrapper'),\n    arrayPush = require('./_arrayPush'),\n    arrayReduce = require('./_arrayReduce');\n\n/**\n * The base implementation of `wrapperValue` which returns the result of\n * performing a sequence of actions on the unwrapped `value`, where each\n * successive action is supplied the return value of the previous.\n *\n * @private\n * @param {*} value The unwrapped value.\n * @param {Array} actions Actions to perform to resolve the unwrapped value.\n * @returns {*} Returns the resolved value.\n */\nfunction baseWrapperValue(value, actions) {\n  var result = value;\n  if (result instanceof LazyWrapper) {\n    result = result.value();\n  }\n  return arrayReduce(actions, function(result, action) {\n    return action.func.apply(action.thisArg, arrayPush([result], action.args));\n  }, result);\n}\n\nmodule.exports = baseWrapperValue;\n"]}