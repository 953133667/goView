{"version":3,"sources":["_baseMergeDeep.js"],"names":[],"mappings":"AAAA,IAAI,mBAAmB,QAAQ,qBAAR,CAAvB;AAAA,IACI,YAAY,QAAQ,cAAR,CADhB;AAAA,IAEI,YAAY,QAAQ,cAAR,CAFhB;AAAA,IAGI,cAAc,QAAQ,eAAR,CAHlB;AAAA,IAII,UAAU,QAAQ,WAAR,CAJd;AAAA,IAKI,oBAAoB,QAAQ,qBAAR,CALxB;AAAA,IAMI,aAAa,QAAQ,cAAR,CANjB;AAAA,IAOI,WAAW,QAAQ,YAAR,CAPf;AAAA,IAQI,gBAAgB,QAAQ,iBAAR,CARpB;AAAA,IASI,eAAe,QAAQ,gBAAR,CATnB;AAAA,IAUI,gBAAgB,QAAQ,iBAAR,CAVpB;;AAYA;;;;;;;;;;;;;;;AAeA,SAAS,aAAT,CAAuB,MAAvB,EAA+B,MAA/B,EAAuC,GAAvC,EAA4C,QAA5C,EAAsD,SAAtD,EAAiE,UAAjE,EAA6E,KAA7E,EAAoF;AAClF,MAAI,WAAW,OAAO,GAAP,CAAf;AAAA,MACI,WAAW,OAAO,GAAP,CADf;AAAA,MAEI,UAAU,MAAM,GAAN,CAAU,QAAV,CAFd;;AAIA,MAAI,OAAJ,EAAa;AACX,qBAAiB,MAAjB,EAAyB,GAAzB,EAA8B,OAA9B;AACA;AACD;AACD,MAAI,WAAW,aACX,WAAW,QAAX,EAAqB,QAArB,EAAgC,MAAM,EAAtC,EAA2C,MAA3C,EAAmD,MAAnD,EAA2D,KAA3D,CADW,GAEX,SAFJ;;AAIA,MAAI,WAAW,aAAa,SAA5B;;AAEA,MAAI,QAAJ,EAAc;AACZ,eAAW,QAAX;AACA,QAAI,QAAQ,QAAR,KAAqB,aAAa,QAAb,CAAzB,EAAiD;AAC/C,UAAI,QAAQ,QAAR,CAAJ,EAAuB;AACrB,mBAAW,QAAX;AACD,OAFD,MAGK,IAAI,kBAAkB,QAAlB,CAAJ,EAAiC;AACpC,mBAAW,UAAU,QAAV,CAAX;AACD,OAFI,MAGA;AACH,mBAAW,KAAX;AACA,mBAAW,UAAU,QAAV,EAAoB,IAApB,CAAX;AACD;AACF,KAXD,MAYK,IAAI,cAAc,QAAd,KAA2B,YAAY,QAAZ,CAA/B,EAAsD;AACzD,UAAI,YAAY,QAAZ,CAAJ,EAA2B;AACzB,mBAAW,cAAc,QAAd,CAAX;AACD,OAFD,MAGK,IAAI,CAAC,SAAS,QAAT,CAAD,IAAwB,YAAY,WAAW,QAAX,CAAxC,EAA+D;AAClE,mBAAW,KAAX;AACA,mBAAW,UAAU,QAAV,EAAoB,IAApB,CAAX;AACD,OAHI,MAIA;AACH,mBAAW,QAAX;AACD;AACF,KAXI,MAYA;AACH,iBAAW,KAAX;AACD;AACF;AACD,QAAM,GAAN,CAAU,QAAV,EAAoB,QAApB;;AAEA,MAAI,QAAJ,EAAc;AACZ;AACA,cAAU,QAAV,EAAoB,QAApB,EAA8B,QAA9B,EAAwC,UAAxC,EAAoD,KAApD;AACD;AACD,QAAM,QAAN,EAAgB,QAAhB;AACA,mBAAiB,MAAjB,EAAyB,GAAzB,EAA8B,QAA9B;AACD;;AAED,OAAO,OAAP,GAAiB,aAAjB","file":"_baseMergeDeep-compiled.js","sourcesContent":["var assignMergeValue = require('./_assignMergeValue'),\n    baseClone = require('./_baseClone'),\n    copyArray = require('./_copyArray'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    isFunction = require('./isFunction'),\n    isObject = require('./isObject'),\n    isPlainObject = require('./isPlainObject'),\n    isTypedArray = require('./isTypedArray'),\n    toPlainObject = require('./toPlainObject');\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = object[key],\n      srcValue = source[key],\n      stacked = stack.get(srcValue);\n\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n  var newValue = customizer\n    ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n    : undefined;\n\n  var isCommon = newValue === undefined;\n\n  if (isCommon) {\n    newValue = srcValue;\n    if (isArray(srcValue) || isTypedArray(srcValue)) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      }\n      else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      }\n      else {\n        isCommon = false;\n        newValue = baseClone(srcValue, true);\n      }\n    }\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      }\n      else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {\n        isCommon = false;\n        newValue = baseClone(srcValue, true);\n      }\n      else {\n        newValue = objValue;\n      }\n    }\n    else {\n      isCommon = false;\n    }\n  }\n  stack.set(srcValue, newValue);\n\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n  }\n  stack['delete'](srcValue);\n  assignMergeValue(object, key, newValue);\n}\n\nmodule.exports = baseMergeDeep;\n"]}