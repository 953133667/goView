{"version":3,"sources":["_isIterateeCall.js"],"names":[],"mappings":"AAAA,IAAI,KAAK,QAAQ,MAAR,CAAT;AAAA,IACI,cAAc,QAAQ,eAAR,CADlB;AAAA,IAEI,UAAU,QAAQ,YAAR,CAFd;AAAA,IAGI,WAAW,QAAQ,YAAR,CAHf;;AAKA;;;;;;;;;;AAUA,SAAS,cAAT,CAAwB,KAAxB,EAA+B,KAA/B,EAAsC,MAAtC,EAA8C;AAC5C,MAAI,CAAC,SAAS,MAAT,CAAL,EAAuB;AACrB,WAAO,KAAP;AACD;AACD,MAAI,OAAO,OAAO,KAAlB;AACA,MAAI,QAAQ,QAAR,GACK,YAAY,MAAZ,KAAuB,QAAQ,KAAR,EAAe,OAAO,MAAtB,CAD5B,GAEK,QAAQ,QAAR,IAAoB,SAAS,MAFtC,EAGM;AACJ,WAAO,GAAG,OAAO,KAAP,CAAH,EAAkB,KAAlB,CAAP;AACD;AACD,SAAO,KAAP;AACD;;AAED,OAAO,OAAP,GAAiB,cAAjB","file":"_isIterateeCall-compiled.js","sourcesContent":["var eq = require('./eq'),\n    isArrayLike = require('./isArrayLike'),\n    isIndex = require('./_isIndex'),\n    isObject = require('./isObject');\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nmodule.exports = isIterateeCall;\n"]}