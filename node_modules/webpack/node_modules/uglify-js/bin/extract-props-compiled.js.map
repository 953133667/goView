{"version":3,"sources":["extract-props.js"],"names":[],"mappings":";;AAEA;;AAEA,IAAI,KAAK,QAAQ,eAAR,CAAT;AACA,IAAI,KAAK,QAAQ,IAAR,CAAT;AACA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;AACA,IAAI,OAAO,MACN,QADM,CACG,GADH,EACQ,aADR,EAEN,IAFL;AAGA,IAAI,QAAQ,KAAK,CAAL,CAAO,KAAP,EAAZ;AACA,IAAI,SAAS;AACT,UAAM,EADG;AAET,WAAO;AAFE,CAAb;;AAKA,IAAI,KAAK,CAAT,EAAY,IAAI;AACZ,aAAS,KAAK,KAAL,CAAW,GAAG,YAAH,CAAgB,KAAK,CAArB,EAAwB,MAAxB,CAAX,CAAT;AACH,CAFW,CAEV,OAAM,EAAN,EAAU,CAAE;;AAEd,MAAM,OAAN,CAAc,QAAd;;AAEA,IAAI,KAAK,CAAT,EAAY;AACR,OAAG,aAAH,CAAiB,KAAK,CAAtB,EAAyB,KAAK,SAAL,CAAe,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAzB,EAA0D,MAA1D;AACH,CAFD,MAEO;AACH,YAAQ,GAAR,CAAY,IAAZ,EAAkB,KAAK,SAAL,CAAe,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAlB;AACH;;AAED,SAAS,QAAT,CAAkB,QAAlB,EAA4B;AACxB,QAAI,OAAO,GAAG,YAAH,CAAgB,QAAhB,EAA0B,MAA1B,CAAX;AACA,QAAI,MAAM,GAAG,KAAH,CAAS,IAAT,CAAV;;AAEA,QAAI,IAAJ,CAAS,IAAI,GAAG,UAAP,CAAkB,UAAS,IAAT,EAAc;AACrC,YAAI,gBAAgB,GAAG,gBAAvB,EAAyC;AACrC,gBAAI,KAAK,GAAT;AACH,SAFD,MAGK,IAAI,gBAAgB,GAAG,kBAAvB,EAA2C;AAC5C,gBAAI,KAAK,GAAL,CAAS,IAAb;AACH,SAFI,MAGA,IAAI,gBAAgB,GAAG,OAAvB,EAAgC;AACjC,gBAAI,KAAK,QAAT;AACH,SAFI,MAGA,IAAI,gBAAgB,GAAG,OAAvB,EAAgC;AACjC,uBAAW,KAAK,QAAhB;AACH;AACJ,KAbQ,CAAT;;AAeA,aAAS,UAAT,CAAoB,IAApB,EAA0B;AACtB,YAAI,MAAM,EAAV;AACA,YAAI;AACA,aAAC,SAAS,IAAT,CAAc,IAAd,EAAmB;AAChB,qBAAK,IAAL,CAAU,IAAI,GAAG,UAAP,CAAkB,UAAS,IAAT,EAAc;AACtC,wBAAI,gBAAgB,GAAG,OAAvB,EAAgC;AAC5B,6BAAK,KAAK,GAAV;AACA,+BAAO,IAAP;AACH;AACD,wBAAI,gBAAgB,GAAG,UAAvB,EAAmC;AAC/B,4BAAI,KAAK,KAAT;AACA,+BAAO,IAAP;AACH;AACD,wBAAI,gBAAgB,GAAG,eAAvB,EAAwC;AACpC,6BAAK,KAAK,UAAV;AACA,6BAAK,KAAK,WAAV;AACA,+BAAO,IAAP;AACH;AACD,0BAAM,GAAN;AACH,iBAfS,CAAV;AAgBH,aAjBD,EAiBG,IAjBH;AAkBH,SAnBD,CAmBE,OAAM,EAAN,EAAU;AACR,gBAAI,OAAO,GAAX,EAAgB,MAAM,EAAN;AACnB;AACJ;;AAED,aAAS,GAAT,CAAa,IAAb,EAAmB;AACf,eAAO,KAAP,CAAa,IAAb,IAAqB,IAArB;AACH;AACJ","file":"extract-props-compiled.js","sourcesContent":["#! /usr/bin/env node\n\n\"use strict\";\n\nvar U2 = require(\"../tools/node\");\nvar fs = require(\"fs\");\nvar yargs = require(\"yargs\");\nvar ARGS = yargs\n    .describe(\"o\", \"Output file\")\n    .argv;\nvar files = ARGS._.slice();\nvar output = {\n    vars: {},\n    props: {}\n};\n\nif (ARGS.o) try {\n    output = JSON.parse(fs.readFileSync(ARGS.o, \"utf8\"));\n} catch(ex) {}\n\nfiles.forEach(getProps);\n\nif (ARGS.o) {\n    fs.writeFileSync(ARGS.o, JSON.stringify(output, null, 2), \"utf8\");\n} else {\n    console.log(\"%s\", JSON.stringify(output, null, 2));\n}\n\nfunction getProps(filename) {\n    var code = fs.readFileSync(filename, \"utf8\");\n    var ast = U2.parse(code);\n\n    ast.walk(new U2.TreeWalker(function(node){\n        if (node instanceof U2.AST_ObjectKeyVal) {\n            add(node.key);\n        }\n        else if (node instanceof U2.AST_ObjectProperty) {\n            add(node.key.name);\n        }\n        else if (node instanceof U2.AST_Dot) {\n            add(node.property);\n        }\n        else if (node instanceof U2.AST_Sub) {\n            addStrings(node.property);\n        }\n    }));\n\n    function addStrings(node) {\n        var out = {};\n        try {\n            (function walk(node){\n                node.walk(new U2.TreeWalker(function(node){\n                    if (node instanceof U2.AST_Seq) {\n                        walk(node.cdr);\n                        return true;\n                    }\n                    if (node instanceof U2.AST_String) {\n                        add(node.value);\n                        return true;\n                    }\n                    if (node instanceof U2.AST_Conditional) {\n                        walk(node.consequent);\n                        walk(node.alternative);\n                        return true;\n                    }\n                    throw out;\n                }));\n            })(node);\n        } catch(ex) {\n            if (ex !== out) throw ex;\n        }\n    }\n\n    function add(name) {\n        output.props[name] = true;\n    }\n}\n"]}