{"version":3,"sources":["CachePlugin.js"],"names":[],"mappings":"AAAA;;;;AAIA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;;AAEA,SAAS,WAAT,CAAqB,KAArB,EAA4B;AAC3B,MAAK,KAAL,GAAa,SAAS,EAAtB;AACA;AACD,OAAO,OAAP,GAAiB,WAAjB;;AAEA,YAAY,SAAZ,CAAsB,KAAtB,GAA8B,UAAS,QAAT,EAAmB;AAChD,KAAG,MAAM,OAAN,CAAc,SAAS,SAAvB,CAAH,EAAsC;AACrC,WAAS,SAAT,CAAmB,OAAnB,CAA2B,UAAS,CAAT,EAAY,GAAZ,EAAiB;AAC3C,KAAE,KAAF,CAAQ,IAAI,WAAJ,CAAgB,KAAK,KAAL,CAAW,GAAX,IAAkB,KAAK,KAAL,CAAW,GAAX,KAAmB,EAArD,CAAR;AACA,GAFD,EAEG,IAFH;AAGA,EAJD,MAIO;AACN,WAAS,MAAT,CAAgB,aAAhB,EAA+B,UAAS,WAAT,EAAsB;AACpD,eAAY,KAAZ,GAAoB,KAAK,KAAzB;AACA,GAF8B,CAE7B,IAF6B,CAExB,IAFwB,CAA/B;AAGA,WAAS,MAAT,CAAgB,KAAhB,EAAuB,UAAS,QAAT,EAAmB,QAAnB,EAA6B;AACnD,OAAG,CAAC,SAAS,gCAAb,EAA+C,OAAO,UAAP;AAC/C,OAAI,KAAK,SAAS,eAAlB;AACA,OAAI,SAAS,SAAS,cAAT,GAA0B,EAAvC;AACA,SAAM,OAAN,CAAc,SAAS,gCAAvB,EAAyD,UAAS,IAAT,EAAe,QAAf,EAAyB;AACjF,OAAG,IAAH,CAAQ,IAAR,EAAc,UAAS,GAAT,EAAc,IAAd,EAAoB;AACjC,SAAG,GAAH,EAAQ;AACP,UAAG,IAAI,IAAJ,KAAa,QAAhB,EAA0B,OAAO,UAAP;AAC1B,aAAO,SAAS,GAAT,CAAP;AACA;;AAED,YAAO,IAAP,IAAe,KAAK,KAAL,IAAc,QAA7B;AACA;AACA,KARD;AASA,IAVD,EAUG,QAVH;AAWA,GAfD;AAgBA,WAAS,MAAT,CAAgB,eAAhB,EAAiC,UAAS,WAAT,EAAsB,QAAtB,EAAgC;AAChE,eAAY,QAAZ,CAAqB,gCAArB,GAAwD,YAAY,gBAApE;AACA,eAAY,QAAZ,CAAqB,mCAArB,GAA2D,YAAY,mBAAvE;AACA;AACA,GAJD;AAKA;AACD,CA/BD","file":"CachePlugin-compiled.js","sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nvar async = require(\"async\");\r\n\r\nfunction CachePlugin(cache) {\r\n\tthis.cache = cache || {};\r\n}\r\nmodule.exports = CachePlugin;\r\n\r\nCachePlugin.prototype.apply = function(compiler) {\r\n\tif(Array.isArray(compiler.compilers)) {\r\n\t\tcompiler.compilers.forEach(function(c, idx) {\r\n\t\t\tc.apply(new CachePlugin(this.cache[idx] = this.cache[idx] || {}));\r\n\t\t}, this);\r\n\t} else {\r\n\t\tcompiler.plugin(\"compilation\", function(compilation) {\r\n\t\t\tcompilation.cache = this.cache;\r\n\t\t}.bind(this));\r\n\t\tcompiler.plugin(\"run\", function(compiler, callback) {\r\n\t\t\tif(!compiler._lastCompilationFileDependencies) return callback();\r\n\t\t\tvar fs = compiler.inputFileSystem;\r\n\t\t\tvar fileTs = compiler.fileTimestamps = {};\r\n\t\t\tasync.forEach(compiler._lastCompilationFileDependencies, function(file, callback) {\r\n\t\t\t\tfs.stat(file, function(err, stat) {\r\n\t\t\t\t\tif(err) {\r\n\t\t\t\t\t\tif(err.code === \"ENOENT\") return callback();\r\n\t\t\t\t\t\treturn callback(err);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfileTs[file] = stat.mtime || Infinity;\r\n\t\t\t\t\tcallback();\r\n\t\t\t\t});\r\n\t\t\t}, callback);\r\n\t\t});\r\n\t\tcompiler.plugin(\"after-compile\", function(compilation, callback) {\r\n\t\t\tcompilation.compiler._lastCompilationFileDependencies = compilation.fileDependencies;\r\n\t\t\tcompilation.compiler._lastCompilationContextDependencies = compilation.contextDependencies;\r\n\t\t\tcallback();\r\n\t\t});\r\n\t}\r\n};\r\n"]}