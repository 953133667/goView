{"version":3,"sources":["NodeEnvironmentPlugin.js"],"names":[],"mappings":"AAAA;;;;AAIA,IAAI,sBAAsB,QAAQ,uBAAR,CAA1B;AACA,IAAI,uBAAuB,QAAQ,wBAAR,CAA3B;AACA,IAAI,wBAAwB,QAAQ,4CAAR,CAA5B;AACA,IAAI,wBAAwB,QAAQ,4CAAR,CAA5B;;AAEA,SAAS,qBAAT,GAAiC,CAAE;AACnC,OAAO,OAAP,GAAiB,qBAAjB;AACA,sBAAsB,SAAtB,CAAgC,KAAhC,GAAwC,UAAS,QAAT,EAAmB;AAC1D,UAAS,eAAT,GAA2B,IAAI,qBAAJ,EAA3B;AACA,KAAI,kBAAkB,SAAS,eAAT,GAA2B,IAAI,qBAAJ,CAA0B,SAAS,eAAnC,EAAoD,KAApD,CAAjD;AACA,UAAS,SAAT,CAAmB,MAAnB,CAA0B,UAA1B,GAAuC,SAAS,eAAhD;AACA,UAAS,SAAT,CAAmB,OAAnB,CAA2B,UAA3B,GAAwC,SAAS,eAAjD;AACA,UAAS,SAAT,CAAmB,MAAnB,CAA0B,UAA1B,GAAuC,SAAS,eAAhD;AACA,UAAS,gBAAT,GAA4B,IAAI,oBAAJ,EAA5B;AACA,UAAS,eAAT,GAA2B,IAAI,mBAAJ,CAAwB,SAAS,eAAjC,CAA3B;AACA,UAAS,MAAT,CAAgB,KAAhB,EAAuB,UAAS,QAAT,EAAmB,QAAnB,EAA6B;AACnD,MAAG,SAAS,eAAT,KAA6B,eAAhC,EACC,gBAAgB,KAAhB;AACD;AACA,EAJD;AAKA,CAbD","file":"NodeEnvironmentPlugin-compiled.js","sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nvar NodeWatchFileSystem = require(\"./NodeWatchFileSystem\");\r\nvar NodeOutputFileSystem = require(\"./NodeOutputFileSystem\");\r\nvar NodeJsInputFileSystem = require(\"enhanced-resolve/lib/NodeJsInputFileSystem\");\r\nvar CachedInputFileSystem = require(\"enhanced-resolve/lib/CachedInputFileSystem\");\r\n\r\nfunction NodeEnvironmentPlugin() {}\r\nmodule.exports = NodeEnvironmentPlugin;\r\nNodeEnvironmentPlugin.prototype.apply = function(compiler) {\r\n\tcompiler.inputFileSystem = new NodeJsInputFileSystem();\r\n\tvar inputFileSystem = compiler.inputFileSystem = new CachedInputFileSystem(compiler.inputFileSystem, 60000);\r\n\tcompiler.resolvers.normal.fileSystem = compiler.inputFileSystem;\r\n\tcompiler.resolvers.context.fileSystem = compiler.inputFileSystem;\r\n\tcompiler.resolvers.loader.fileSystem = compiler.inputFileSystem;\r\n\tcompiler.outputFileSystem = new NodeOutputFileSystem();\r\n\tcompiler.watchFileSystem = new NodeWatchFileSystem(compiler.inputFileSystem);\r\n\tcompiler.plugin(\"run\", function(compiler, callback) {\r\n\t\tif(compiler.inputFileSystem === inputFileSystem)\r\n\t\t\tinputFileSystem.purge();\r\n\t\tcallback();\r\n\t});\r\n};\r\n"]}