{"version":3,"sources":["RequireContextDependencyParserPlugin.js"],"names":[],"mappings":"AAAA;;;;AAIA,IAAI,iBAAiB,QAAQ,mBAAR,CAArB;AACA,IAAI,2BAA2B,QAAQ,4BAAR,CAA/B;;AAEA,OAAO,OAAP,GAAiB,eAAe,MAAf,CAAsB;AACtC,yBAAwB,UAAS,IAAT,EAAe;AACtC,MAAI,SAAS,UAAb;AACA,MAAI,YAAY,IAAhB;AACA,UAAO,KAAK,SAAL,CAAe,MAAtB;AACC,QAAK,CAAL;AACC,QAAI,aAAa,KAAK,kBAAL,CAAwB,KAAK,SAAL,CAAe,CAAf,CAAxB,CAAjB;AACA,QAAG,CAAC,WAAW,QAAX,EAAJ,EAA2B;AAC3B,aAAS,WAAW,MAApB;AACA;AACD,QAAK,CAAL;AACC,QAAI,gBAAgB,KAAK,kBAAL,CAAwB,KAAK,SAAL,CAAe,CAAf,CAAxB,CAApB;AACA,QAAG,CAAC,cAAc,SAAd,EAAJ,EAA+B;AAC/B,gBAAY,cAAc,IAA1B;AACA;AACD,QAAK,CAAL;AACC,QAAI,cAAc,KAAK,kBAAL,CAAwB,KAAK,SAAL,CAAe,CAAf,CAAxB,CAAlB;AACA,QAAG,CAAC,YAAY,QAAZ,EAAJ,EAA4B;AAC5B,QAAI,MAAM,IAAI,wBAAJ,CAA6B,YAAY,MAAzC,EAAiD,SAAjD,EAA4D,MAA5D,EAAoE,KAAK,KAAzE,CAAV;AACA,QAAI,GAAJ,GAAU,KAAK,GAAf;AACA,QAAI,QAAJ,GAAe,KAAK,KAAL,CAAW,KAA1B;AACA,SAAK,KAAL,CAAW,OAAX,CAAmB,aAAnB,CAAiC,GAAjC;AACA,WAAO,IAAP;AAlBF;AAoBA;AAxBqC,CAAtB,CAAjB","file":"RequireContextDependencyParserPlugin-compiled.js","sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nvar AbstractPlugin = require(\"../AbstractPlugin\");\r\nvar RequireContextDependency = require(\"./RequireContextDependency\");\r\n\r\nmodule.exports = AbstractPlugin.create({\r\n\t\"call require.context\": function(expr) {\r\n\t\tvar regExp = /^\\.\\/.*$/;\r\n\t\tvar recursive = true;\r\n\t\tswitch(expr.arguments.length) {\r\n\t\t\tcase 3:\r\n\t\t\t\tvar regExpExpr = this.evaluateExpression(expr.arguments[2]);\r\n\t\t\t\tif(!regExpExpr.isRegExp()) return;\r\n\t\t\t\tregExp = regExpExpr.regExp;\r\n\t\t\t\t// falls through\r\n\t\t\tcase 2:\r\n\t\t\t\tvar recursiveExpr = this.evaluateExpression(expr.arguments[1]);\r\n\t\t\t\tif(!recursiveExpr.isBoolean()) return;\r\n\t\t\t\trecursive = recursiveExpr.bool;\r\n\t\t\t\t// falls through\r\n\t\t\tcase 1:\r\n\t\t\t\tvar requestExpr = this.evaluateExpression(expr.arguments[0]);\r\n\t\t\t\tif(!requestExpr.isString()) return;\r\n\t\t\t\tvar dep = new RequireContextDependency(requestExpr.string, recursive, regExp, expr.range);\r\n\t\t\t\tdep.loc = expr.loc;\r\n\t\t\t\tdep.optional = this.scope.inTry;\r\n\t\t\t\tthis.state.current.addDependency(dep);\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n});\r\n"]}