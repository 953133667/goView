{"version":3,"sources":["RequireEnsureDependenciesBlockParserPlugin.js"],"names":[],"mappings":"AAAA;;;;AAIA,IAAI,iBAAiB,QAAQ,mBAAR,CAArB;AACA,IAAI,iCAAiC,QAAQ,kCAAR,CAArC;AACA,IAAI,8BAA8B,QAAQ,+BAAR,CAAlC;AACA,IAAI,wBAAwB,QAAQ,yBAAR,CAA5B;;AAEA,OAAO,OAAP,GAAiB,eAAe,MAAf,CAAsB;AACtC,wBAAuB,UAAS,IAAT,EAAe;AACrC,MAAI,YAAY,IAAhB;AAAA,MACC,iBAAiB,IADlB;AAEA,UAAO,KAAK,SAAL,CAAe,MAAtB;AACC,QAAK,CAAL;AACC,QAAI,gBAAgB,KAAK,kBAAL,CAAwB,KAAK,SAAL,CAAe,CAAf,CAAxB,CAApB;AACA,QAAG,CAAC,cAAc,QAAd,EAAJ,EAA8B;AAC9B,qBAAiB,cAAc,KAA/B;AACA,gBAAY,cAAc,MAA1B;AACA;AACD,QAAK,CAAL;AACC,QAAI,mBAAmB,KAAK,kBAAL,CAAwB,KAAK,SAAL,CAAe,CAAf,CAAxB,CAAvB;AACA,QAAI,oBAAoB,iBAAiB,OAAjB,KAA6B,iBAAiB,KAA9C,GAAsD,CAAC,gBAAD,CAA9E;AACA,QAAI,kBAAkB,KAAK,SAAL,CAAe,CAAf,CAAtB;AACA,QAAI,eAAe,sBAAsB,eAAtB,CAAnB;;AAEA,QAAG,YAAH,EAAiB;AAChB,UAAK,eAAL,CAAqB,aAAa,WAAlC;AACA;;AAED,QAAI,MAAM,IAAI,8BAAJ,CAAmC,IAAnC,EAAyC,eAAe,aAAa,EAA5B,GAAiC,eAA1E,EAA2F,SAA3F,EAAsG,cAAtG,EAAsH,KAAK,KAAL,CAAW,MAAjI,EAAyI,KAAK,GAA9I,CAAV;AACA,QAAI,MAAM,KAAK,KAAL,CAAW,OAArB;AACA,SAAK,KAAL,CAAW,OAAX,GAAqB,GAArB;AACA,QAAI;AACH,SAAI,SAAS,KAAb;AACA,UAAK,OAAL,CAAa,EAAb,EAAiB,YAAW;AAC3B,wBAAkB,OAAlB,CAA0B,UAAS,EAAT,EAAa;AACtC,WAAG,GAAG,QAAH,EAAH,EAAkB;AACjB,YAAI,OAAO,IAAI,2BAAJ,CAAgC,GAAG,MAAnC,EAA2C,GAAG,KAA9C,CAAX;AACA,aAAK,GAAL,GAAW,IAAI,GAAf;AACA,YAAI,aAAJ,CAAkB,IAAlB;AACA,QAJD,MAIO;AACN,iBAAS,IAAT;AACA;AACD,OARD;AASA,MAVD;AAWA,SAAG,MAAH,EAAW;AACV;AACA;AACD,SAAG,YAAH,EAAiB;AAChB,UAAG,aAAa,EAAb,CAAgB,IAAhB,CAAqB,IAArB,KAA8B,gBAAjC,EACC,KAAK,aAAL,CAAmB,aAAa,EAAb,CAAgB,IAAnC,EADD,KAGC,KAAK,cAAL,CAAoB,aAAa,EAAb,CAAgB,IAApC;AACD;AACD,SAAI,QAAJ,CAAa,GAAb;AACA,KAvBD,SAuBU;AACT,UAAK,KAAL,CAAW,OAAX,GAAqB,GAArB;AACA;AACD,QAAG,CAAC,YAAJ,EAAkB;AACjB,UAAK,cAAL,CAAoB,eAApB;AACA;AACD,WAAO,IAAP;AAjDF;AAmDA;AAvDqC,CAAtB,CAAjB","file":"RequireEnsureDependenciesBlockParserPlugin-compiled.js","sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nvar AbstractPlugin = require(\"../AbstractPlugin\");\r\nvar RequireEnsureDependenciesBlock = require(\"./RequireEnsureDependenciesBlock\");\r\nvar RequireEnsureItemDependency = require(\"./RequireEnsureItemDependency\");\r\nvar getFunctionExpression = require(\"./getFunctionExpression\");\r\n\r\nmodule.exports = AbstractPlugin.create({\r\n\t\"call require.ensure\": function(expr) {\r\n\t\tvar chunkName = null,\r\n\t\t\tchunkNameRange = null;\r\n\t\tswitch(expr.arguments.length) {\r\n\t\t\tcase 3:\r\n\t\t\t\tvar chunkNameExpr = this.evaluateExpression(expr.arguments[2]);\r\n\t\t\t\tif(!chunkNameExpr.isString()) return;\r\n\t\t\t\tchunkNameRange = chunkNameExpr.range;\r\n\t\t\t\tchunkName = chunkNameExpr.string;\r\n\t\t\t\t// falls through\r\n\t\t\tcase 2:\r\n\t\t\t\tvar dependenciesExpr = this.evaluateExpression(expr.arguments[0]);\r\n\t\t\t\tvar dependenciesItems = dependenciesExpr.isArray() ? dependenciesExpr.items : [dependenciesExpr];\r\n\t\t\t\tvar fnExpressionArg = expr.arguments[1];\r\n\t\t\t\tvar fnExpression = getFunctionExpression(fnExpressionArg);\r\n\r\n\t\t\t\tif(fnExpression) {\r\n\t\t\t\t\tthis.walkExpressions(fnExpression.expressions);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar dep = new RequireEnsureDependenciesBlock(expr, fnExpression ? fnExpression.fn : fnExpressionArg, chunkName, chunkNameRange, this.state.module, expr.loc);\r\n\t\t\t\tvar old = this.state.current;\r\n\t\t\t\tthis.state.current = dep;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tvar failed = false;\r\n\t\t\t\t\tthis.inScope([], function() {\r\n\t\t\t\t\t\tdependenciesItems.forEach(function(ee) {\r\n\t\t\t\t\t\t\tif(ee.isString()) {\r\n\t\t\t\t\t\t\t\tvar edep = new RequireEnsureItemDependency(ee.string, ee.range);\r\n\t\t\t\t\t\t\t\tedep.loc = dep.loc;\r\n\t\t\t\t\t\t\t\tdep.addDependency(edep);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tfailed = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(failed) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(fnExpression) {\r\n\t\t\t\t\t\tif(fnExpression.fn.body.type === \"BlockStatement\")\r\n\t\t\t\t\t\t\tthis.walkStatement(fnExpression.fn.body);\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tthis.walkExpression(fnExpression.fn.body);\r\n\t\t\t\t\t}\r\n\t\t\t\t\told.addBlock(dep);\r\n\t\t\t\t} finally {\r\n\t\t\t\t\tthis.state.current = old;\r\n\t\t\t\t}\r\n\t\t\t\tif(!fnExpression) {\r\n\t\t\t\t\tthis.walkExpression(fnExpressionArg);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n});\r\n"]}