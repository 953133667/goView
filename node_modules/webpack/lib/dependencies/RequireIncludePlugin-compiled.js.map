{"version":3,"sources":["RequireIncludePlugin.js"],"names":[],"mappings":"AAAA;;;;AAIA,IAAI,2BAA2B,QAAQ,4BAAR,CAA/B;AACA,IAAI,uCAAuC,QAAQ,wCAAR,CAA3C;AACA,IAAI,kBAAkB,QAAQ,mBAAR,CAAtB;;AAEA,IAAI,2BAA2B,QAAQ,6BAAR,CAA/B;;AAEA,SAAS,oBAAT,GAAgC,CAAE;AAClC,OAAO,OAAP,GAAiB,oBAAjB;;AAEA,qBAAqB,SAArB,CAA+B,KAA/B,GAAuC,UAAS,QAAT,EAAmB;AACzD,UAAS,MAAT,CAAgB,aAAhB,EAA+B,UAAS,WAAT,EAAsB,MAAtB,EAA8B;AAC5D,MAAI,sBAAsB,OAAO,mBAAjC;;AAEA,cAAY,mBAAZ,CAAgC,GAAhC,CAAoC,wBAApC,EAA8D,mBAA9D;AACA,cAAY,mBAAZ,CAAgC,GAAhC,CAAoC,wBAApC,EAA8D,IAAI,yBAAyB,QAA7B,EAA9D;AACA,EALD;AAMA,KAAI,oCAAJ,GAA2C,KAA3C,CAAiD,SAAS,MAA1D;AACA,UAAS,MAAT,CAAgB,MAAhB,CAAuB,iCAAvB,EAA0D,UAAS,IAAT,EAAe;AACxE,SAAO,IAAI,wBAAJ,GAA+B,SAA/B,CAAyC,UAAzC,EAAqD,QAArD,CAA8D,KAAK,KAAnE,CAAP;AACA,EAFD;AAGA,UAAS,MAAT,CAAgB,MAAhB,CAAuB,wBAAvB,EAAiD,UAAS,IAAT,EAAe;AAC/D,MAAI,MAAM,IAAI,eAAJ,CAAoB,YAApB,EAAkC,KAAK,KAAvC,CAAV;AACA,MAAI,GAAJ,GAAU,KAAK,GAAf;AACA,OAAK,KAAL,CAAW,OAAX,CAAmB,aAAnB,CAAiC,GAAjC;AACA,SAAO,IAAP;AACA,EALD;AAMA,CAjBD","file":"RequireIncludePlugin-compiled.js","sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nvar RequireIncludeDependency = require(\"./RequireIncludeDependency\");\r\nvar RequireIncludeDependencyParserPlugin = require(\"./RequireIncludeDependencyParserPlugin\");\r\nvar ConstDependency = require(\"./ConstDependency\");\r\n\r\nvar BasicEvaluatedExpression = require(\"../BasicEvaluatedExpression\");\r\n\r\nfunction RequireIncludePlugin() {}\r\nmodule.exports = RequireIncludePlugin;\r\n\r\nRequireIncludePlugin.prototype.apply = function(compiler) {\r\n\tcompiler.plugin(\"compilation\", function(compilation, params) {\r\n\t\tvar normalModuleFactory = params.normalModuleFactory;\r\n\r\n\t\tcompilation.dependencyFactories.set(RequireIncludeDependency, normalModuleFactory);\r\n\t\tcompilation.dependencyTemplates.set(RequireIncludeDependency, new RequireIncludeDependency.Template());\r\n\t});\r\n\tnew RequireIncludeDependencyParserPlugin().apply(compiler.parser);\r\n\tcompiler.parser.plugin(\"evaluate typeof require.include\", function(expr) {\r\n\t\treturn new BasicEvaluatedExpression().setString(\"function\").setRange(expr.range);\r\n\t});\r\n\tcompiler.parser.plugin(\"typeof require.include\", function(expr) {\r\n\t\tvar dep = new ConstDependency(\"'function'\", expr.range);\r\n\t\tdep.loc = expr.loc;\r\n\t\tthis.state.current.addDependency(dep);\r\n\t\treturn true;\r\n\t});\r\n};\r\n"]}