{"version":3,"sources":["TemplateArgumentDependency.js"],"names":[],"mappings":"AAAA;;;;AAIA,SAAS,0BAAT,CAAoC,IAApC,EAA0C,GAA1C,EAA+C;AAC9C,MAAK,IAAL,GAAY,IAAZ;AACA,MAAK,GAAL,GAAW,GAAX;AACA;AACD,OAAO,OAAP,GAAiB,0BAAjB;;AAEA,2BAA2B,SAA3B,CAAqC,WAArC,GAAmD,0BAAnD;AACA,2BAA2B,SAA3B,CAAqC,IAArC,GAA4C,mBAA5C;;AAEA,2BAA2B,SAA3B,CAAqC,UAArC,GAAkD,UAAS,IAAT,EAAe;AAChE,MAAK,MAAL,CAAY,KAAK,IAAjB;AACA,CAFD;;AAIA,2BAA2B,QAA3B,GAAsC,SAAS,kCAAT,GAA8C,CAAE,CAAtF;;AAEA,2BAA2B,QAA3B,CAAoC,SAApC,CAA8C,KAA9C,GAAsD,UAAS,GAAT,EAAc,MAAd,EAAsB,aAAtB,EAAqC,gBAArC,EAAuD,mBAAvD,EAA4E;AACjI,KAAI,IAAI,IAAI,GAAZ;AACA,KAAI,WAAW,oBAAoB,GAApB,CAAwB,EAAE,WAA1B,CAAf;AACA,KAAG,CAAC,QAAJ,EAAc,MAAM,IAAI,KAAJ,CAAU,iCAAiC,EAAE,WAAF,CAAc,IAAzD,CAAN;AACd,KAAG,CAAC,SAAS,uBAAb,EAAsC,MAAM,IAAI,KAAJ,CAAU,qDAAqD,EAAE,WAAF,CAAc,IAA7E,CAAN;AACtC,QAAO,SAAS,uBAAT,CAAiC,IAAI,IAArC,EAA2C,CAA3C,EAA8C,MAA9C,EAAsD,aAAtD,EAAqE,gBAArE,EAAuF,mBAAvF,CAAP;AACA,CAND","file":"TemplateArgumentDependency-compiled.js","sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nfunction TemplateArgumentDependency(name, dep) {\r\n\tthis.name = name;\r\n\tthis.dep = dep;\r\n}\r\nmodule.exports = TemplateArgumentDependency;\r\n\r\nTemplateArgumentDependency.prototype.constructor = TemplateArgumentDependency;\r\nTemplateArgumentDependency.prototype.type = \"template argument\";\r\n\r\nTemplateArgumentDependency.prototype.updateHash = function(hash) {\r\n\thash.update(this.name);\r\n};\r\n\r\nTemplateArgumentDependency.Template = function TemplateArgumentDependencyTemplate() {};\r\n\r\nTemplateArgumentDependency.Template.prototype.apply = function(dep, source, outputOptions, requestShortener, dependencyTemplates) {\r\n\tvar d = dep.dep;\r\n\tvar template = dependencyTemplates.get(d.constructor);\r\n\tif(!template) throw new Error(\"No template for dependency: \" + d.constructor.name);\r\n\tif(!template.applyAsTemplateArgument) throw new Error(\"Template cannot be applied as TemplateArgument: \" + d.constructor.name);\r\n\treturn template.applyAsTemplateArgument(dep.name, d, source, outputOptions, requestShortener, dependencyTemplates);\r\n};\r\n"]}