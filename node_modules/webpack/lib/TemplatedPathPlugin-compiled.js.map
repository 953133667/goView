{"version":3,"sources":["TemplatedPathPlugin.js"],"names":[],"mappings":"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","file":"TemplatedPathPlugin-compiled.js","sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Jason Anderson @diurnalist\r\n*/\r\n\r\nvar REGEXP_HASH = /\\[hash(?::(\\d+))?\\]/gi,\r\n\tREGEXP_CHUNKHASH = /\\[chunkhash(?::(\\d+))?\\]/gi,\r\n\tREGEXP_NAME = /\\[name\\]/gi,\r\n\tREGEXP_ID = /\\[id\\]/gi,\r\n\tREGEXP_FILE = /\\[file\\]/gi,\r\n\tREGEXP_QUERY = /\\[query\\]/gi,\r\n\tREGEXP_FILEBASE = /\\[filebase\\]/gi;\r\n\r\n// Using global RegExp for .test is dangerous\r\n// We use a normal RegExp instead of .test\r\nvar REGEXP_HASH_FOR_TEST = new RegExp(REGEXP_HASH.source, \"i\"),\r\n\tREGEXP_CHUNKHASH_FOR_TEST = new RegExp(REGEXP_CHUNKHASH.source, \"i\"),\r\n\tREGEXP_NAME_FOR_TEST = new RegExp(REGEXP_NAME.source, \"i\");\r\n\r\n// Backwards compatibility; expose regexes on Template object\r\nvar Template = require(\"./Template\");\r\nTemplate.REGEXP_HASH = REGEXP_HASH;\r\nTemplate.REGEXP_CHUNKHASH = REGEXP_CHUNKHASH;\r\nTemplate.REGEXP_NAME = REGEXP_NAME;\r\nTemplate.REGEXP_ID = REGEXP_ID;\r\nTemplate.REGEXP_FILE = REGEXP_FILE;\r\nTemplate.REGEXP_QUERY = REGEXP_QUERY;\r\nTemplate.REGEXP_FILEBASE = REGEXP_FILEBASE;\r\n\r\nfunction TemplatedPathPlugin() {}\r\n\r\nmodule.exports = TemplatedPathPlugin;\r\n\r\nfunction withHashLength(replacer, handlerFn) {\r\n\treturn function(_, hashLength) {\r\n\t\tvar length = hashLength && parseInt(hashLength, 10);\r\n\t\tif(length && handlerFn) {\r\n\t\t\treturn handlerFn(length);\r\n\t\t}\r\n\t\tvar hash = replacer.apply(this, arguments);\r\n\t\treturn length ? hash.slice(0, length) : hash;\r\n\t};\r\n}\r\n\r\nfunction getReplacer(value, allowEmpty) {\r\n\treturn function(match) {\r\n\t\t// last argument in replacer is the entire input string\r\n\t\tvar input = arguments[arguments.length - 1];\r\n\t\tif(value == null) {\r\n\t\t\tif(!allowEmpty) throw new Error(\"Path variable \" + match + \" not implemented in this context: \" + input);\r\n\t\t\treturn \"\";\r\n\t\t} else {\r\n\t\t\treturn \"\" + value;\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction replacePathVariables(path, data) {\r\n\tvar chunk = data.chunk;\r\n\tvar chunkId = chunk && chunk.id;\r\n\tvar chunkName = chunk && (chunk.name || chunk.id);\r\n\tvar chunkHash = chunk && (chunk.renderedHash || chunk.hash);\r\n\tvar chunkHashWithLength = chunk && chunk.hashWithLength;\r\n\r\n\tif(data.noChunkHash && REGEXP_CHUNKHASH_FOR_TEST.test(path)) {\r\n\t\tthrow new Error(\"Cannot use [chunkhash] for chunk in '\" + path + \"' (use [hash] instead)\");\r\n\t}\r\n\r\n\treturn path\r\n\t\t.replace(REGEXP_HASH, withHashLength(getReplacer(data.hash), data.hashWithLength))\r\n\t\t.replace(REGEXP_CHUNKHASH, withHashLength(getReplacer(chunkHash), chunkHashWithLength))\r\n\t\t.replace(REGEXP_ID, getReplacer(chunkId))\r\n\t\t.replace(REGEXP_NAME, getReplacer(chunkName))\r\n\t\t.replace(REGEXP_FILE, getReplacer(data.filename))\r\n\t\t.replace(REGEXP_FILEBASE, getReplacer(data.basename))\r\n\t\t// query is optional, it's OK if it's in a path but there's nothing to replace it with\r\n\t\t.replace(REGEXP_QUERY, getReplacer(data.query, true));\r\n}\r\n\r\nTemplatedPathPlugin.prototype.constructor = TemplatedPathPlugin;\r\nTemplatedPathPlugin.prototype.apply = function(compiler) {\r\n\tcompiler.plugin(\"compilation\", function(compilation) {\r\n\t\tvar mainTemplate = compilation.mainTemplate;\r\n\r\n\t\tmainTemplate.plugin(\"asset-path\", replacePathVariables);\r\n\r\n\t\tmainTemplate.plugin(\"global-hash\", function(chunk, paths) {\r\n\t\t\tvar outputOptions = this.outputOptions;\r\n\t\t\tvar publicPath = outputOptions.publicPath || \"\";\r\n\t\t\tvar filename = outputOptions.filename || \"\";\r\n\t\t\tvar chunkFilename = outputOptions.chunkFilename || outputOptions.filename;\r\n\t\t\tif(REGEXP_HASH_FOR_TEST.test(publicPath) || REGEXP_CHUNKHASH_FOR_TEST.test(publicPath) || REGEXP_NAME_FOR_TEST.test(publicPath))\r\n\t\t\t\treturn true;\r\n\t\t\tif(REGEXP_HASH_FOR_TEST.test(filename))\r\n\t\t\t\treturn true;\r\n\t\t\tif(REGEXP_HASH_FOR_TEST.test(chunkFilename))\r\n\t\t\t\treturn true;\r\n\t\t\tif(REGEXP_HASH_FOR_TEST.test(paths.join(\"|\")))\r\n\t\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\tmainTemplate.plugin(\"hash-for-chunk\", function(hash, chunk) {\r\n\t\t\tvar outputOptions = this.outputOptions;\r\n\t\t\tvar chunkFilename = outputOptions.chunkFilename || outputOptions.filename;\r\n\t\t\tif(REGEXP_CHUNKHASH_FOR_TEST.test(chunkFilename))\r\n\t\t\t\thash.update(JSON.stringify(chunk.getChunkMaps(true, true).hash));\r\n\t\t\tif(REGEXP_NAME_FOR_TEST.test(chunkFilename))\r\n\t\t\t\thash.update(JSON.stringify(chunk.getChunkMaps(true, true).name));\r\n\t\t});\r\n\t});\r\n};\r\n"]}