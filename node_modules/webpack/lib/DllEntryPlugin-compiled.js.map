{"version":3,"sources":["DllEntryPlugin.js"],"names":[],"mappings":"AAAA;;;;AAIA,IAAI,qBAAqB,QAAQ,mCAAR,CAAzB;AACA,IAAI,wBAAwB,QAAQ,sCAAR,CAA5B;AACA,IAAI,mBAAmB,QAAQ,oBAAR,CAAvB;;AAEA,SAAS,cAAT,CAAwB,OAAxB,EAAiC,OAAjC,EAA0C,IAA1C,EAAgD,IAAhD,EAAsD;AACrD,MAAK,OAAL,GAAe,OAAf;AACA,MAAK,OAAL,GAAe,OAAf;AACA,MAAK,IAAL,GAAY,IAAZ;AACA,MAAK,IAAL,GAAY,IAAZ;AACA;AACD,OAAO,OAAP,GAAiB,cAAjB;AACA,eAAe,SAAf,CAAyB,KAAzB,GAAiC,UAAS,QAAT,EAAmB;AACnD,UAAS,MAAT,CAAgB,aAAhB,EAA+B,UAAS,WAAT,EAAsB,MAAtB,EAA8B;AAC5D,MAAI,mBAAmB,IAAI,gBAAJ,EAAvB;AACA,MAAI,sBAAsB,OAAO,mBAAjC;;AAEA,cAAY,mBAAZ,CAAgC,GAAhC,CAAoC,kBAApC,EAAwD,gBAAxD;;AAEA,cAAY,mBAAZ,CAAgC,GAAhC,CAAoC,qBAApC,EAA2D,mBAA3D;AACA,EAPD;AAQA,UAAS,MAAT,CAAgB,MAAhB,EAAwB,UAAS,WAAT,EAAsB,QAAtB,EAAgC;AACvD,cAAY,QAAZ,CAAqB,KAAK,OAA1B,EAAmC,IAAI,kBAAJ,CAAuB,KAAK,OAAL,CAAa,GAAb,CAAiB,UAAS,CAAT,EAAY,GAAZ,EAAiB;AAC3F,OAAI,MAAM,IAAI,qBAAJ,CAA0B,CAA1B,CAAV;AACA,OAAI,GAAJ,GAAU,KAAK,IAAL,GAAY,GAAZ,GAAkB,GAA5B;AACA,UAAO,GAAP;AACA,GAJyD,EAIvD,IAJuD,CAAvB,EAIzB,KAAK,IAJoB,EAId,KAAK,IAJS,CAAnC,EAIiC,KAAK,IAJtC,EAI4C,QAJ5C;AAKA,EANuB,CAMtB,IANsB,CAMjB,IANiB,CAAxB;AAOA,CAhBD","file":"DllEntryPlugin-compiled.js","sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nvar DllEntryDependency = require(\"./dependencies/DllEntryDependency\");\r\nvar SingleEntryDependency = require(\"./dependencies/SingleEntryDependency\");\r\nvar DllModuleFactory = require(\"./DllModuleFactory\");\r\n\r\nfunction DllEntryPlugin(context, entries, name, type) {\r\n\tthis.context = context;\r\n\tthis.entries = entries;\r\n\tthis.name = name;\r\n\tthis.type = type;\r\n}\r\nmodule.exports = DllEntryPlugin;\r\nDllEntryPlugin.prototype.apply = function(compiler) {\r\n\tcompiler.plugin(\"compilation\", function(compilation, params) {\r\n\t\tvar dllModuleFactory = new DllModuleFactory();\r\n\t\tvar normalModuleFactory = params.normalModuleFactory;\r\n\r\n\t\tcompilation.dependencyFactories.set(DllEntryDependency, dllModuleFactory);\r\n\r\n\t\tcompilation.dependencyFactories.set(SingleEntryDependency, normalModuleFactory);\r\n\t});\r\n\tcompiler.plugin(\"make\", function(compilation, callback) {\r\n\t\tcompilation.addEntry(this.context, new DllEntryDependency(this.entries.map(function(e, idx) {\r\n\t\t\tvar dep = new SingleEntryDependency(e);\r\n\t\t\tdep.loc = this.name + \":\" + idx;\r\n\t\t\treturn dep;\r\n\t\t}, this), this.name, this.type), this.name, callback);\r\n\t}.bind(this));\r\n};\r\n"]}