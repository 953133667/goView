{"version":3,"sources":["base64.js"],"names":[],"mappings":"AAAA;AACA;;;;;AAKA,IAAI,OAAO,MAAP,KAAkB,UAAtB,EAAkC;AAC9B,MAAI,SAAS,QAAQ,UAAR,EAAoB,MAApB,EAA4B,OAA5B,CAAb;AACH;AACD,OAAO,UAAU,OAAV,EAAmB,OAAnB,EAA4B,MAA5B,EAAoC;;AAEzC,MAAI,eAAe,mEAAmE,KAAnE,CAAyE,EAAzE,CAAnB;;AAEA;;;AAGA,UAAQ,MAAR,GAAiB,UAAU,MAAV,EAAkB;AACjC,QAAI,KAAK,MAAL,IAAe,SAAS,aAAa,MAAzC,EAAiD;AAC/C,aAAO,aAAa,MAAb,CAAP;AACD;AACD,UAAM,IAAI,SAAJ,CAAc,+BAA+B,OAA7C,CAAN;AACD,GALD;;AAOA;;;;AAIA,UAAQ,MAAR,GAAiB,UAAU,QAAV,EAAoB;AACnC,QAAI,OAAO,EAAX,CADmC,CAChB;AACnB,QAAI,OAAO,EAAX,CAFmC,CAEhB;;AAEnB,QAAI,UAAU,EAAd,CAJmC,CAIhB;AACnB,QAAI,UAAU,GAAd,CALmC,CAKhB;;AAEnB,QAAI,OAAO,EAAX,CAPmC,CAOhB;AACnB,QAAI,OAAO,EAAX,CARmC,CAQhB;;AAEnB,QAAI,OAAO,EAAX,CAVmC,CAUhB;AACnB,QAAI,QAAQ,EAAZ,CAXmC,CAWhB;;AAEnB,QAAI,eAAe,EAAnB;AACA,QAAI,eAAe,EAAnB;;AAEA;AACA,QAAI,QAAQ,QAAR,IAAoB,YAAY,IAApC,EAA0C;AACxC,aAAQ,WAAW,IAAnB;AACD;;AAED;AACA,QAAI,WAAW,QAAX,IAAuB,YAAY,OAAvC,EAAgD;AAC9C,aAAQ,WAAW,OAAX,GAAqB,YAA7B;AACD;;AAED;AACA,QAAI,QAAQ,QAAR,IAAoB,YAAY,IAApC,EAA0C;AACxC,aAAQ,WAAW,IAAX,GAAkB,YAA1B;AACD;;AAED;AACA,QAAI,YAAY,IAAhB,EAAsB;AACpB,aAAO,EAAP;AACD;;AAED;AACA,QAAI,YAAY,KAAhB,EAAuB;AACrB,aAAO,EAAP;AACD;;AAED;AACA,WAAO,CAAC,CAAR;AACD,GA3CD;AA6CD,CA/DD","file":"base64-compiled.js","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  /**\n   * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n   */\n  exports.encode = function (number) {\n    if (0 <= number && number < intToCharMap.length) {\n      return intToCharMap[number];\n    }\n    throw new TypeError(\"Must be between 0 and 63: \" + aNumber);\n  };\n\n  /**\n   * Decode a single base 64 character code digit to an integer. Returns -1 on\n   * failure.\n   */\n  exports.decode = function (charCode) {\n    var bigA = 65;     // 'A'\n    var bigZ = 90;     // 'Z'\n\n    var littleA = 97;  // 'a'\n    var littleZ = 122; // 'z'\n\n    var zero = 48;     // '0'\n    var nine = 57;     // '9'\n\n    var plus = 43;     // '+'\n    var slash = 47;    // '/'\n\n    var littleOffset = 26;\n    var numberOffset = 52;\n\n    // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ\n    if (bigA <= charCode && charCode <= bigZ) {\n      return (charCode - bigA);\n    }\n\n    // 26 - 51: abcdefghijklmnopqrstuvwxyz\n    if (littleA <= charCode && charCode <= littleZ) {\n      return (charCode - littleA + littleOffset);\n    }\n\n    // 52 - 61: 0123456789\n    if (zero <= charCode && charCode <= nine) {\n      return (charCode - zero + numberOffset);\n    }\n\n    // 62: +\n    if (charCode == plus) {\n      return 62;\n    }\n\n    // 63: /\n    if (charCode == slash) {\n      return 63;\n    }\n\n    // Invalid base64 digit.\n    return -1;\n  };\n\n});\n"]}