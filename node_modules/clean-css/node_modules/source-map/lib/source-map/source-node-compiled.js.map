{"version":3,"sources":["source-node.js"],"names":[],"mappings":"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","file":"source-node-compiled.js","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;\n  var util = require('./util');\n\n  // Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n  // operating systems these days (capturing the result).\n  var REGEX_NEWLINE = /(\\r?\\n)/;\n\n  // Newline character code for charCodeAt() comparisons\n  var NEWLINE_CODE = 10;\n\n  // Private symbol for identifying `SourceNode`s when multiple versions of\n  // the source-map library are loaded. This MUST NOT CHANGE across\n  // versions!\n  var isSourceNode = \"$$$isSourceNode$$$\";\n\n  /**\n   * SourceNodes provide a way to abstract over interpolating/concatenating\n   * snippets of generated JavaScript source code while maintaining the line and\n   * column information associated with the original source code.\n   *\n   * @param aLine The original line number.\n   * @param aColumn The original column number.\n   * @param aSource The original source's filename.\n   * @param aChunks Optional. An array of strings which are snippets of\n   *        generated JS, or other SourceNodes.\n   * @param aName The original identifier.\n   */\n  function SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n    this.children = [];\n    this.sourceContents = {};\n    this.line = aLine == null ? null : aLine;\n    this.column = aColumn == null ? null : aColumn;\n    this.source = aSource == null ? null : aSource;\n    this.name = aName == null ? null : aName;\n    this[isSourceNode] = true;\n    if (aChunks != null) this.add(aChunks);\n  }\n\n  /**\n   * Creates a SourceNode from generated code and a SourceMapConsumer.\n   *\n   * @param aGeneratedCode The generated code\n   * @param aSourceMapConsumer The SourceMap for the generated code\n   * @param aRelativePath Optional. The path that relative sources in the\n   *        SourceMapConsumer should be relative to.\n   */\n  SourceNode.fromStringWithSourceMap =\n    function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n      // The SourceNode we want to fill with the generated code\n      // and the SourceMap\n      var node = new SourceNode();\n\n      // All even indices of this array are one line of the generated code,\n      // while all odd indices are the newlines between two adjacent lines\n      // (since `REGEX_NEWLINE` captures its match).\n      // Processed fragments are removed from this array, by calling `shiftNextLine`.\n      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n      var shiftNextLine = function() {\n        var lineContents = remainingLines.shift();\n        // The last line of a file might not have a newline.\n        var newLine = remainingLines.shift() || \"\";\n        return lineContents + newLine;\n      };\n\n      // We need to remember the position of \"remainingLines\"\n      var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n\n      // The generate SourceNodes we need a code range.\n      // To extract it current and last mapping is used.\n      // Here we store the last mapping.\n      var lastMapping = null;\n\n      aSourceMapConsumer.eachMapping(function (mapping) {\n        if (lastMapping !== null) {\n          // We add the code from \"lastMapping\" to \"mapping\":\n          // First check if there is a new line in between.\n          if (lastGeneratedLine < mapping.generatedLine) {\n            var code = \"\";\n            // Associate first line with \"lastMapping\"\n            addMappingWithCode(lastMapping, shiftNextLine());\n            lastGeneratedLine++;\n            lastGeneratedColumn = 0;\n            // The remaining code is added without mapping\n          } else {\n            // There is no new line in between.\n            // Associate the code between \"lastGeneratedColumn\" and\n            // \"mapping.generatedColumn\" with \"lastMapping\"\n            var nextLine = remainingLines[0];\n            var code = nextLine.substr(0, mapping.generatedColumn -\n                                          lastGeneratedColumn);\n            remainingLines[0] = nextLine.substr(mapping.generatedColumn -\n                                                lastGeneratedColumn);\n            lastGeneratedColumn = mapping.generatedColumn;\n            addMappingWithCode(lastMapping, code);\n            // No more remaining code, continue\n            lastMapping = mapping;\n            return;\n          }\n        }\n        // We add the generated code until the first mapping\n        // to the SourceNode without any mapping.\n        // Each line is added as separate string.\n        while (lastGeneratedLine < mapping.generatedLine) {\n          node.add(shiftNextLine());\n          lastGeneratedLine++;\n        }\n        if (lastGeneratedColumn < mapping.generatedColumn) {\n          var nextLine = remainingLines[0];\n          node.add(nextLine.substr(0, mapping.generatedColumn));\n          remainingLines[0] = nextLine.substr(mapping.generatedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n        }\n        lastMapping = mapping;\n      }, this);\n      // We have processed all mappings.\n      if (remainingLines.length > 0) {\n        if (lastMapping) {\n          // Associate the remaining code in the current line with \"lastMapping\"\n          addMappingWithCode(lastMapping, shiftNextLine());\n        }\n        // and add the remaining lines without any mapping\n        node.add(remainingLines.join(\"\"));\n      }\n\n      // Copy sourcesContent into SourceNode\n      aSourceMapConsumer.sources.forEach(function (sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          if (aRelativePath != null) {\n            sourceFile = util.join(aRelativePath, sourceFile);\n          }\n          node.setSourceContent(sourceFile, content);\n        }\n      });\n\n      return node;\n\n      function addMappingWithCode(mapping, code) {\n        if (mapping === null || mapping.source === undefined) {\n          node.add(code);\n        } else {\n          var source = aRelativePath\n            ? util.join(aRelativePath, mapping.source)\n            : mapping.source;\n          node.add(new SourceNode(mapping.originalLine,\n                                  mapping.originalColumn,\n                                  source,\n                                  code,\n                                  mapping.name));\n        }\n      }\n    };\n\n  /**\n   * Add a chunk of generated JS to this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n  SourceNode.prototype.add = function SourceNode_add(aChunk) {\n    if (Array.isArray(aChunk)) {\n      aChunk.forEach(function (chunk) {\n        this.add(chunk);\n      }, this);\n    }\n    else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n      if (aChunk) {\n        this.children.push(aChunk);\n      }\n    }\n    else {\n      throw new TypeError(\n        \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n      );\n    }\n    return this;\n  };\n\n  /**\n   * Add a chunk of generated JS to the beginning of this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n  SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {\n    if (Array.isArray(aChunk)) {\n      for (var i = aChunk.length-1; i >= 0; i--) {\n        this.prepend(aChunk[i]);\n      }\n    }\n    else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n      this.children.unshift(aChunk);\n    }\n    else {\n      throw new TypeError(\n        \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n      );\n    }\n    return this;\n  };\n\n  /**\n   * Walk over the tree of JS snippets in this node and its children. The\n   * walking function is called once for each snippet of JS and is passed that\n   * snippet and the its original associated source's line/column location.\n   *\n   * @param aFn The traversal function.\n   */\n  SourceNode.prototype.walk = function SourceNode_walk(aFn) {\n    var chunk;\n    for (var i = 0, len = this.children.length; i < len; i++) {\n      chunk = this.children[i];\n      if (chunk[isSourceNode]) {\n        chunk.walk(aFn);\n      }\n      else {\n        if (chunk !== '') {\n          aFn(chunk, { source: this.source,\n                       line: this.line,\n                       column: this.column,\n                       name: this.name });\n        }\n      }\n    }\n  };\n\n  /**\n   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n   * each of `this.children`.\n   *\n   * @param aSep The separator.\n   */\n  SourceNode.prototype.join = function SourceNode_join(aSep) {\n    var newChildren;\n    var i;\n    var len = this.children.length;\n    if (len > 0) {\n      newChildren = [];\n      for (i = 0; i < len-1; i++) {\n        newChildren.push(this.children[i]);\n        newChildren.push(aSep);\n      }\n      newChildren.push(this.children[i]);\n      this.children = newChildren;\n    }\n    return this;\n  };\n\n  /**\n   * Call String.prototype.replace on the very right-most source snippet. Useful\n   * for trimming whitespace from the end of a source node, etc.\n   *\n   * @param aPattern The pattern to replace.\n   * @param aReplacement The thing to replace the pattern with.\n   */\n  SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {\n    var lastChild = this.children[this.children.length - 1];\n    if (lastChild[isSourceNode]) {\n      lastChild.replaceRight(aPattern, aReplacement);\n    }\n    else if (typeof lastChild === 'string') {\n      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n    }\n    else {\n      this.children.push(''.replace(aPattern, aReplacement));\n    }\n    return this;\n  };\n\n  /**\n   * Set the source content for a source file. This will be added to the SourceMapGenerator\n   * in the sourcesContent field.\n   *\n   * @param aSourceFile The filename of the source file\n   * @param aSourceContent The content of the source file\n   */\n  SourceNode.prototype.setSourceContent =\n    function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n    };\n\n  /**\n   * Walk over the tree of SourceNodes. The walking function is called for each\n   * source file content and is passed the filename and source content.\n   *\n   * @param aFn The traversal function.\n   */\n  SourceNode.prototype.walkSourceContents =\n    function SourceNode_walkSourceContents(aFn) {\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        if (this.children[i][isSourceNode]) {\n          this.children[i].walkSourceContents(aFn);\n        }\n      }\n\n      var sources = Object.keys(this.sourceContents);\n      for (var i = 0, len = sources.length; i < len; i++) {\n        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n      }\n    };\n\n  /**\n   * Return the string representation of this source node. Walks over the tree\n   * and concatenates all the various snippets together to one string.\n   */\n  SourceNode.prototype.toString = function SourceNode_toString() {\n    var str = \"\";\n    this.walk(function (chunk) {\n      str += chunk;\n    });\n    return str;\n  };\n\n  /**\n   * Returns the string representation of this source node along with a source\n   * map.\n   */\n  SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {\n    var generated = {\n      code: \"\",\n      line: 1,\n      column: 0\n    };\n    var map = new SourceMapGenerator(aArgs);\n    var sourceMappingActive = false;\n    var lastOriginalSource = null;\n    var lastOriginalLine = null;\n    var lastOriginalColumn = null;\n    var lastOriginalName = null;\n    this.walk(function (chunk, original) {\n      generated.code += chunk;\n      if (original.source !== null\n          && original.line !== null\n          && original.column !== null) {\n        if(lastOriginalSource !== original.source\n           || lastOriginalLine !== original.line\n           || lastOriginalColumn !== original.column\n           || lastOriginalName !== original.name) {\n          map.addMapping({\n            source: original.source,\n            original: {\n              line: original.line,\n              column: original.column\n            },\n            generated: {\n              line: generated.line,\n              column: generated.column\n            },\n            name: original.name\n          });\n        }\n        lastOriginalSource = original.source;\n        lastOriginalLine = original.line;\n        lastOriginalColumn = original.column;\n        lastOriginalName = original.name;\n        sourceMappingActive = true;\n      } else if (sourceMappingActive) {\n        map.addMapping({\n          generated: {\n            line: generated.line,\n            column: generated.column\n          }\n        });\n        lastOriginalSource = null;\n        sourceMappingActive = false;\n      }\n      for (var idx = 0, length = chunk.length; idx < length; idx++) {\n        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n          generated.line++;\n          generated.column = 0;\n          // Mappings end at eol\n          if (idx + 1 === length) {\n            lastOriginalSource = null;\n            sourceMappingActive = false;\n          } else if (sourceMappingActive) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n        } else {\n          generated.column++;\n        }\n      }\n    });\n    this.walkSourceContents(function (sourceFile, sourceContent) {\n      map.setSourceContent(sourceFile, sourceContent);\n    });\n\n    return { code: generated.code, map: map };\n  };\n\n  exports.SourceNode = SourceNode;\n\n});\n"]}