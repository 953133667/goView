{"version":3,"sources":["array-set.js"],"names":[],"mappings":"AAAA;AACA;;;;;AAKA,IAAI,OAAO,MAAP,KAAkB,UAAtB,EAAkC;AAC9B,MAAI,SAAS,QAAQ,UAAR,EAAoB,MAApB,EAA4B,OAA5B,CAAb;AACH;AACD,OAAO,UAAU,OAAV,EAAmB,OAAnB,EAA4B,MAA5B,EAAoC;;AAEzC,MAAI,OAAO,QAAQ,QAAR,CAAX;;AAEA;;;;;;AAMA,WAAS,QAAT,GAAoB;AAClB,SAAK,MAAL,GAAc,EAAd;AACA,SAAK,IAAL,GAAY,EAAZ;AACD;;AAED;;;AAGA,WAAS,SAAT,GAAqB,SAAS,kBAAT,CAA4B,MAA5B,EAAoC,gBAApC,EAAsD;AACzE,QAAI,MAAM,IAAI,QAAJ,EAAV;AACA,SAAK,IAAI,IAAI,CAAR,EAAW,MAAM,OAAO,MAA7B,EAAqC,IAAI,GAAzC,EAA8C,GAA9C,EAAmD;AACjD,UAAI,GAAJ,CAAQ,OAAO,CAAP,CAAR,EAAmB,gBAAnB;AACD;AACD,WAAO,GAAP;AACD,GAND;;AAQA;;;;;;AAMA,WAAS,SAAT,CAAmB,IAAnB,GAA0B,SAAS,aAAT,GAAyB;AACjD,WAAO,OAAO,mBAAP,CAA2B,KAAK,IAAhC,EAAsC,MAA7C;AACD,GAFD;;AAIA;;;;;AAKA,WAAS,SAAT,CAAmB,GAAnB,GAAyB,SAAS,YAAT,CAAsB,IAAtB,EAA4B,gBAA5B,EAA8C;AACrE,QAAI,cAAc,KAAK,GAAL,CAAS,IAAT,CAAlB;AACA,QAAI,MAAM,KAAK,MAAL,CAAY,MAAtB;AACA,QAAI,CAAC,WAAD,IAAgB,gBAApB,EAAsC;AACpC,WAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB;AACD;AACD,QAAI,CAAC,WAAL,EAAkB;AAChB,WAAK,IAAL,CAAU,KAAK,WAAL,CAAiB,IAAjB,CAAV,IAAoC,GAApC;AACD;AACF,GATD;;AAWA;;;;;AAKA,WAAS,SAAT,CAAmB,GAAnB,GAAyB,SAAS,YAAT,CAAsB,IAAtB,EAA4B;AACnD,WAAO,OAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,KAAK,IAA1C,EACqC,KAAK,WAAL,CAAiB,IAAjB,CADrC,CAAP;AAED,GAHD;;AAKA;;;;;AAKA,WAAS,SAAT,CAAmB,OAAnB,GAA6B,SAAS,gBAAT,CAA0B,IAA1B,EAAgC;AAC3D,QAAI,KAAK,GAAL,CAAS,IAAT,CAAJ,EAAoB;AAClB,aAAO,KAAK,IAAL,CAAU,KAAK,WAAL,CAAiB,IAAjB,CAAV,CAAP;AACD;AACD,UAAM,IAAI,KAAJ,CAAU,MAAM,IAAN,GAAa,sBAAvB,CAAN;AACD,GALD;;AAOA;;;;;AAKA,WAAS,SAAT,CAAmB,EAAnB,GAAwB,SAAS,WAAT,CAAqB,IAArB,EAA2B;AACjD,QAAI,QAAQ,CAAR,IAAa,OAAO,KAAK,MAAL,CAAY,MAApC,EAA4C;AAC1C,aAAO,KAAK,MAAL,CAAY,IAAZ,CAAP;AACD;AACD,UAAM,IAAI,KAAJ,CAAU,2BAA2B,IAArC,CAAN;AACD,GALD;;AAOA;;;;;AAKA,WAAS,SAAT,CAAmB,OAAnB,GAA6B,SAAS,gBAAT,GAA4B;AACvD,WAAO,KAAK,MAAL,CAAY,KAAZ,EAAP;AACD,GAFD;;AAIA,UAAQ,QAAR,GAAmB,QAAnB;AAED,CAjGD","file":"array-set-compiled.js","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var util = require('./util');\n\n  /**\n   * A data structure which is a combination of an array and a set. Adding a new\n   * member is O(1), testing for membership is O(1), and finding the index of an\n   * element is O(1). Removing elements from the set is not supported. Only\n   * strings are supported for membership.\n   */\n  function ArraySet() {\n    this._array = [];\n    this._set = {};\n  }\n\n  /**\n   * Static method for creating ArraySet instances from an existing array.\n   */\n  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n    var set = new ArraySet();\n    for (var i = 0, len = aArray.length; i < len; i++) {\n      set.add(aArray[i], aAllowDuplicates);\n    }\n    return set;\n  };\n\n  /**\n   * Return how many unique items are in this ArraySet. If duplicates have been\n   * added, than those do not count towards the size.\n   *\n   * @returns Number\n   */\n  ArraySet.prototype.size = function ArraySet_size() {\n    return Object.getOwnPropertyNames(this._set).length;\n  };\n\n  /**\n   * Add the given string to this set.\n   *\n   * @param String aStr\n   */\n  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n    var isDuplicate = this.has(aStr);\n    var idx = this._array.length;\n    if (!isDuplicate || aAllowDuplicates) {\n      this._array.push(aStr);\n    }\n    if (!isDuplicate) {\n      this._set[util.toSetString(aStr)] = idx;\n    }\n  };\n\n  /**\n   * Is the given string a member of this set?\n   *\n   * @param String aStr\n   */\n  ArraySet.prototype.has = function ArraySet_has(aStr) {\n    return Object.prototype.hasOwnProperty.call(this._set,\n                                                util.toSetString(aStr));\n  };\n\n  /**\n   * What is the index of the given string in the array?\n   *\n   * @param String aStr\n   */\n  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n    if (this.has(aStr)) {\n      return this._set[util.toSetString(aStr)];\n    }\n    throw new Error('\"' + aStr + '\" is not in the set.');\n  };\n\n  /**\n   * What is the element at the given index?\n   *\n   * @param Number aIdx\n   */\n  ArraySet.prototype.at = function ArraySet_at(aIdx) {\n    if (aIdx >= 0 && aIdx < this._array.length) {\n      return this._array[aIdx];\n    }\n    throw new Error('No element indexed by ' + aIdx);\n  };\n\n  /**\n   * Returns the array representation of this set (which has the proper indices\n   * indicated by indexOf). Note that this is a copy of the internal array used\n   * for storing the members so that no one can mess with internal state.\n   */\n  ArraySet.prototype.toArray = function ArraySet_toArray() {\n    return this._array.slice();\n  };\n\n  exports.ArraySet = ArraySet;\n\n});\n"]}