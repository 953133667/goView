{"version":3,"sources":["split.js"],"names":[],"mappings":"AAAA,SAAS,KAAT,CAAe,KAAf,EAAsB,SAAtB,EAAiC,gBAAjC,EAAmD,SAAnD,EAA8D,UAA9D,EAA0E,SAA1E,EAAqF;AACnF,MAAI,YAAY,OAAO,SAAP,IAAoB,QAApC;AACA,MAAI,eAAe,YACjB,UAAU,IAAV,CAAe,KAAf,CADiB,GAEjB,MAAM,OAAN,CAAc,SAAd,CAFF;;AAIA,MAAI,CAAC,YAAL,EACE,OAAO,CAAC,KAAD,CAAP;;AAEF,cAAY,aAAa,GAAzB;AACA,eAAa,cAAc,GAA3B;;AAEA,MAAI,MAAM,OAAN,CAAc,SAAd,KAA4B,CAAC,CAA7B,IAAkC,CAAC,gBAAnC,IAAuD,CAAC,SAA5D,EACE,OAAO,MAAM,KAAN,CAAY,SAAZ,CAAP;;AAEF,MAAI,QAAQ,CAAZ;AACA,MAAI,SAAS,CAAb;AACA,MAAI,YAAY,CAAhB;AACA,MAAI,MAAM,MAAM,MAAhB;AACA,MAAI,SAAS,EAAb;;AAEA,SAAO,SAAS,GAAhB,EAAqB;AACnB,QAAI,MAAM,MAAN,KAAiB,SAArB,EAAgC;AAC9B;AACD,KAFD,MAEO,IAAI,MAAM,MAAN,KAAiB,UAArB,EAAiC;AACtC;AACD;;AAED,QAAI,UAAU,CAAV,IAAe,SAAS,CAAxB,IAA6B,SAAS,CAAT,GAAa,GAA1C,KAAkD,YAAY,UAAU,IAAV,CAAe,MAAM,MAAN,CAAf,CAAZ,GAA4C,MAAM,MAAN,KAAiB,SAA/G,CAAJ,EAA+H;AAC7H,aAAO,IAAP,CAAY,MAAM,SAAN,CAAgB,SAAhB,EAA2B,UAAU,mBAAmB,CAAnB,GAAuB,CAAjC,CAA3B,CAAZ;AACA,kBAAY,SAAS,CAArB;;AAEA,UAAI,aAAa,OAAO,MAAP,IAAiB,CAAlC,EAAqC;AACnC;AACD;AACF;;AAED;AACD;;AAED,MAAI,YAAY,SAAS,CAAzB,EAA4B;AAC1B,QAAI,YAAY,MAAM,SAAN,CAAgB,SAAhB,CAAhB;AACA,QAAI,gBAAgB,UAAU,UAAU,MAAV,GAAmB,CAA7B,CAApB;AACA,QAAI,CAAC,gBAAD,KAAsB,YAAY,UAAU,IAAV,CAAe,aAAf,CAAZ,GAA4C,iBAAiB,SAAnF,CAAJ,EACE,YAAY,UAAU,SAAV,CAAoB,CAApB,EAAuB,UAAU,MAAV,GAAmB,CAA1C,CAAZ;;AAEF,WAAO,IAAP,CAAY,SAAZ;AACD;;AAED,SAAO,MAAP;AACD;;AAED,OAAO,OAAP,GAAiB,KAAjB","file":"split-compiled.js","sourcesContent":["function split(value, separator, includeSeparator, openLevel, closeLevel, firstOnly) {\n  var withRegex = typeof separator != 'string';\n  var hasSeparator = withRegex ?\n    separator.test(value) :\n    value.indexOf(separator);\n\n  if (!hasSeparator)\n    return [value];\n\n  openLevel = openLevel || '(';\n  closeLevel = closeLevel || ')';\n\n  if (value.indexOf(openLevel) == -1 && !includeSeparator && !firstOnly)\n    return value.split(separator);\n\n  var level = 0;\n  var cursor = 0;\n  var lastStart = 0;\n  var len = value.length;\n  var tokens = [];\n\n  while (cursor < len) {\n    if (value[cursor] == openLevel) {\n      level++;\n    } else if (value[cursor] == closeLevel) {\n      level--;\n    }\n\n    if (level === 0 && cursor > 0 && cursor + 1 < len && (withRegex ? separator.test(value[cursor]) : value[cursor] == separator)) {\n      tokens.push(value.substring(lastStart, cursor + (includeSeparator ? 1 : 0)));\n      lastStart = cursor + 1;\n\n      if (firstOnly && tokens.length == 1) {\n        break;\n      }\n    }\n\n    cursor++;\n  }\n\n  if (lastStart < cursor + 1) {\n    var lastValue = value.substring(lastStart);\n    var lastCharacter = lastValue[lastValue.length - 1];\n    if (!includeSeparator && (withRegex ? separator.test(lastCharacter) : lastCharacter == separator))\n      lastValue = lastValue.substring(0, lastValue.length - 1);\n\n    tokens.push(lastValue);\n  }\n\n  return tokens;\n}\n\nmodule.exports = split;\n"]}