{"version":3,"sources":["expressions-processor.js"],"names":[],"mappings":"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","file":"expressions-processor-compiled.js","sourcesContent":["var EscapeStore = require('./escape-store');\n\nvar EXPRESSION_NAME = 'expression';\nvar EXPRESSION_START = '(';\nvar EXPRESSION_END = ')';\nvar EXPRESSION_PREFIX = EXPRESSION_NAME + EXPRESSION_START;\nvar BODY_START = '{';\nvar BODY_END = '}';\n\nvar lineBreak = require('os').EOL;\n\nfunction findEnd(data, start) {\n  var end = start + EXPRESSION_NAME.length;\n  var level = 0;\n  var quoted = false;\n  var braced = false;\n\n  while (true) {\n    var current = data[end++];\n\n    if (quoted) {\n      quoted = current != '\\'' && current != '\"';\n    } else {\n      quoted = current == '\\'' || current == '\"';\n\n      if (current == EXPRESSION_START)\n        level++;\n      if (current == EXPRESSION_END)\n        level--;\n      if (current == BODY_START)\n        braced = true;\n      if (current == BODY_END && !braced && level == 1) {\n        end--;\n        level--;\n      }\n    }\n\n    if (level === 0 && current == EXPRESSION_END)\n      break;\n    if (!current) {\n      end = data.substring(0, end).lastIndexOf(BODY_END);\n      break;\n    }\n  }\n\n  return end;\n}\n\nfunction ExpressionsProcessor(saveWaypoints) {\n  this.expressions = new EscapeStore('EXPRESSION');\n  this.saveWaypoints = saveWaypoints;\n}\n\nExpressionsProcessor.prototype.escape = function (data) {\n  var nextStart = 0;\n  var nextEnd = 0;\n  var cursor = 0;\n  var tempData = [];\n  var indent = 0;\n  var breaksCount;\n  var lastBreakAt;\n  var newIndent;\n  var saveWaypoints = this.saveWaypoints;\n\n  for (; nextEnd < data.length;) {\n    nextStart = data.indexOf(EXPRESSION_PREFIX, nextEnd);\n    if (nextStart == -1)\n      break;\n\n    nextEnd = findEnd(data, nextStart);\n\n    var expression = data.substring(nextStart, nextEnd);\n    if (saveWaypoints) {\n      breaksCount = expression.split(lineBreak).length - 1;\n      lastBreakAt = expression.lastIndexOf(lineBreak);\n      newIndent = lastBreakAt > 0 ?\n        expression.substring(lastBreakAt + lineBreak.length).length :\n        indent + expression.length;\n    }\n\n    var metadata = saveWaypoints ? [breaksCount, newIndent] : null;\n    var placeholder = this.expressions.store(expression, metadata);\n    tempData.push(data.substring(cursor, nextStart));\n    tempData.push(placeholder);\n\n    if (saveWaypoints)\n      indent = newIndent + 1;\n    cursor = nextEnd;\n  }\n\n  return tempData.length > 0 ?\n    tempData.join('') + data.substring(cursor, data.length) :\n    data;\n};\n\nExpressionsProcessor.prototype.restore = function (data) {\n  var tempData = [];\n  var cursor = 0;\n\n  for (; cursor < data.length;) {\n    var nextMatch = this.expressions.nextMatch(data, cursor);\n    if (nextMatch.start < 0)\n      break;\n\n    tempData.push(data.substring(cursor, nextMatch.start));\n    var comment = this.expressions.restore(nextMatch.match);\n    tempData.push(comment);\n\n    cursor = nextMatch.end;\n  }\n\n  return tempData.length > 0 ?\n    tempData.join('') + data.substring(cursor, data.length) :\n    data;\n};\n\nmodule.exports = ExpressionsProcessor;\n"]}