{"version":3,"sources":["urls-processor.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,gBAAR,CAAlB;AACA,IAAI,aAAa,QAAQ,gBAAR,CAAjB;;AAEA,IAAI,YAAY,QAAQ,IAAR,EAAc,GAA9B;;AAEA,SAAS,aAAT,CAAuB,OAAvB,EAAgC,aAAhC,EAA+C,aAA/C,EAA8D;AAC5D,OAAK,IAAL,GAAY,IAAI,WAAJ,CAAgB,KAAhB,CAAZ;AACA,OAAK,OAAL,GAAe,OAAf;AACA,OAAK,aAAL,GAAqB,aAArB;AACA,OAAK,aAAL,GAAqB,aAArB;AACD;;AAED;AACA;AACA;AACA,cAAc,SAAd,CAAwB,MAAxB,GAAiC,UAAU,IAAV,EAAgB;AAC/C,MAAI,WAAJ;AACA,MAAI,WAAJ;AACA,MAAI,MAAJ;AACA,MAAI,gBAAgB,KAAK,aAAzB;AACA,MAAI,OAAO,IAAX;;AAEA,SAAO,WAAW,IAAX,EAAiB,KAAK,OAAtB,EAA+B,UAAU,GAAV,EAAe,QAAf,EAAyB;AAC7D,QAAI,aAAJ,EAAmB;AACjB,oBAAc,IAAI,KAAJ,CAAU,SAAV,EAAqB,MAArB,GAA8B,CAA5C;AACA,oBAAc,IAAI,WAAJ,CAAgB,SAAhB,CAAd;AACA,eAAS,cAAc,CAAd,GACP,IAAI,SAAJ,CAAc,cAAc,UAAU,MAAtC,EAA8C,MADvC,GAEP,IAAI,MAFN;AAGD;;AAED,QAAI,cAAc,KAAK,IAAL,CAAU,KAAV,CAAgB,GAAhB,EAAqB,gBAAgB,CAAC,WAAD,EAAc,MAAd,CAAhB,GAAwC,IAA7D,CAAlB;AACA,aAAS,IAAT,CAAc,WAAd;AACD,GAXM,CAAP;AAYD,CAnBD;;AAqBA,SAAS,SAAT,CAAmB,GAAnB,EAAwB,aAAxB,EAAuC;AACrC,QAAM,IACH,OADG,CACK,QADL,EACe,KADf,EAEH,OAFG,CAEK,gBAFL,EAEuB,EAFvB,EAGH,OAHG,CAGK,cAHL,EAGqB,GAHrB,EAIH,OAJG,CAIK,gBAJL,EAIuB,QAJvB,EAKH,OALG,CAKK,aALL,EAKoB,KALpB,CAAN;;AAOA,MAAI,iBAAiB,IAAjB,CAAsB,GAAtB,KAA8B,iBAAiB,IAAjB,CAAsB,GAAtB,CAAlC,EACE,OAAO,GAAP;;AAEF,MAAI,CAAC,aAAD,IAAkB,CAAC,eAAe,IAAf,CAAoB,GAApB,CAAnB,IAA+C,CAAC,sBAAsB,IAAtB,CAA2B,GAA3B,CAAhD,IAAmF,CAAC,8BAA8B,IAA9B,CAAmC,GAAnC,CAAxF,EACE,MAAM,IAAI,OAAJ,CAAY,OAAZ,EAAqB,EAArB,CAAN;;AAEF,SAAO,GAAP;AACD;;AAED,cAAc,SAAd,CAAwB,OAAxB,GAAkC,UAAU,IAAV,EAAgB;AAChD,MAAI,WAAW,EAAf;AACA,MAAI,SAAS,CAAb;;AAEA,SAAO,SAAS,KAAK,MAArB,GAA8B;AAC5B,QAAI,YAAY,KAAK,IAAL,CAAU,SAAV,CAAoB,IAApB,EAA0B,MAA1B,CAAhB;AACA,QAAI,UAAU,KAAV,GAAkB,CAAtB,EACE;;AAEF,aAAS,IAAT,CAAc,KAAK,SAAL,CAAe,MAAf,EAAuB,UAAU,KAAjC,CAAd;AACA,QAAI,MAAM,UAAU,KAAK,IAAL,CAAU,OAAV,CAAkB,UAAU,KAA5B,CAAV,EAA8C,KAAK,aAAnD,CAAV;AACA,aAAS,IAAT,CAAc,GAAd;;AAEA,aAAS,UAAU,GAAnB;AACD;;AAED,SAAO,SAAS,MAAT,GAAkB,CAAlB,GACL,SAAS,IAAT,CAAc,EAAd,IAAoB,KAAK,SAAL,CAAe,MAAf,EAAuB,KAAK,MAA5B,CADf,GAEL,IAFF;AAGD,CAnBD;;AAqBA,OAAO,OAAP,GAAiB,aAAjB","file":"urls-processor-compiled.js","sourcesContent":["var EscapeStore = require('./escape-store');\nvar reduceUrls = require('../urls/reduce');\n\nvar lineBreak = require('os').EOL;\n\nfunction UrlsProcessor(context, saveWaypoints, keepUrlQuotes) {\n  this.urls = new EscapeStore('URL');\n  this.context = context;\n  this.saveWaypoints = saveWaypoints;\n  this.keepUrlQuotes = keepUrlQuotes;\n}\n\n// Strip urls by replacing them by a special\n// marker for further restoring. It's done via string scanning\n// instead of regexps to speed up the process.\nUrlsProcessor.prototype.escape = function (data) {\n  var breaksCount;\n  var lastBreakAt;\n  var indent;\n  var saveWaypoints = this.saveWaypoints;\n  var self = this;\n\n  return reduceUrls(data, this.context, function (url, tempData) {\n    if (saveWaypoints) {\n      breaksCount = url.split(lineBreak).length - 1;\n      lastBreakAt = url.lastIndexOf(lineBreak);\n      indent = lastBreakAt > 0 ?\n        url.substring(lastBreakAt + lineBreak.length).length :\n        url.length;\n    }\n\n    var placeholder = self.urls.store(url, saveWaypoints ? [breaksCount, indent] : null);\n    tempData.push(placeholder);\n  });\n};\n\nfunction normalize(url, keepUrlQuotes) {\n  url = url\n    .replace(/^url/gi, 'url')\n    .replace(/\\\\?\\n|\\\\?\\r\\n/g, '')\n    .replace(/(\\s{2,}|\\s)/g, ' ')\n    .replace(/^url\\((['\"])? /, 'url($1')\n    .replace(/ (['\"])?\\)$/, '$1)');\n\n  if (/url\\(\".*'.*\"\\)/.test(url) || /url\\('.*\".*'\\)/.test(url))\n    return url;\n\n  if (!keepUrlQuotes && !/^['\"].+['\"]$/.test(url) && !/url\\(.*[\\s\\(\\)].*\\)/.test(url) && !/url\\(['\"]data:[^;]+;charset/.test(url))\n    url = url.replace(/[\"']/g, '');\n\n  return url;\n}\n\nUrlsProcessor.prototype.restore = function (data) {\n  var tempData = [];\n  var cursor = 0;\n\n  for (; cursor < data.length;) {\n    var nextMatch = this.urls.nextMatch(data, cursor);\n    if (nextMatch.start < 0)\n      break;\n\n    tempData.push(data.substring(cursor, nextMatch.start));\n    var url = normalize(this.urls.restore(nextMatch.match), this.keepUrlQuotes);\n    tempData.push(url);\n\n    cursor = nextMatch.end;\n  }\n\n  return tempData.length > 0 ?\n    tempData.join('') + data.substring(cursor, data.length) :\n    data;\n};\n\nmodule.exports = UrlsProcessor;\n"]}