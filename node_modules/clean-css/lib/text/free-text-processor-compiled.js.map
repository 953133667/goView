{"version":3,"sources":["free-text-processor.js"],"names":[],"mappings":"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","file":"free-text-processor-compiled.js","sourcesContent":["var EscapeStore = require('./escape-store');\nvar QuoteScanner = require('../utils/quote-scanner');\n\nvar lineBreak = require('os').EOL;\n\nfunction FreeTextProcessor(saveWaypoints) {\n  this.matches = new EscapeStore('FREE_TEXT');\n  this.saveWaypoints = saveWaypoints;\n}\n\n// Strip content tags by replacing them by the a special\n// marker for further restoring. It's done via string scanning\n// instead of regexps to speed up the process.\nFreeTextProcessor.prototype.escape = function (data) {\n  var self = this;\n  var breaksCount;\n  var lastBreakAt;\n  var indent;\n  var metadata;\n  var saveWaypoints = this.saveWaypoints;\n\n  return new QuoteScanner(data).each(function (match, store) {\n    if (saveWaypoints) {\n      breaksCount = match.split(lineBreak).length - 1;\n      lastBreakAt = match.lastIndexOf(lineBreak);\n      indent = lastBreakAt > 0 ?\n        match.substring(lastBreakAt + lineBreak.length).length :\n        match.length;\n      metadata = [breaksCount, indent];\n    }\n\n    var placeholder = self.matches.store(match, metadata);\n    store.push(placeholder);\n  });\n};\n\nfunction normalize(text, data, prefixContext, cursor) {\n  // FIXME: this is even a bigger hack now - see #407\n  var searchIn = data;\n  if (prefixContext) {\n    searchIn = prefixContext + data.substring(0, data.indexOf('__ESCAPED_FREE_TEXT_CLEAN_CSS'));\n    cursor = searchIn.length;\n  }\n\n  var lastSemicolon = searchIn.lastIndexOf(';', cursor);\n  var lastOpenBrace = searchIn.lastIndexOf('{', cursor);\n  var lastOne = 0;\n\n  if (lastSemicolon > -1 && lastOpenBrace > -1)\n    lastOne = Math.max(lastSemicolon, lastOpenBrace);\n  else if (lastSemicolon == -1)\n    lastOne = lastOpenBrace;\n  else\n    lastOne = lastSemicolon;\n\n  var context = searchIn.substring(lastOne + 1, cursor);\n\n  if (/\\[[\\w\\d\\-]+[\\*\\|\\~\\^\\$]?=$/.test(context)) {\n    text = text\n      .replace(/\\\\\\n|\\\\\\r\\n/g, '')\n      .replace(/\\n|\\r\\n/g, '');\n  }\n\n  if (/^['\"][a-zA-Z][a-zA-Z\\d\\-_]+['\"]$/.test(text) && !/format\\($/.test(context)) {\n    var isFont = /^(font|font\\-family):/.test(context);\n    var isAttribute = /\\[[\\w\\d\\-]+[\\*\\|\\~\\^\\$]?=$/.test(context);\n    var isKeyframe = /@(-moz-|-o-|-webkit-)?keyframes /.test(context);\n    var isAnimation = /^(-moz-|-o-|-webkit-)?animation(-name)?:/.test(context);\n\n    if (isFont || isAttribute || isKeyframe || isAnimation)\n      text = text.substring(1, text.length - 1);\n  }\n\n  return text;\n}\n\nFreeTextProcessor.prototype.restore = function (data, prefixContext) {\n  var tempData = [];\n  var cursor = 0;\n\n  for (; cursor < data.length;) {\n    var nextMatch = this.matches.nextMatch(data, cursor);\n    if (nextMatch.start < 0)\n      break;\n\n    tempData.push(data.substring(cursor, nextMatch.start));\n    var text = normalize(this.matches.restore(nextMatch.match), data, prefixContext, nextMatch.start);\n    tempData.push(text);\n\n    cursor = nextMatch.end;\n  }\n\n  return tempData.length > 0 ?\n    tempData.join('') + data.substring(cursor, data.length) :\n    data;\n};\n\nmodule.exports = FreeTextProcessor;\n"]}