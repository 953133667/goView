{"version":3,"sources":["hsl.js"],"names":[],"mappings":"AAAA;AACA;;AAEA,SAAS,QAAT,CAAkB,GAAlB,EAAuB,UAAvB,EAAmC,SAAnC,EAA8C;AAC5C,OAAK,GAAL,GAAW,GAAX;AACA,OAAK,UAAL,GAAkB,UAAlB;AACA,OAAK,SAAL,GAAiB,SAAjB;AACD;;AAED,SAAS,QAAT,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B;AACzB,MAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;;AAEA;AACA,MAAI,IAAI,GAAR;AACA,MAAI,IAAI,CAAR,EACE,KAAK,GAAL;AACF,MAAI,CAAC,CAAC,CAAF,GAAM,GAAV;;AAEA,MAAI,IAAI,CAAR,EACE,IAAI,CAAJ,CADF,KAEK,IAAI,IAAI,GAAR,EACH,IAAI,GAAJ;AACF,MAAI,CAAC,CAAC,CAAF,GAAM,GAAV;;AAEA,MAAI,IAAI,CAAR,EACE,IAAI,CAAJ,CADF,KAEK,IAAI,IAAI,GAAR,EACH,IAAI,GAAJ;AACF,MAAI,CAAC,CAAC,CAAF,GAAM,GAAV;;AAEA,MAAI,MAAM,CAAV,EAAa;AACX,QAAI,IAAI,IAAI,CAAZ,CADW,CACI;AAChB,GAFD,MAEO;AACL,QAAI,IAAI,IAAI,GAAJ,GACN,KAAK,IAAI,CAAT,CADM,GAEN,IAAI,CAAJ,GAAQ,IAAI,CAFd;AAGA,QAAI,IAAI,IAAI,CAAJ,GAAQ,CAAhB;AACA,QAAI,SAAS,CAAT,EAAY,CAAZ,EAAe,IAAI,IAAE,CAArB,CAAJ;AACA,QAAI,SAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,CAAJ;AACA,QAAI,SAAS,CAAT,EAAY,CAAZ,EAAe,IAAI,IAAE,CAArB,CAAJ;AACD;;AAED,SAAO,CAAC,CAAC,EAAE,IAAI,GAAN,CAAF,EAAc,CAAC,EAAE,IAAI,GAAN,CAAf,EAA2B,CAAC,EAAE,IAAI,GAAN,CAA5B,CAAP;AACD;;AAED,SAAS,QAAT,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B;AACzB,MAAI,IAAI,CAAR,EAAW,KAAK,CAAL;AACX,MAAI,IAAI,CAAR,EAAW,KAAK,CAAL;AACX,MAAI,IAAI,IAAE,CAAV,EAAa,OAAO,IAAI,CAAC,IAAI,CAAL,IAAU,CAAV,GAAc,CAAzB;AACb,MAAI,IAAI,IAAE,CAAV,EAAa,OAAO,CAAP;AACb,MAAI,IAAI,IAAE,CAAV,EAAa,OAAO,IAAI,CAAC,IAAI,CAAL,KAAW,IAAE,CAAF,GAAM,CAAjB,IAAsB,CAAjC;AACb,SAAO,CAAP;AACD;;AAED,SAAS,SAAT,CAAmB,KAAnB,GAA2B,YAAY;AACrC,MAAI,QAAQ,SAAS,KAAK,GAAd,EAAmB,KAAK,UAAxB,EAAoC,KAAK,SAAzC,CAAZ;AACA,MAAI,WAAW,MAAM,CAAN,EAAS,QAAT,CAAkB,EAAlB,CAAf;AACA,MAAI,aAAa,MAAM,CAAN,EAAS,QAAT,CAAkB,EAAlB,CAAjB;AACA,MAAI,YAAY,MAAM,CAAN,EAAS,QAAT,CAAkB,EAAlB,CAAhB;;AAEA,SAAO,OACJ,CAAC,SAAS,MAAT,IAAmB,CAAnB,GAAuB,GAAvB,GAA6B,EAA9B,IAAoC,QADhC,KAEJ,CAAC,WAAW,MAAX,IAAqB,CAArB,GAAyB,GAAzB,GAA+B,EAAhC,IAAsC,UAFlC,KAGJ,CAAC,UAAU,MAAV,IAAoB,CAApB,GAAwB,GAAxB,GAA8B,EAA/B,IAAqC,SAHjC,CAAP;AAID,CAVD;;AAYA,OAAO,OAAP,GAAiB,QAAjB","file":"hsl-compiled.js","sourcesContent":["// HSL to RGB converter. Both methods adapted from:\n// http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\n\nfunction HSLColor(hue, saturation, lightness) {\n  this.hue = hue;\n  this.saturation = saturation;\n  this.lightness = lightness;\n}\n\nfunction hslToRgb(h, s, l) {\n  var r, g, b;\n\n  // normalize hue orientation b/w 0 and 360 degrees\n  h = h % 360;\n  if (h < 0)\n    h += 360;\n  h = ~~h / 360;\n\n  if (s < 0)\n    s = 0;\n  else if (s > 100)\n    s = 100;\n  s = ~~s / 100;\n\n  if (l < 0)\n    l = 0;\n  else if (l > 100)\n    l = 100;\n  l = ~~l / 100;\n\n  if (s === 0) {\n    r = g = b = l; // achromatic\n  } else {\n    var q = l < 0.5 ?\n      l * (1 + s) :\n      l + s - l * s;\n    var p = 2 * l - q;\n    r = hueToRgb(p, q, h + 1/3);\n    g = hueToRgb(p, q, h);\n    b = hueToRgb(p, q, h - 1/3);\n  }\n\n  return [~~(r * 255), ~~(g * 255), ~~(b * 255)];\n}\n\nfunction hueToRgb(p, q, t) {\n  if (t < 0) t += 1;\n  if (t > 1) t -= 1;\n  if (t < 1/6) return p + (q - p) * 6 * t;\n  if (t < 1/2) return q;\n  if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n  return p;\n}\n\nHSLColor.prototype.toHex = function () {\n  var asRgb = hslToRgb(this.hue, this.saturation, this.lightness);\n  var redAsHex = asRgb[0].toString(16);\n  var greenAsHex = asRgb[1].toString(16);\n  var blueAsHex = asRgb[2].toString(16);\n\n  return '#' +\n    ((redAsHex.length == 1 ? '0' : '') + redAsHex) +\n    ((greenAsHex.length == 1 ? '0' : '') + greenAsHex) +\n    ((blueAsHex.length == 1 ? '0' : '') + blueAsHex);\n};\n\nmodule.exports = HSLColor;\n"]}