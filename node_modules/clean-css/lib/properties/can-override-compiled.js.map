{"version":3,"sources":["can-override.js"],"names":[],"mappings":"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","file":"can-override-compiled.js","sourcesContent":["// Functions that decide what value can override what.\n// The main purpose is to disallow removing CSS fallbacks.\n// A separate implementation is needed for every different kind of CSS property.\n// -----\n// The generic idea is that properties that have wider browser support are 'more understandable'\n// than others and that 'less understandable' values can't override more understandable ones.\n\n// Use when two tokens of the same property can always be merged\nfunction always() {\n  return true;\n}\n\nfunction alwaysButIntoFunction(property1, property2, validator) {\n  var value1 = property1.value[0][0];\n  var value2 = property2.value[0][0];\n\n  var validFunction1 = validator.isValidFunction(value1);\n  var validFunction2 = validator.isValidFunction(value2);\n\n  if (validFunction1 && validFunction2) {\n    return validator.areSameFunction(value1, value2);\n  } else if (!validFunction1 && validFunction2) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nfunction backgroundImage(property1, property2, validator) {\n  // The idea here is that 'more understandable' values override 'less understandable' values, but not vice versa\n  // Understandability: (none | url | inherit) > (same function) > (same value)\n\n  // (none | url)\n  var image1 = property1.value[0][0];\n  var image2 = property2.value[0][0];\n\n  if (image2 == 'none' || image2 == 'inherit' || validator.isValidUrl(image2))\n    return true;\n  if (image1 == 'none' || image1 == 'inherit' || validator.isValidUrl(image1))\n    return false;\n\n  // Functions with the same name can override each other; same values can override each other\n  return sameFunctionOrValue(property1, property2, validator);\n}\n\nfunction border(property1, property2, validator) {\n  return color(property1.components[2], property2.components[2], validator);\n}\n\n// Use for color properties (color, background-color, border-color, etc.)\nfunction color(property1, property2, validator) {\n  // The idea here is that 'more understandable' values override 'less understandable' values, but not vice versa\n  // Understandability: (hex | named) > (rgba | hsla) > (same function name) > anything else\n  // NOTE: at this point rgb and hsl are replaced by hex values by clean-css\n\n  var color1 = property1.value[0][0];\n  var color2 = property2.value[0][0];\n\n  if (!validator.colorOpacity && (validator.isValidRgbaColor(color1) || validator.isValidHslaColor(color1)))\n    return false;\n  if (!validator.colorOpacity && (validator.isValidRgbaColor(color2) || validator.isValidHslaColor(color2)))\n    return false;\n\n  // (hex | named)\n  if (validator.isValidNamedColor(color2) || validator.isValidHexColor(color2))\n    return true;\n  if (validator.isValidNamedColor(color1) || validator.isValidHexColor(color1))\n    return false;\n\n  // (rgba|hsla)\n  if (validator.isValidRgbaColor(color2) || validator.isValidHslaColor(color2))\n    return true;\n  if (validator.isValidRgbaColor(color1) || validator.isValidHslaColor(color1))\n    return false;\n\n  // Functions with the same name can override each other; same values can override each other\n  return sameFunctionOrValue(property1, property2, validator);\n}\n\nfunction twoOptionalFunctions(property1, property2, validator) {\n  var value1 = property1.value[0][0];\n  var value2 = property2.value[0][0];\n\n  return !(validator.isValidFunction(value1) ^ validator.isValidFunction(value2));\n}\n\nfunction sameValue(property1, property2) {\n  var value1 = property1.value[0][0];\n  var value2 = property2.value[0][0];\n\n  return value1 === value2;\n}\n\nfunction sameFunctionOrValue(property1, property2, validator) {\n  var value1 = property1.value[0][0];\n  var value2 = property2.value[0][0];\n\n  // Functions with the same name can override each other\n  if (validator.areSameFunction(value1, value2))\n    return true;\n\n  return value1 === value2;\n}\n\n// Use for properties containing CSS units (margin-top, padding-left, etc.)\nfunction unit(property1, property2, validator) {\n  // The idea here is that 'more understandable' values override 'less understandable' values, but not vice versa\n  // Understandability: (unit without functions) > (same functions | standard functions) > anything else\n  // NOTE: there is no point in having different vendor-specific functions override each other or standard functions,\n  //       or having standard functions override vendor-specific functions, but standard functions can override each other\n  // NOTE: vendor-specific property values are not taken into consideration here at the moment\n  var value1 = property1.value[0][0];\n  var value2 = property2.value[0][0];\n\n  if (validator.isValidAndCompatibleUnitWithoutFunction(value1) && !validator.isValidAndCompatibleUnitWithoutFunction(value2))\n    return false;\n\n  if (validator.isValidUnitWithoutFunction(value2))\n    return true;\n  if (validator.isValidUnitWithoutFunction(value1))\n    return false;\n\n  // Standard non-vendor-prefixed functions can override each other\n  if (validator.isValidFunctionWithoutVendorPrefix(value2) && validator.isValidFunctionWithoutVendorPrefix(value1)) {\n    return true;\n  }\n\n  // Functions with the same name can override each other; same values can override each other\n  return sameFunctionOrValue(property1, property2, validator);\n}\n\nmodule.exports = {\n  always: always,\n  alwaysButIntoFunction: alwaysButIntoFunction,\n  backgroundImage: backgroundImage,\n  border: border,\n  color: color,\n  sameValue: sameValue,\n  sameFunctionOrValue: sameFunctionOrValue,\n  twoOptionalFunctions: twoOptionalFunctions,\n  unit: unit\n};\n"]}