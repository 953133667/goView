{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA,IAAI,MAAM,QAAQ,OAAR,CAAV;;AAEA,SAAS,KAAT,GAAkB;AAChB,MAAI,IAAI,GAAG,KAAH,CAAS,IAAT,CAAc,SAAd,EAAyB,IAAzB,CAA8B,GAA9B,CAAR;AACA,QAAM,IAAI,KAAJ,CAAU,CACd,CADc,EAEd,yBAFc,EAGd,iDAHc,EAIZ,IAJY,CAIP,IAJO,CAAV,CAAN;AAKD;;AAED,QAAQ,UAAR,GAAqB,QAAQ,eAAR,CAArB;;AAEA,QAAQ,UAAR,GAAqB,QAAQ,eAAR,CAArB;;AAEA,QAAQ,WAAR,GAAsB,UAAS,IAAT,EAAe,QAAf,EAAyB;AAC7C,MAAI,YAAY,SAAS,IAAzB,EAA+B;AAC7B,QAAI;AACF,eAAS,IAAT,CAAc,IAAd,EAAoB,SAApB,EAA+B,IAAI,MAAJ,CAAW,IAAI,IAAJ,CAAX,CAA/B;AACD,KAFD,CAEE,OAAO,GAAP,EAAY;AAAE,eAAS,GAAT;AAAe;AAChC,GAJD,MAIO;AACL,WAAO,IAAI,MAAJ,CAAW,IAAI,IAAJ,CAAX,CAAP;AACD;AACF,CARD;;AAUA,SAAS,IAAT,CAAc,CAAd,EAAiB,CAAjB,EAAoB;AAClB,OAAI,IAAI,CAAR,IAAa,CAAb,EACE,EAAE,EAAE,CAAF,CAAF,EAAQ,CAAR;AACH;;AAED,QAAQ,SAAR,GAAoB,YAAY;AAC9B,SAAO,CAAC,MAAD,EAAS,QAAT,EAAmB,QAAnB,EAA6B,KAA7B,EAAoC,QAApC,CAAP;AACD,CAFD;;AAIA,IAAI,IAAI,QAAQ,UAAR,EAAoB,OAApB,CAAR;AACA,QAAQ,MAAR,GAAiB,EAAE,MAAnB;AACA,QAAQ,UAAR,GAAqB,EAAE,UAAvB;;AAGA;AACA,KAAK,CAAC,mBAAD,EACH,cADG,EAEH,gBAFG,EAGH,gBAHG,EAIH,kBAJG,EAKH,YALG,EAMH,cANG,EAOH,qBAPG,CAAL,EAQG,UAAU,IAAV,EAAgB;AACjB,UAAQ,IAAR,IAAgB,YAAY;AAC1B,UAAM,QAAN,EAAgB,IAAhB,EAAsB,wBAAtB;AACD,GAFD;AAGD,CAZD","file":"index-compiled.js","sourcesContent":["var rng = require('./rng')\n\nfunction error () {\n  var m = [].slice.call(arguments).join(' ')\n  throw new Error([\n    m,\n    'we accept pull requests',\n    'http://github.com/dominictarr/crypto-browserify'\n    ].join('\\n'))\n}\n\nexports.createHash = require('./create-hash')\n\nexports.createHmac = require('./create-hmac')\n\nexports.randomBytes = function(size, callback) {\n  if (callback && callback.call) {\n    try {\n      callback.call(this, undefined, new Buffer(rng(size)))\n    } catch (err) { callback(err) }\n  } else {\n    return new Buffer(rng(size))\n  }\n}\n\nfunction each(a, f) {\n  for(var i in a)\n    f(a[i], i)\n}\n\nexports.getHashes = function () {\n  return ['sha1', 'sha256', 'sha512', 'md5', 'rmd160']\n}\n\nvar p = require('./pbkdf2')(exports)\nexports.pbkdf2 = p.pbkdf2\nexports.pbkdf2Sync = p.pbkdf2Sync\n\n\n// the least I can do is make error messages for the rest of the node.js/crypto api.\neach(['createCredentials'\n, 'createCipher'\n, 'createCipheriv'\n, 'createDecipher'\n, 'createDecipheriv'\n, 'createSign'\n, 'createVerify'\n, 'createDiffieHellman'\n], function (name) {\n  exports[name] = function () {\n    error('sorry,', name, 'is not implemented yet')\n  }\n})\n"]}