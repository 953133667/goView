{"version":3,"sources":["pbkdf2.js"],"names":[],"mappings":";AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,aAAa,QAAQ,KAAR,EAAe,UAAhC;;AAEA,IAAI,UAAU,QAAQ,0BAAR,CAAd;;AAEA,KAAK,QAAL,EAAe,UAAU,CAAV,EAAa;AAC1B,UAAQ,OAAR,CAAgB,UAAU,KAAV,EAAiB;AAC/B;AACA,QAAG,MAAM,UAAN,GAAmB,KAAtB,EAA6B;;AAE7B,QAAI,MAAM,WAAW,MAAM,QAAjB,EAA2B,MAAM,IAAjC,EAAuC,MAAM,UAA7C,EAAyD,MAAM,MAA/D,CAAV;;AAEA,QAAG,IAAI,QAAJ,CAAa,KAAb,MAAwB,MAAM,IAAjC,EACE,QAAQ,GAAR,CAAY,KAAZ;;AAEF,MAAE,KAAF,CAAQ,IAAI,QAAJ,CAAa,KAAb,CAAR,EAA6B,MAAM,IAAnC;AAGD,GAZD;;AAcA,IAAE,GAAF;AACD,CAhBD","file":"pbkdf2-compiled.js","sourcesContent":["\nvar tape = require('tape')\nvar pbkdf2Sync = require('../').pbkdf2Sync\n\nvar vectors = require('hash-test-vectors/pbkdf2')\n\ntape('pbkdf2', function (t) {\n  vectors.forEach(function (input) {\n    //skip inputs that will take way too long\n    if(input.iterations > 10000) return\n\n    var key = pbkdf2Sync(input.password, input.salt, input.iterations, input.length)\n\n    if(key.toString('hex') !== input.sha1)\n      console.log(input)\n\n    t.equal(key.toString('hex'), input.sha1)\n\n\n  })\n\n  t.end()\n})\n"]}