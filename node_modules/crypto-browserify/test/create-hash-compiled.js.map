{"version":3,"sources":["create-hash.js"],"names":[],"mappings":"AAAA,IAAI,KAAK,QAAQ,IAAR,CAAT;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;;AAEA,IAAI,aAAa,QAAQ,KAAR,EAAe,SAAf,EAAjB;AACA,IAAI,YAAY,CAAC,aAAc,KAAf,EAAsB,QAAtB,CAAhB;AACA,IAAI,UAAU,QAAQ,mBAAR,CAAd;;AAEA,IAAI,aAAa,QAAQ,gBAAR,CAAjB;;AAEA,WAAW,OAAX,CAAmB,UAAU,SAAV,EAAqB;AACtC,OAAK,UAAU,SAAV,GAAsB,uBAA3B,EAAoD,UAAU,CAAV,EAAa;;AAE/D,YAAQ,OAAR,CAAgB,UAAU,GAAV,EAAe,CAAf,EAAkB;AAChC,UAAI,QAAQ,IAAI,MAAJ,CAAW,IAAI,KAAf,EAAsB,QAAtB,CAAZ;AACA,UAAI,OAAO,IAAI,SAAJ,CAAX;AACA,UAAI,KAAK,WAAW,SAAX,EAAsB,MAAtB,CAA6B,KAA7B,EAAoC,MAApC,CAA2C,KAA3C,CAAT;AACA,QAAE,KAAF,CAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAY,cAAZ,GAA2B,CAA3B,GAA6B,QAA7B,GAAwC,IAA1D;AACD,KALD;;AAOA,cAAU,OAAV,CAAkB,UAAU,QAAV,EAAoB;AAClC,cAAQ,OAAR,CAAgB,UAAU,GAAV,EAAe,CAAf,EAAkB;AAChC,YAAI,QAAQ,IAAI,MAAJ,CAAW,IAAI,KAAf,EAAsB,QAAtB,EAAgC,QAAhC,CAAyC,QAAzC,CAAZ;AACA,YAAI,OAAO,IAAI,SAAJ,CAAX;AACA,YAAI,KAAK,WAAW,SAAX,EAAsB,MAAtB,CAA6B,KAA7B,EAAoC,QAApC,EAA8C,MAA9C,CAAqD,KAArD,CAAT;AACA,UAAE,KAAF,CAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAY,cAAZ,GAA2B,CAA3B,GAA6B,KAA7B,GAAmC,QAAnC,GAA4C,OAA5C,GAAsD,IAAxE;AACD,OALD;AAMH,KAPD;;AASA,MAAE,GAAF;AACD,GAnBD;AAoBD,CArBD","file":"create-hash-compiled.js","sourcesContent":["var fs = require('fs')\nvar test = require('tape')\n\nvar algorithms = require('../').getHashes()\nvar encodings = [/*'binary',*/ 'hex', 'base64'];\nvar vectors = require('hash-test-vectors')\n\nvar createHash = require('../create-hash')\n\nalgorithms.forEach(function (algorithm) {\n  test('test ' + algorithm + ' against test vectors', function (t) {\n\n    vectors.forEach(function (obj, i) {\n      var input = new Buffer(obj.input, 'base64')\n      var node = obj[algorithm]\n      var js = createHash(algorithm).update(input).digest('hex')\n      t.equal(js, node, algorithm + '(testVector['+i+']) == ' + node)\n    })\n\n    encodings.forEach(function (encoding) {\n        vectors.forEach(function (obj, i) {\n          var input = new Buffer(obj.input, 'base64').toString(encoding)\n          var node = obj[algorithm]\n          var js = createHash(algorithm).update(input, encoding).digest('hex')\n          t.equal(js, node, algorithm + '(testVector['+i+'], '+encoding+') == ' + node)\n        })\n    });\n\n    t.end()\n  })\n});\n\n"]}