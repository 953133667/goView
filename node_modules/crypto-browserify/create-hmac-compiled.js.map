{"version":3,"sources":["create-hmac.js"],"names":[],"mappings":"AAAA,IAAI,aAAa,QAAQ,eAAR,CAAjB;;AAEA,IAAI,aAAa,IAAI,MAAJ,CAAW,GAAX,CAAjB;AACA,WAAW,IAAX,CAAgB,CAAhB;;AAEA,OAAO,OAAP,GAAiB,IAAjB;;AAEA,SAAS,IAAT,CAAe,GAAf,EAAoB,GAApB,EAAyB;AACvB,MAAG,EAAE,gBAAgB,IAAlB,CAAH,EAA4B,OAAO,IAAI,IAAJ,CAAS,GAAT,EAAc,GAAd,CAAP;AAC5B,OAAK,KAAL,GAAa,IAAb;AACA,OAAK,IAAL,GAAY,GAAZ;;AAEA,MAAI,YAAa,QAAQ,QAAT,GAAqB,GAArB,GAA2B,EAA3C;;AAEA,QAAM,KAAK,IAAL,GAAY,CAAC,OAAO,QAAP,CAAgB,GAAhB,CAAD,GAAwB,IAAI,MAAJ,CAAW,GAAX,CAAxB,GAA0C,GAA5D;;AAEA,MAAG,IAAI,MAAJ,GAAa,SAAhB,EAA2B;AACzB,UAAM,WAAW,GAAX,EAAgB,MAAhB,CAAuB,GAAvB,EAA4B,MAA5B,EAAN;AACD,GAFD,MAEO,IAAG,IAAI,MAAJ,GAAa,SAAhB,EAA2B;AAChC,UAAM,OAAO,MAAP,CAAc,CAAC,GAAD,EAAM,UAAN,CAAd,EAAiC,SAAjC,CAAN;AACD;;AAED,MAAI,OAAO,KAAK,KAAL,GAAa,IAAI,MAAJ,CAAW,SAAX,CAAxB;AACA,MAAI,OAAO,KAAK,KAAL,GAAa,IAAI,MAAJ,CAAW,SAAX,CAAxB;;AAEA,OAAI,IAAI,IAAI,CAAZ,EAAe,IAAI,SAAnB,EAA8B,GAA9B,EAAmC;AACjC,SAAK,CAAL,IAAU,IAAI,CAAJ,IAAS,IAAnB;AACA,SAAK,CAAL,IAAU,IAAI,CAAJ,IAAS,IAAnB;AACD;;AAED,OAAK,KAAL,GAAa,WAAW,GAAX,EAAgB,MAAhB,CAAuB,IAAvB,CAAb;AACD;;AAED,KAAK,SAAL,CAAe,MAAf,GAAwB,UAAU,IAAV,EAAgB,GAAhB,EAAqB;AAC3C,OAAK,KAAL,CAAW,MAAX,CAAkB,IAAlB,EAAwB,GAAxB;AACA,SAAO,IAAP;AACD,CAHD;;AAKA,KAAK,SAAL,CAAe,MAAf,GAAwB,UAAU,GAAV,EAAe;AACrC,MAAI,IAAI,KAAK,KAAL,CAAW,MAAX,EAAR;AACA,SAAO,WAAW,KAAK,IAAhB,EAAsB,MAAtB,CAA6B,KAAK,KAAlC,EAAyC,MAAzC,CAAgD,CAAhD,EAAmD,MAAnD,CAA0D,GAA1D,CAAP;AACD,CAHD","file":"create-hmac-compiled.js","sourcesContent":["var createHash = require('./create-hash')\n\nvar zeroBuffer = new Buffer(128)\nzeroBuffer.fill(0)\n\nmodule.exports = Hmac\n\nfunction Hmac (alg, key) {\n  if(!(this instanceof Hmac)) return new Hmac(alg, key)\n  this._opad = opad\n  this._alg = alg\n\n  var blocksize = (alg === 'sha512') ? 128 : 64\n\n  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key\n\n  if(key.length > blocksize) {\n    key = createHash(alg).update(key).digest()\n  } else if(key.length < blocksize) {\n    key = Buffer.concat([key, zeroBuffer], blocksize)\n  }\n\n  var ipad = this._ipad = new Buffer(blocksize)\n  var opad = this._opad = new Buffer(blocksize)\n\n  for(var i = 0; i < blocksize; i++) {\n    ipad[i] = key[i] ^ 0x36\n    opad[i] = key[i] ^ 0x5C\n  }\n\n  this._hash = createHash(alg).update(ipad)\n}\n\nHmac.prototype.update = function (data, enc) {\n  this._hash.update(data, enc)\n  return this\n}\n\nHmac.prototype.digest = function (enc) {\n  var h = this._hash.digest()\n  return createHash(this._alg).update(this._opad).update(h).digest(enc)\n}\n\n"]}