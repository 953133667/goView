{"version":3,"sources":["sha1.js"],"names":[],"mappings":"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","file":"sha1-compiled.js","sourcesContent":["/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS PUB 180-1\n * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n\nvar inherits = require('util').inherits\n\nmodule.exports = function (Buffer, Hash) {\n\n  var A = 0|0\n  var B = 4|0\n  var C = 8|0\n  var D = 12|0\n  var E = 16|0\n\n  var W = new (typeof Int32Array === 'undefined' ? Array : Int32Array)(80)\n\n  var POOL = []\n\n  function Sha1 () {\n    if(POOL.length)\n      return POOL.pop().init()\n\n    if(!(this instanceof Sha1)) return new Sha1()\n    this._w = W\n    Hash.call(this, 16*4, 14*4)\n\n    this._h = null\n    this.init()\n  }\n\n  inherits(Sha1, Hash)\n\n  Sha1.prototype.init = function () {\n    this._a = 0x67452301\n    this._b = 0xefcdab89\n    this._c = 0x98badcfe\n    this._d = 0x10325476\n    this._e = 0xc3d2e1f0\n\n    Hash.prototype.init.call(this)\n    return this\n  }\n\n  Sha1.prototype._POOL = POOL\n  Sha1.prototype._update = function (X) {\n\n    var a, b, c, d, e, _a, _b, _c, _d, _e\n\n    a = _a = this._a\n    b = _b = this._b\n    c = _c = this._c\n    d = _d = this._d\n    e = _e = this._e\n\n    var w = this._w\n\n    for(var j = 0; j < 80; j++) {\n      var W = w[j] = j < 16 ? X.readInt32BE(j*4)\n        : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)\n\n      var t = add(\n        add(rol(a, 5), sha1_ft(j, b, c, d)),\n        add(add(e, W), sha1_kt(j))\n      )\n\n      e = d\n      d = c\n      c = rol(b, 30)\n      b = a\n      a = t\n    }\n\n    this._a = add(a, _a)\n    this._b = add(b, _b)\n    this._c = add(c, _c)\n    this._d = add(d, _d)\n    this._e = add(e, _e)\n  }\n\n  Sha1.prototype._hash = function () {\n    if(POOL.length < 100) POOL.push(this)\n    var H = new Buffer(20)\n    //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)\n    H.writeInt32BE(this._a|0, A)\n    H.writeInt32BE(this._b|0, B)\n    H.writeInt32BE(this._c|0, C)\n    H.writeInt32BE(this._d|0, D)\n    H.writeInt32BE(this._e|0, E)\n    return H\n  }\n\n  /*\n   * Perform the appropriate triplet combination function for the current\n   * iteration\n   */\n  function sha1_ft(t, b, c, d) {\n    if(t < 20) return (b & c) | ((~b) & d);\n    if(t < 40) return b ^ c ^ d;\n    if(t < 60) return (b & c) | (b & d) | (c & d);\n    return b ^ c ^ d;\n  }\n\n  /*\n   * Determine the appropriate additive constant for the current iteration\n   */\n  function sha1_kt(t) {\n    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :\n           (t < 60) ? -1894007588 : -899497514;\n  }\n\n  /*\n   * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n   * to work around bugs in some JS interpreters.\n   * //dominictarr: this is 10 years old, so maybe this can be dropped?)\n   *\n   */\n  function add(x, y) {\n    return (x + y ) | 0\n  //lets see how this goes on testling.\n  //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n  //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  //  return (msw << 16) | (lsw & 0xFFFF);\n  }\n\n  /*\n   * Bitwise rotate a 32-bit number to the left.\n   */\n  function rol(num, cnt) {\n    return (num << cnt) | (num >>> (32 - cnt));\n  }\n\n  return Sha1\n}\n"]}