{"version":3,"sources":["test.js"],"names":[],"mappings":"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","file":"test-compiled.js","sourcesContent":["\nvar crypto = require('crypto')\nvar tape   = require('tape')\nvar Sha1   = require('../').sha1\nvar Uint32toHex = Sha1.Uint32toHex\n\nfunction generateCount (m) {\n  var s = ''\n  for(var i = 0; i < m/8; i++) {\n    console.log('GENERATE', i, Uint32toHex(i))\n    s+=i\n  }\n  return s\n}\n\nvar inputs = [\n ['', 'ascii'],\n ['abc', 'ascii'],\n ['123', 'ascii'],\n ['123456789abcdef123456789abcdef123456789abcdef123456789abcdef', 'ascii'],\n ['123456789abcdef123456789abcdef123456789abcdef123456789abc', 'ascii'],\n ['123456789abcdef123456789abcdef123456789abcdef123456789ab', 'ascii'],\n ['0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcde', 'ascii'],\n ['0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef', 'ascii'],\n ['foobarbaz', 'ascii']\n]\n\ntape(\"hash is the same as node's crypto\", function (t) {\n\n  inputs.forEach(function (v) {\n    var a = new Sha1().update(v[0], v[1]).digest('hex')\n    var e = crypto.createHash('sha1').update(v[0], v[1]).digest('hex')\n    console.log(a, '==', e)\n    t.equal(a, e)\n  })\n\n  t.end()\n\n})\n\ntape('call update multiple times', function (t) {\n  var n = 1\n  inputs.forEach(function (v) {\n    var hash = new Sha1()\n    var _hash = crypto.createHash('sha1')\n    for(var i = 0; i < v[0].length; i=(i+1)*2) {\n      var s = v[0].substring(i, (i+1)*2)\n      hash.update(s, v[1])\n      _hash.update(s, v[1])\n    }\n    var a = hash.digest('hex')\n    var e = _hash.digest('hex')\n    console.log(a, '==', e)\n    t.equal(a, e)\n  })\n  t.end()\n})\n\n\ntape('call update twice', function (t) {\n\n  var _hash = crypto.createHash('sha1')\n  var hash  = new Sha1()\n\n  _hash.update('foo', 'ascii')\n  hash.update('foo', 'ascii')\n\n  _hash.update('bar', 'ascii')\n  hash.update('bar', 'ascii')\n\n  _hash.update('baz', 'ascii')\n  hash.update('baz', 'ascii')\n\n  var a = hash.digest('hex')\n  var e = _hash.digest('hex')\n\n  t.equal(a, e)\n  t.end()\n})\n\n\ntape('hex encoding', function (t) {\n  var n = 1\n  inputs.forEach(function (v) {\n    var hash = new Sha1()\n    var _hash = crypto.createHash('sha1')\n    for(var i = 0; i < v[0].length; i=(i+1)*2) {\n      var s = v[0].substring(i, (i+1)*2)\n      hash.update(new Buffer(s, 'ascii').toString('hex'), 'hex')\n      _hash.update(new Buffer(s, 'ascii').toString('hex'), 'hex')\n    }\n    var a = hash.digest('hex')\n    var e = _hash.digest('hex')\n    console.log(a, '==', e)\n    t.equal(a, e)\n  })\n  t.end()\n})\n\n"]}