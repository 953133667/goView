{"version":3,"sources":["vectors.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,KAAO,QAAQ,IAAR,CAAX;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;;AAEA,IAAI,MAAM,KAAK,IAAL,CAAU,SAAV,EAAqB,SAArB,CAAV;;AAEA,IAAI,UAAU,GAAG,WAAH,CAAe,GAAf,EACX,IADW,GAEX,MAFW,CAEJ,UAAU,CAAV,EAAa;AACnB,SAAO,EAAE,KAAF,CAAQ,QAAR,CAAP;AACD,CAJW,EAKX,GALW,CAKP,UAAU,CAAV,EAAa;AAChB,SAAO,GAAG,YAAH,CAAgB,KAAK,IAAL,CAAU,GAAV,EAAe,CAAf,CAAhB,CAAP;AACD,CAPW,CAAd;;AASA,IAAI,SAAS,EAAb,CAEC,CAAC,MAAD,EAAS,QAAT,EAAmB,KAAnB,EAA0B,OAA1B,CAAkC,UAAU,IAAV,EAAgB;AACjD,SAAO,IAAP,IACE,GAAG,YAAH,CAAgB,KAAK,IAAL,CAAU,GAAV,EAAe,iBAAiB,IAAhC,CAAhB,EAAuD,OAAvD,EACC,KADD,CACO,OADP,CADF;AAGD,CAJA;;AAMD,IAAI,WAAW,EAAf;;AAEA,KAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,QAAQ,MAA5B,EAAoC,GAApC,EAAyC;AACvC,MAAI,SAAS,OAAO,UAAP,CAAkB,QAAlB,EAA4B,MAA5B,CAAmC,IAAI,MAAJ,CAAW,QAAQ,CAAR,CAAX,CAAnC,EAA2D,MAA3D,CAAkE,KAAlE,CAAb;;AAEA,WAAS,IAAT,CAAc;AACZ,WAAS,QAAQ,CAAR,EAAW,QAAX,CAAoB,QAApB,CADG;AAEZ,UAAS,OAAO,IAAP,CAAY,CAAZ,CAFG;AAGZ,YAAS,OAAO,MAAP,CAAc,CAAd,CAHG;AAIZ,YAAS;AAJG,GAAd;;AAOA,SAAO,KAAP,CACE,OAAO,UAAP,CAAkB,MAAlB,EAA0B,MAA1B,CAAiC,IAAI,MAAJ,CAAW,QAAQ,CAAR,CAAX,CAAjC,EAAyD,MAAzD,CAAgE,KAAhE,CADF,EAEE,OAAO,IAAP,CAAY,CAAZ,CAFF;;AAIA,SAAO,KAAP,CACE,OAAO,UAAP,CAAkB,QAAlB,EAA4B,MAA5B,CAAmC,IAAI,MAAJ,CAAW,QAAQ,CAAR,CAAX,CAAnC,EAA2D,MAA3D,CAAkE,KAAlE,CADF,EAEE,OAAO,MAAP,CAAc,CAAd,CAFF;;AAIA,SAAO,KAAP,CACE,OAAO,UAAP,CAAkB,KAAlB,EAAyB,MAAzB,CAAgC,IAAI,MAAJ,CAAW,QAAQ,CAAR,CAAX,CAAhC,EAAwD,MAAxD,CAA+D,KAA/D,CADF,EAEE,OAAO,GAAP,CAAW,CAAX,CAFF;AAGD;;AAED,QAAQ,GAAR,CAAY,KAAK,SAAL,CAAe,QAAf,EAAyB,IAAzB,EAA+B,CAA/B,CAAZ","file":"vectors-compiled.js","sourcesContent":["var assert = require('assert')\nvar crypto = require('crypto')\nvar fs   = require('fs')\nvar path = require('path')\n\nvar dir = path.join(__dirname, 'vectors')\n\nvar vectors = fs.readdirSync(dir)\n  .sort()\n  .filter(function (f) {\n    return f.match(/\\.dat$/)\n  })\n  .map(function (f) {\n    return fs.readFileSync(path.join(dir, f))\n  })\n\nvar hashes = {}\n\n;['sha1', 'sha256', 'md5'].forEach(function (name) {\n  hashes[name] =\n    fs.readFileSync(path.join(dir, 'byte-hashes.' + name), 'ascii')\n    .split(/\\r?\\n/)\n})\n\nvar expected = []\n\nfor (var i = 0; i < vectors.length; i++) {\n  var sha512 = crypto.createHash('sha512').update(new Buffer(vectors[i])).digest('hex')\n\n  expected.push({\n    input  : vectors[i].toString('base64'),\n    sha1   : hashes.sha1[i],\n    sha256 : hashes.sha256[i],\n    sha512 : sha512\n  })\n\n  assert.equal(\n    crypto.createHash('sha1').update(new Buffer(vectors[i])).digest('hex'),\n    hashes.sha1[i])\n\n  assert.equal(\n    crypto.createHash('sha256').update(new Buffer(vectors[i])).digest('hex'),\n    hashes.sha256[i])\n\n  assert.equal(\n    crypto.createHash('md5').update(new Buffer(vectors[i])).digest('hex'),\n    hashes.md5[i])\n}\n\nconsole.log(JSON.stringify(expected, null, 2))\n"]}