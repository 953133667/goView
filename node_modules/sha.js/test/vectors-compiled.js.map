{"version":3,"sources":["vectors.js"],"names":[],"mappings":";AACA,IAAI,UAAU,QAAQ,qBAAR,CAAd;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA;AACA,IAAI,SAAS,QAAQ,QAAR,EAAkB,MAA/B;AACA,IAAI,QAAQ,QAAQ,UAAR,CAAZ;;AAEA,IAAI,aAAa,QAAQ,KAAR,CAAjB;;AAEA,SAAS,QAAT,CAAkB,GAAlB,EAAuB,CAAvB,EAA0B,OAA1B,EAAmC;AACjC,MAAI,IAAI,QAAQ,CAAR,CAAR;;AAEA,OAAK,MAAM,gBAAN,GAAyB,CAA9B,EAAiC,UAAU,CAAV,EAAa;AAC5C,QAAG,OAAH,EAAY;AACV,cAAQ,GAAR,CAAY,CAAZ;AACA,cAAQ,GAAR,CAAY,QAAZ,EAAsB,CAAtB;AACA,cAAQ,GAAR,CAAY,OAAZ,EAAqB,EAAE,KAAvB;AACA,cAAQ,GAAR,CAAY,MAAM,IAAI,MAAJ,CAAW,EAAE,KAAb,EAAoB,QAApB,CAAN,CAAZ;AACA,cAAQ,GAAR,CAAY,IAAI,MAAJ,CAAW,EAAE,KAAb,EAAoB,QAApB,EAA8B,QAA9B,CAAuC,KAAvC,CAAZ;AACD;AACD,QAAI,MAAM,IAAI,MAAJ,CAAW,EAAE,KAAb,EAAoB,QAApB,CAAV;AACA,MAAE,KAAF,CAAQ,WAAW,GAAX,EAAgB,MAAhB,CAAuB,GAAvB,EAA4B,MAA5B,CAAmC,KAAnC,CAAR,EAAmD,EAAE,GAAF,CAAnD;;AAEA,QAAI,CAAC,EAAE,IAAI,MAAJ,GAAa,CAAf,CAAL;AACA,QAAI,OAAO,IAAI,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAX;AACA,QAAI,OAAO,IAAI,KAAJ,CAAU,CAAV,EAAa,IAAI,MAAjB,CAAX;;AAEA,YAAQ,GAAR,CAAY,KAAK,MAAjB,EAAyB,KAAK,MAA9B,EAAsC,IAAI,MAA1C;AACA,YAAQ,GAAR,CAAY,WAAW,GAAX,EAAgB,MAAhB,CAAuB,MAAnC;;AAEA,MAAE,KAAF,CACE,WAAW,GAAX,EACG,MADH,CACU,IADV,EAEG,MAFH,CAEU,IAFV,EAGG,MAHH,CAGU,KAHV,CADF,EAKE,EAAE,GAAF,CALF;;AAQA,QAAI,CAAJ,EAAO,IAAP;;AAEA,QAAO,CAAC,EAAE,IAAI,MAAJ,GAAa,CAAf,CAAR;AACA,QAAO,CAAC,EAAE,IAAI,MAAJ,GAAa,CAAb,GAAiB,CAAnB,CAAR;AACA,WAAO,IAAI,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAP;AACA,WAAO,IAAI,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAP;AACA,WAAO,IAAI,KAAJ,CAAU,CAAV,EAAa,IAAI,MAAjB,CAAP;;AAEA,MAAE,KAAF,CACE,WAAW,GAAX,EACG,MADH,CACU,IADV,EAEG,MAFH,CAEU,IAFV,EAGG,MAHH,CAGU,IAHV,EAIG,MAJH,CAIU,KAJV,CADF,EAME,EAAE,GAAF,CANF;;AASA,eAAW,YAAY;AACrB;AACA,QAAE,GAAF;AACD,KAHD;AAID,GA/CD;AAiDD;;AAED,IAAG,QAAQ,IAAR,CAAa,CAAb,CAAH,EACE,SAAS,QAAQ,IAAR,CAAa,CAAb,CAAT,EAA0B,SAAS,QAAQ,IAAR,CAAa,CAAb,CAAT,CAA1B,EAAqD,IAArD,EADF,KAGE,QAAQ,OAAR,CAAgB,UAAU,CAAV,EAAa,CAAb,EAAgB;AAC9B,WAAS,MAAT,EAAiB,CAAjB;AACA,WAAS,QAAT,EAAmB,CAAnB;AACA,WAAS,QAAT,EAAmB,CAAnB;AACD,CAJD","file":"vectors-compiled.js","sourcesContent":["\nvar vectors = require('./nist-vectors.json')\nvar tape = require('tape')\n//var from = require('bops/typedarray/from')\nvar Buffer = require('buffer').Buffer\nvar hexpp = require('../hexpp')\n\nvar createHash = require('../')\n\nfunction makeTest(alg, i, verbose) {\n  var v = vectors[i]\n\n  tape(alg + ': NIST vector ' + i, function (t) {\n    if(verbose) {\n      console.log(v)\n      console.log('VECTOR', i)\n      console.log('INPUT', v.input)\n      console.log(hexpp(new Buffer(v.input, 'base64')))\n      console.log(new Buffer(v.input, 'base64').toString('hex'))\n    }\n    var buf = new Buffer(v.input, 'base64')\n    t.equal(createHash(alg).update(buf).digest('hex'), v[alg])\n\n    i = ~~(buf.length / 2)\n    var buf1 = buf.slice(0, i)\n    var buf2 = buf.slice(i, buf.length)\n\n    console.log(buf1.length, buf2.length, buf.length)\n    console.log(createHash(alg)._block.length)\n\n    t.equal(\n      createHash(alg)\n        .update(buf1)\n        .update(buf2)\n        .digest('hex'),\n      v[alg]\n    )\n\n    var j, buf3\n\n    i    = ~~(buf.length / 3)\n    j    = ~~(buf.length * 2 / 3)\n    buf1 = buf.slice(0, i)\n    buf2 = buf.slice(i, j)\n    buf3 = buf.slice(j, buf.length)\n\n    t.equal(\n      createHash(alg)\n        .update(buf1)\n        .update(buf2)\n        .update(buf3)\n        .digest('hex'),\n      v[alg]\n    )\n\n    setTimeout(function () {\n      //avoid \"too much recursion\" errors in tape in firefox\n      t.end()\n    })\n  })\n\n}\n\nif(process.argv[2])\n  makeTest(process.argv[2], parseInt(process.argv[3]), true)\nelse\n  vectors.forEach(function (v, i) {\n    makeTest('sha1', i)\n    makeTest('sha256', i)\n    makeTest('sha512', i)\n  })\n\n\n\n"]}