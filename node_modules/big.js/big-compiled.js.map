{"version":3,"sources":["big.js"],"names":[],"mappings":"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","file":"big-compiled.js","sourcesContent":["/* big.js v3.1.3 https://github.com/MikeMcl/big.js/LICENCE */\r\n;(function (global) {\r\n    'use strict';\r\n\r\n/*\r\n  big.js v3.1.3\r\n  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n  https://github.com/MikeMcl/big.js/\r\n  Copyright (c) 2014 Michael Mclaughlin <M8ch88l@gmail.com>\r\n  MIT Expat Licence\r\n*/\r\n\r\n/***************************** EDITABLE DEFAULTS ******************************/\r\n\r\n    // The default values below must be integers within the stated ranges.\r\n\r\n    /*\r\n     * The maximum number of decimal places of the results of operations\r\n     * involving division: div and sqrt, and pow with negative exponents.\r\n     */\r\n    var DP = 20,                           // 0 to MAX_DP\r\n\r\n        /*\r\n         * The rounding mode used when rounding to the above decimal places.\r\n         *\r\n         * 0 Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n         * 1 To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n         * 2 To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n         * 3 Away from zero.                                  (ROUND_UP)\r\n         */\r\n        RM = 1,                            // 0, 1, 2 or 3\r\n\r\n        // The maximum value of DP and Big.DP.\r\n        MAX_DP = 1E6,                      // 0 to 1000000\r\n\r\n        // The maximum magnitude of the exponent argument to the pow method.\r\n        MAX_POWER = 1E6,                   // 1 to 1000000\r\n\r\n        /*\r\n         * The exponent value at and beneath which toString returns exponential\r\n         * notation.\r\n         * JavaScript's Number type: -7\r\n         * -1000000 is the minimum recommended exponent value of a Big.\r\n         */\r\n        E_NEG = -7,                   // 0 to -1000000\r\n\r\n        /*\r\n         * The exponent value at and above which toString returns exponential\r\n         * notation.\r\n         * JavaScript's Number type: 21\r\n         * 1000000 is the maximum recommended exponent value of a Big.\r\n         * (This limit is not enforced or checked.)\r\n         */\r\n        E_POS = 21,                   // 0 to 1000000\r\n\r\n/******************************************************************************/\r\n\r\n        // The shared prototype object.\r\n        P = {},\r\n        isValid = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n        Big;\r\n\r\n\r\n    /*\r\n     * Create and return a Big constructor.\r\n     *\r\n     */\r\n    function bigFactory() {\r\n\r\n        /*\r\n         * The Big constructor and exported function.\r\n         * Create and return a new instance of a Big number object.\r\n         *\r\n         * n {number|string|Big} A numeric value.\r\n         */\r\n        function Big(n) {\r\n            var x = this;\r\n\r\n            // Enable constructor usage without new.\r\n            if (!(x instanceof Big)) {\r\n                return n === void 0 ? bigFactory() : new Big(n);\r\n            }\r\n\r\n            // Duplicate.\r\n            if (n instanceof Big) {\r\n                x.s = n.s;\r\n                x.e = n.e;\r\n                x.c = n.c.slice();\r\n            } else {\r\n                parse(x, n);\r\n            }\r\n\r\n            /*\r\n             * Retain a reference to this Big constructor, and shadow\r\n             * Big.prototype.constructor which points to Object.\r\n             */\r\n            x.constructor = Big;\r\n        }\r\n\r\n        Big.prototype = P;\r\n        Big.DP = DP;\r\n        Big.RM = RM;\r\n        Big.E_NEG = E_NEG;\r\n        Big.E_POS = E_POS;\r\n\r\n        return Big;\r\n    }\r\n\r\n\r\n    // Private functions\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of Big x in normal or exponential\r\n     * notation to dp fixed decimal places or significant digits.\r\n     *\r\n     * x {Big} The Big to format.\r\n     * dp {number} Integer, 0 to MAX_DP inclusive.\r\n     * toE {number} 1 (toExponential), 2 (toPrecision) or undefined (toFixed).\r\n     */\r\n    function format(x, dp, toE) {\r\n        var Big = x.constructor,\r\n\r\n            // The index (normal notation) of the digit that may be rounded up.\r\n            i = dp - (x = new Big(x)).e,\r\n            c = x.c;\r\n\r\n        // Round?\r\n        if (c.length > ++dp) {\r\n            rnd(x, i, Big.RM);\r\n        }\r\n\r\n        if (!c[0]) {\r\n            ++i;\r\n        } else if (toE) {\r\n            i = dp;\r\n\r\n        // toFixed\r\n        } else {\r\n            c = x.c;\r\n\r\n            // Recalculate i as x.e may have changed if value rounded up.\r\n            i = x.e + i + 1;\r\n        }\r\n\r\n        // Append zeros?\r\n        for (; c.length < i; c.push(0)) {\r\n        }\r\n        i = x.e;\r\n\r\n        /*\r\n         * toPrecision returns exponential notation if the number of\r\n         * significant digits specified is less than the number of digits\r\n         * necessary to represent the integer part of the value in normal\r\n         * notation.\r\n         */\r\n        return toE === 1 || toE && (dp <= i || i <= Big.E_NEG) ?\r\n\r\n          // Exponential notation.\r\n          (x.s < 0 && c[0] ? '-' : '') +\r\n            (c.length > 1 ? c[0] + '.' + c.join('').slice(1) : c[0]) +\r\n              (i < 0 ? 'e' : 'e+') + i\r\n\r\n          // Normal notation.\r\n          : x.toString();\r\n    }\r\n\r\n\r\n    /*\r\n     * Parse the number or string value passed to a Big constructor.\r\n     *\r\n     * x {Big} A Big number instance.\r\n     * n {number|string} A numeric value.\r\n     */\r\n    function parse(x, n) {\r\n        var e, i, nL;\r\n\r\n        // Minus zero?\r\n        if (n === 0 && 1 / n < 0) {\r\n            n = '-0';\r\n\r\n        // Ensure n is string and check validity.\r\n        } else if (!isValid.test(n += '')) {\r\n            throwErr(NaN);\r\n        }\r\n\r\n        // Determine sign.\r\n        x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\r\n\r\n        // Decimal point?\r\n        if ((e = n.indexOf('.')) > -1) {\r\n            n = n.replace('.', '');\r\n        }\r\n\r\n        // Exponential form?\r\n        if ((i = n.search(/e/i)) > 0) {\r\n\r\n            // Determine exponent.\r\n            if (e < 0) {\r\n                e = i;\r\n            }\r\n            e += +n.slice(i + 1);\r\n            n = n.substring(0, i);\r\n\r\n        } else if (e < 0) {\r\n\r\n            // Integer.\r\n            e = n.length;\r\n        }\r\n\r\n        // Determine leading zeros.\r\n        for (i = 0; n.charAt(i) == '0'; i++) {\r\n        }\r\n\r\n        if (i == (nL = n.length)) {\r\n\r\n            // Zero.\r\n            x.c = [ x.e = 0 ];\r\n        } else {\r\n\r\n            // Determine trailing zeros.\r\n            for (; n.charAt(--nL) == '0';) {\r\n            }\r\n\r\n            x.e = e - i - 1;\r\n            x.c = [];\r\n\r\n            // Convert string to array of digits without leading/trailing zeros.\r\n            for (e = 0; i <= nL; x.c[e++] = +n.charAt(i++)) {\r\n            }\r\n        }\r\n\r\n        return x;\r\n    }\r\n\r\n\r\n    /*\r\n     * Round Big x to a maximum of dp decimal places using rounding mode rm.\r\n     * Called by div, sqrt and round.\r\n     *\r\n     * x {Big} The Big to round.\r\n     * dp {number} Integer, 0 to MAX_DP inclusive.\r\n     * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\r\n     * [more] {boolean} Whether the result of division was truncated.\r\n     */\r\n    function rnd(x, dp, rm, more) {\r\n        var u,\r\n            xc = x.c,\r\n            i = x.e + dp + 1;\r\n\r\n        if (rm === 1) {\r\n\r\n            // xc[i] is the digit after the digit that may be rounded up.\r\n            more = xc[i] >= 5;\r\n        } else if (rm === 2) {\r\n            more = xc[i] > 5 || xc[i] == 5 &&\r\n              (more || i < 0 || xc[i + 1] !== u || xc[i - 1] & 1);\r\n        } else if (rm === 3) {\r\n            more = more || xc[i] !== u || i < 0;\r\n        } else {\r\n            more = false;\r\n\r\n            if (rm !== 0) {\r\n                throwErr('!Big.RM!');\r\n            }\r\n        }\r\n\r\n        if (i < 1 || !xc[0]) {\r\n\r\n            if (more) {\r\n\r\n                // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n                x.e = -dp;\r\n                x.c = [1];\r\n            } else {\r\n\r\n                // Zero.\r\n                x.c = [x.e = 0];\r\n            }\r\n        } else {\r\n\r\n            // Remove any digits after the required decimal places.\r\n            xc.length = i--;\r\n\r\n            // Round up?\r\n            if (more) {\r\n\r\n                // Rounding up may mean the previous digit has to be rounded up.\r\n                for (; ++xc[i] > 9;) {\r\n                    xc[i] = 0;\r\n\r\n                    if (!i--) {\r\n                        ++x.e;\r\n                        xc.unshift(1);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Remove trailing zeros.\r\n            for (i = xc.length; !xc[--i]; xc.pop()) {\r\n            }\r\n        }\r\n\r\n        return x;\r\n    }\r\n\r\n\r\n    /*\r\n     * Throw a BigError.\r\n     *\r\n     * message {string} The error message.\r\n     */\r\n    function throwErr(message) {\r\n        var err = new Error(message);\r\n        err.name = 'BigError';\r\n\r\n        throw err;\r\n    }\r\n\r\n\r\n    // Prototype/instance methods\r\n\r\n\r\n    /*\r\n     * Return a new Big whose value is the absolute value of this Big.\r\n     */\r\n    P.abs = function () {\r\n        var x = new this.constructor(this);\r\n        x.s = 1;\r\n\r\n        return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     * 1 if the value of this Big is greater than the value of Big y,\r\n     * -1 if the value of this Big is less than the value of Big y, or\r\n     * 0 if they have the same value.\r\n    */\r\n    P.cmp = function (y) {\r\n        var xNeg,\r\n            x = this,\r\n            xc = x.c,\r\n            yc = (y = new x.constructor(y)).c,\r\n            i = x.s,\r\n            j = y.s,\r\n            k = x.e,\r\n            l = y.e;\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n            return !xc[0] ? !yc[0] ? 0 : -j : i;\r\n        }\r\n\r\n        // Signs differ?\r\n        if (i != j) {\r\n            return i;\r\n        }\r\n        xNeg = i < 0;\r\n\r\n        // Compare exponents.\r\n        if (k != l) {\r\n            return k > l ^ xNeg ? 1 : -1;\r\n        }\r\n\r\n        i = -1;\r\n        j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n        // Compare digit by digit.\r\n        for (; ++i < j;) {\r\n\r\n            if (xc[i] != yc[i]) {\r\n                return xc[i] > yc[i] ^ xNeg ? 1 : -1;\r\n            }\r\n        }\r\n\r\n        // Compare lengths.\r\n        return k == l ? 0 : k > l ^ xNeg ? 1 : -1;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new Big whose value is the value of this Big divided by the\r\n     * value of Big y, rounded, if necessary, to a maximum of Big.DP decimal\r\n     * places using rounding mode Big.RM.\r\n     */\r\n    P.div = function (y) {\r\n        var x = this,\r\n            Big = x.constructor,\r\n            // dividend\r\n            dvd = x.c,\r\n            //divisor\r\n            dvs = (y = new Big(y)).c,\r\n            s = x.s == y.s ? 1 : -1,\r\n            dp = Big.DP;\r\n\r\n        if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n            throwErr('!Big.DP!');\r\n        }\r\n\r\n        // Either 0?\r\n        if (!dvd[0] || !dvs[0]) {\r\n\r\n            // If both are 0, throw NaN\r\n            if (dvd[0] == dvs[0]) {\r\n                throwErr(NaN);\r\n            }\r\n\r\n            // If dvs is 0, throw +-Infinity.\r\n            if (!dvs[0]) {\r\n                throwErr(s / 0);\r\n            }\r\n\r\n            // dvd is 0, return +-0.\r\n            return new Big(s * 0);\r\n        }\r\n\r\n        var dvsL, dvsT, next, cmp, remI, u,\r\n            dvsZ = dvs.slice(),\r\n            dvdI = dvsL = dvs.length,\r\n            dvdL = dvd.length,\r\n            // remainder\r\n            rem = dvd.slice(0, dvsL),\r\n            remL = rem.length,\r\n            // quotient\r\n            q = y,\r\n            qc = q.c = [],\r\n            qi = 0,\r\n            digits = dp + (q.e = x.e - y.e) + 1;\r\n\r\n        q.s = s;\r\n        s = digits < 0 ? 0 : digits;\r\n\r\n        // Create version of divisor with leading zero.\r\n        dvsZ.unshift(0);\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL++ < dvsL; rem.push(0)) {\r\n        }\r\n\r\n        do {\r\n\r\n            // 'next' is how many times the divisor goes into current remainder.\r\n            for (next = 0; next < 10; next++) {\r\n\r\n                // Compare divisor and remainder.\r\n                if (dvsL != (remL = rem.length)) {\r\n                    cmp = dvsL > remL ? 1 : -1;\r\n                } else {\r\n\r\n                    for (remI = -1, cmp = 0; ++remI < dvsL;) {\r\n\r\n                        if (dvs[remI] != rem[remI]) {\r\n                            cmp = dvs[remI] > rem[remI] ? 1 : -1;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // If divisor < remainder, subtract divisor from remainder.\r\n                if (cmp < 0) {\r\n\r\n                    // Remainder can't be more than 1 digit longer than divisor.\r\n                    // Equalise lengths using divisor with extra leading zero?\r\n                    for (dvsT = remL == dvsL ? dvs : dvsZ; remL;) {\r\n\r\n                        if (rem[--remL] < dvsT[remL]) {\r\n                            remI = remL;\r\n\r\n                            for (; remI && !rem[--remI]; rem[remI] = 9) {\r\n                            }\r\n                            --rem[remI];\r\n                            rem[remL] += 10;\r\n                        }\r\n                        rem[remL] -= dvsT[remL];\r\n                    }\r\n                    for (; !rem[0]; rem.shift()) {\r\n                    }\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Add the 'next' digit to the result array.\r\n            qc[qi++] = cmp ? next : ++next;\r\n\r\n            // Update the remainder.\r\n            if (rem[0] && cmp) {\r\n                rem[remL] = dvd[dvdI] || 0;\r\n            } else {\r\n                rem = [ dvd[dvdI] ];\r\n            }\r\n\r\n        } while ((dvdI++ < dvdL || rem[0] !== u) && s--);\r\n\r\n        // Leading zero? Do not remove if result is simply zero (qi == 1).\r\n        if (!qc[0] && qi != 1) {\r\n\r\n            // There can't be more than one zero.\r\n            qc.shift();\r\n            q.e--;\r\n        }\r\n\r\n        // Round?\r\n        if (qi > digits) {\r\n            rnd(q, dp, Big.RM, rem[0] !== u);\r\n        }\r\n\r\n        return q;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this Big is equal to the value of Big y,\r\n     * otherwise returns false.\r\n     */\r\n    P.eq = function (y) {\r\n        return !this.cmp(y);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this Big is greater than the value of Big y,\r\n     * otherwise returns false.\r\n     */\r\n    P.gt = function (y) {\r\n        return this.cmp(y) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this Big is greater than or equal to the\r\n     * value of Big y, otherwise returns false.\r\n     */\r\n    P.gte = function (y) {\r\n        return this.cmp(y) > -1;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this Big is less than the value of Big y,\r\n     * otherwise returns false.\r\n     */\r\n    P.lt = function (y) {\r\n        return this.cmp(y) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this Big is less than or equal to the value\r\n     * of Big y, otherwise returns false.\r\n     */\r\n    P.lte = function (y) {\r\n         return this.cmp(y) < 1;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new Big whose value is the value of this Big minus the value\r\n     * of Big y.\r\n     */\r\n    P.sub = P.minus = function (y) {\r\n        var i, j, t, xLTy,\r\n            x = this,\r\n            Big = x.constructor,\r\n            a = x.s,\r\n            b = (y = new Big(y)).s;\r\n\r\n        // Signs differ?\r\n        if (a != b) {\r\n            y.s = -b;\r\n            return x.plus(y);\r\n        }\r\n\r\n        var xc = x.c.slice(),\r\n            xe = x.e,\r\n            yc = y.c,\r\n            ye = y.e;\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n            // y is non-zero? x is non-zero? Or both are zero.\r\n            return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\r\n        }\r\n\r\n        // Determine which is the bigger number.\r\n        // Prepend zeros to equalise exponents.\r\n        if (a = xe - ye) {\r\n\r\n            if (xLTy = a < 0) {\r\n                a = -a;\r\n                t = xc;\r\n            } else {\r\n                ye = xe;\r\n                t = yc;\r\n            }\r\n\r\n            t.reverse();\r\n            for (b = a; b--; t.push(0)) {\r\n            }\r\n            t.reverse();\r\n        } else {\r\n\r\n            // Exponents equal. Check digit by digit.\r\n            j = ((xLTy = xc.length < yc.length) ? xc : yc).length;\r\n\r\n            for (a = b = 0; b < j; b++) {\r\n\r\n                if (xc[b] != yc[b]) {\r\n                    xLTy = xc[b] < yc[b];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // x < y? Point xc to the array of the bigger number.\r\n        if (xLTy) {\r\n            t = xc;\r\n            xc = yc;\r\n            yc = t;\r\n            y.s = -y.s;\r\n        }\r\n\r\n        /*\r\n         * Append zeros to xc if shorter. No need to add zeros to yc if shorter\r\n         * as subtraction only needs to start at yc.length.\r\n         */\r\n        if (( b = (j = yc.length) - (i = xc.length) ) > 0) {\r\n\r\n            for (; b--; xc[i++] = 0) {\r\n            }\r\n        }\r\n\r\n        // Subtract yc from xc.\r\n        for (b = i; j > a;){\r\n\r\n            if (xc[--j] < yc[j]) {\r\n\r\n                for (i = j; i && !xc[--i]; xc[i] = 9) {\r\n                }\r\n                --xc[i];\r\n                xc[j] += 10;\r\n            }\r\n            xc[j] -= yc[j];\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--b] === 0; xc.pop()) {\r\n        }\r\n\r\n        // Remove leading zeros and adjust exponent accordingly.\r\n        for (; xc[0] === 0;) {\r\n            xc.shift();\r\n            --ye;\r\n        }\r\n\r\n        if (!xc[0]) {\r\n\r\n            // n - n = +0\r\n            y.s = 1;\r\n\r\n            // Result must be zero.\r\n            xc = [ye = 0];\r\n        }\r\n\r\n        y.c = xc;\r\n        y.e = ye;\r\n\r\n        return y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new Big whose value is the value of this Big modulo the\r\n     * value of Big y.\r\n     */\r\n    P.mod = function (y) {\r\n        var yGTx,\r\n            x = this,\r\n            Big = x.constructor,\r\n            a = x.s,\r\n            b = (y = new Big(y)).s;\r\n\r\n        if (!y.c[0]) {\r\n            throwErr(NaN);\r\n        }\r\n\r\n        x.s = y.s = 1;\r\n        yGTx = y.cmp(x) == 1;\r\n        x.s = a;\r\n        y.s = b;\r\n\r\n        if (yGTx) {\r\n            return new Big(x);\r\n        }\r\n\r\n        a = Big.DP;\r\n        b = Big.RM;\r\n        Big.DP = Big.RM = 0;\r\n        x = x.div(y);\r\n        Big.DP = a;\r\n        Big.RM = b;\r\n\r\n        return this.minus( x.times(y) );\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new Big whose value is the value of this Big plus the value\r\n     * of Big y.\r\n     */\r\n    P.add = P.plus = function (y) {\r\n        var t,\r\n            x = this,\r\n            Big = x.constructor,\r\n            a = x.s,\r\n            b = (y = new Big(y)).s;\r\n\r\n        // Signs differ?\r\n        if (a != b) {\r\n            y.s = -b;\r\n            return x.minus(y);\r\n        }\r\n\r\n        var xe = x.e,\r\n            xc = x.c,\r\n            ye = y.e,\r\n            yc = y.c;\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n            // y is non-zero? x is non-zero? Or both are zero.\r\n            return yc[0] ? y : new Big(xc[0] ? x : a * 0);\r\n        }\r\n        xc = xc.slice();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        // Note: Faster to use reverse then do unshifts.\r\n        if (a = xe - ye) {\r\n\r\n            if (a > 0) {\r\n                ye = xe;\r\n                t = yc;\r\n            } else {\r\n                a = -a;\r\n                t = xc;\r\n            }\r\n\r\n            t.reverse();\r\n            for (; a--; t.push(0)) {\r\n            }\r\n            t.reverse();\r\n        }\r\n\r\n        // Point xc to the longer array.\r\n        if (xc.length - yc.length < 0) {\r\n            t = yc;\r\n            yc = xc;\r\n            xc = t;\r\n        }\r\n        a = yc.length;\r\n\r\n        /*\r\n         * Only start adding at yc.length - 1 as the further digits of xc can be\r\n         * left as they are.\r\n         */\r\n        for (b = 0; a;) {\r\n            b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\r\n            xc[a] %= 10;\r\n        }\r\n\r\n        // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\r\n        if (b) {\r\n            xc.unshift(b);\r\n            ++ye;\r\n        }\r\n\r\n         // Remove trailing zeros.\r\n        for (a = xc.length; xc[--a] === 0; xc.pop()) {\r\n        }\r\n\r\n        y.c = xc;\r\n        y.e = ye;\r\n\r\n        return y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a Big whose value is the value of this Big raised to the power n.\r\n     * If n is negative, round, if necessary, to a maximum of Big.DP decimal\r\n     * places using rounding mode Big.RM.\r\n     *\r\n     * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n     */\r\n    P.pow = function (n) {\r\n        var x = this,\r\n            one = new x.constructor(1),\r\n            y = one,\r\n            isNeg = n < 0;\r\n\r\n        if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {\r\n            throwErr('!pow!');\r\n        }\r\n\r\n        n = isNeg ? -n : n;\r\n\r\n        for (;;) {\r\n\r\n            if (n & 1) {\r\n                y = y.times(x);\r\n            }\r\n            n >>= 1;\r\n\r\n            if (!n) {\r\n                break;\r\n            }\r\n            x = x.times(x);\r\n        }\r\n\r\n        return isNeg ? one.div(y) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new Big whose value is the value of this Big rounded to a\r\n     * maximum of dp decimal places using rounding mode rm.\r\n     * If dp is not specified, round to 0 decimal places.\r\n     * If rm is not specified, use Big.RM.\r\n     *\r\n     * [dp] {number} Integer, 0 to MAX_DP inclusive.\r\n     * [rm] 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\r\n     */\r\n    P.round = function (dp, rm) {\r\n        var x = this,\r\n            Big = x.constructor;\r\n\r\n        if (dp == null) {\r\n            dp = 0;\r\n        } else if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n            throwErr('!round!');\r\n        }\r\n        rnd(x = new Big(x), dp, rm == null ? Big.RM : rm);\r\n\r\n        return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new Big whose value is the square root of the value of this Big,\r\n     * rounded, if necessary, to a maximum of Big.DP decimal places using\r\n     * rounding mode Big.RM.\r\n     */\r\n    P.sqrt = function () {\r\n        var estimate, r, approx,\r\n            x = this,\r\n            Big = x.constructor,\r\n            xc = x.c,\r\n            i = x.s,\r\n            e = x.e,\r\n            half = new Big('0.5');\r\n\r\n        // Zero?\r\n        if (!xc[0]) {\r\n            return new Big(x);\r\n        }\r\n\r\n        // If negative, throw NaN.\r\n        if (i < 0) {\r\n            throwErr(NaN);\r\n        }\r\n\r\n        // Estimate.\r\n        i = Math.sqrt(x.toString());\r\n\r\n        // Math.sqrt underflow/overflow?\r\n        // Pass x to Math.sqrt as integer, then adjust the result exponent.\r\n        if (i === 0 || i === 1 / 0) {\r\n            estimate = xc.join('');\r\n\r\n            if (!(estimate.length + e & 1)) {\r\n                estimate += '0';\r\n            }\r\n\r\n            r = new Big( Math.sqrt(estimate).toString() );\r\n            r.e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\r\n        } else {\r\n            r = new Big(i.toString());\r\n        }\r\n\r\n        i = r.e + (Big.DP += 4);\r\n\r\n        // Newton-Raphson iteration.\r\n        do {\r\n            approx = r;\r\n            r = half.times( approx.plus( x.div(approx) ) );\r\n        } while ( approx.c.slice(0, i).join('') !==\r\n                       r.c.slice(0, i).join('') );\r\n\r\n        rnd(r, Big.DP -= 4, Big.RM);\r\n\r\n        return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new Big whose value is the value of this Big times the value of\r\n     * Big y.\r\n     */\r\n    P.mul = P.times = function (y) {\r\n        var c,\r\n            x = this,\r\n            Big = x.constructor,\r\n            xc = x.c,\r\n            yc = (y = new Big(y)).c,\r\n            a = xc.length,\r\n            b = yc.length,\r\n            i = x.e,\r\n            j = y.e;\r\n\r\n        // Determine sign of result.\r\n        y.s = x.s == y.s ? 1 : -1;\r\n\r\n        // Return signed 0 if either 0.\r\n        if (!xc[0] || !yc[0]) {\r\n            return new Big(y.s * 0);\r\n        }\r\n\r\n        // Initialise exponent of result as x.e + y.e.\r\n        y.e = i + j;\r\n\r\n        // If array xc has fewer digits than yc, swap xc and yc, and lengths.\r\n        if (a < b) {\r\n            c = xc;\r\n            xc = yc;\r\n            yc = c;\r\n            j = a;\r\n            a = b;\r\n            b = j;\r\n        }\r\n\r\n        // Initialise coefficient array of result with zeros.\r\n        for (c = new Array(j = a + b); j--; c[j] = 0) {\r\n        }\r\n\r\n        // Multiply.\r\n\r\n        // i is initially xc.length.\r\n        for (i = b; i--;) {\r\n            b = 0;\r\n\r\n            // a is yc.length.\r\n            for (j = a + i; j > i;) {\r\n\r\n                // Current sum of products at this digit position, plus carry.\r\n                b = c[j] + yc[i] * xc[j - i - 1] + b;\r\n                c[j--] = b % 10;\r\n\r\n                // carry\r\n                b = b / 10 | 0;\r\n            }\r\n            c[j] = (c[j] + b) % 10;\r\n        }\r\n\r\n        // Increment result exponent if there is a final carry.\r\n        if (b) {\r\n            ++y.e;\r\n        }\r\n\r\n        // Remove any leading zero.\r\n        if (!c[0]) {\r\n            c.shift();\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = c.length; !c[--i]; c.pop()) {\r\n        }\r\n        y.c = c;\r\n\r\n        return y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this Big.\r\n     * Return exponential notation if this Big has a positive exponent equal to\r\n     * or greater than Big.E_POS, or a negative exponent equal to or less than\r\n     * Big.E_NEG.\r\n     */\r\n    P.toString = P.valueOf = P.toJSON = function () {\r\n        var x = this,\r\n            Big = x.constructor,\r\n            e = x.e,\r\n            str = x.c.join(''),\r\n            strL = str.length;\r\n\r\n        // Exponential notation?\r\n        if (e <= Big.E_NEG || e >= Big.E_POS) {\r\n            str = str.charAt(0) + (strL > 1 ? '.' + str.slice(1) : '') +\r\n              (e < 0 ? 'e' : 'e+') + e;\r\n\r\n        // Negative exponent?\r\n        } else if (e < 0) {\r\n\r\n            // Prepend zeros.\r\n            for (; ++e; str = '0' + str) {\r\n            }\r\n            str = '0.' + str;\r\n\r\n        // Positive exponent?\r\n        } else if (e > 0) {\r\n\r\n            if (++e > strL) {\r\n\r\n                // Append zeros.\r\n                for (e -= strL; e-- ; str += '0') {\r\n                }\r\n            } else if (e < strL) {\r\n                str = str.slice(0, e) + '.' + str.slice(e);\r\n            }\r\n\r\n        // Exponent zero.\r\n        } else if (strL > 1) {\r\n            str = str.charAt(0) + '.' + str.slice(1);\r\n        }\r\n\r\n        // Avoid '-0'\r\n        return x.s < 0 && x.c[0] ? '-' + str : str;\r\n    };\r\n\r\n\r\n    /*\r\n     ***************************************************************************\r\n     * If toExponential, toFixed, toPrecision and format are not required they\r\n     * can safely be commented-out or deleted. No redundant code will be left.\r\n     * format is used only by toExponential, toFixed and toPrecision.\r\n     ***************************************************************************\r\n     */\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this Big in exponential\r\n     * notation to dp fixed decimal places and rounded, if necessary, using\r\n     * Big.RM.\r\n     *\r\n     * [dp] {number} Integer, 0 to MAX_DP inclusive.\r\n     */\r\n    P.toExponential = function (dp) {\r\n\r\n        if (dp == null) {\r\n            dp = this.c.length - 1;\r\n        } else if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n            throwErr('!toExp!');\r\n        }\r\n\r\n        return format(this, dp, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this Big in normal notation\r\n     * to dp fixed decimal places and rounded, if necessary, using Big.RM.\r\n     *\r\n     * [dp] {number} Integer, 0 to MAX_DP inclusive.\r\n     */\r\n    P.toFixed = function (dp) {\r\n        var str,\r\n            x = this,\r\n            Big = x.constructor,\r\n            neg = Big.E_NEG,\r\n            pos = Big.E_POS;\r\n\r\n        // Prevent the possibility of exponential notation.\r\n        Big.E_NEG = -(Big.E_POS = 1 / 0);\r\n\r\n        if (dp == null) {\r\n            str = x.toString();\r\n        } else if (dp === ~~dp && dp >= 0 && dp <= MAX_DP) {\r\n            str = format(x, x.e + dp);\r\n\r\n            // (-0).toFixed() is '0', but (-0.1).toFixed() is '-0'.\r\n            // (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n            if (x.s < 0 && x.c[0] && str.indexOf('-') < 0) {\r\n        //E.g. -0.5 if rounded to -0 will cause toString to omit the minus sign.\r\n                str = '-' + str;\r\n            }\r\n        }\r\n        Big.E_NEG = neg;\r\n        Big.E_POS = pos;\r\n\r\n        if (!str) {\r\n            throwErr('!toFix!');\r\n        }\r\n\r\n        return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this Big rounded to sd\r\n     * significant digits using Big.RM. Use exponential notation if sd is less\r\n     * than the number of digits necessary to represent the integer part of the\r\n     * value in normal notation.\r\n     *\r\n     * sd {number} Integer, 1 to MAX_DP inclusive.\r\n     */\r\n    P.toPrecision = function (sd) {\r\n\r\n        if (sd == null) {\r\n            return this.toString();\r\n        } else if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\r\n            throwErr('!toPre!');\r\n        }\r\n\r\n        return format(this, sd - 1, 2);\r\n    };\r\n\r\n\r\n    // Export\r\n\r\n\r\n    Big = bigFactory();\r\n\r\n    //AMD.\r\n    if (typeof define === 'function' && define.amd) {\r\n        define(function () {\r\n            return Big;\r\n        });\r\n\r\n    // Node and other CommonJS-like environments that support module.exports.\r\n    } else if (typeof module !== 'undefined' && module.exports) {\r\n        module.exports = Big;\r\n\r\n    //Browser.\r\n    } else {\r\n        global.Big = Big;\r\n    }\r\n})(this);\r\n"]}