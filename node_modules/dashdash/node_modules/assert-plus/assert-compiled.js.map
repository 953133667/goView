{"version":3,"sources":["assert.js"],"names":[],"mappings":"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","file":"assert-compiled.js","sourcesContent":["// Copyright (c) 2012, Mark Cavage. All rights reserved.\n// Copyright 2015 Joyent, Inc.\n\nvar assert = require('assert');\nvar Stream = require('stream').Stream;\nvar util = require('util');\n\n\n///--- Globals\n\n/* JSSTYLED */\nvar UUID_REGEXP = /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/;\n\n\n///--- Internal\n\nfunction _capitalize(str) {\n    return (str.charAt(0).toUpperCase() + str.slice(1));\n}\n\nfunction _toss(name, expected, oper, arg, actual) {\n    throw new assert.AssertionError({\n        message: util.format('%s (%s) is required', name, expected),\n        actual: (actual === undefined) ? typeof (arg) : actual(arg),\n        expected: expected,\n        operator: oper || '===',\n        stackStartFunction: _toss.caller\n    });\n}\n\nfunction _getClass(arg) {\n    return (Object.prototype.toString.call(arg).slice(8, -1));\n}\n\nfunction noop() {\n    // Why even bother with asserts?\n}\n\n\n///--- Exports\n\nvar types = {\n    bool: {\n        check: function (arg) { return typeof (arg) === 'boolean'; }\n    },\n    func: {\n        check: function (arg) { return typeof (arg) === 'function'; }\n    },\n    string: {\n        check: function (arg) { return typeof (arg) === 'string'; }\n    },\n    object: {\n        check: function (arg) {\n            return typeof (arg) === 'object' && arg !== null;\n        }\n    },\n    number: {\n        check: function (arg) {\n            return typeof (arg) === 'number' && !isNaN(arg);\n        }\n    },\n    finite: {\n        check: function (arg) {\n            return typeof (arg) === 'number' && !isNaN(arg) && isFinite(arg);\n        }\n    },\n    buffer: {\n        check: function (arg) { return Buffer.isBuffer(arg); },\n        operator: 'Buffer.isBuffer'\n    },\n    array: {\n        check: function (arg) { return Array.isArray(arg); },\n        operator: 'Array.isArray'\n    },\n    stream: {\n        check: function (arg) { return arg instanceof Stream; },\n        operator: 'instanceof',\n        actual: _getClass\n    },\n    date: {\n        check: function (arg) { return arg instanceof Date; },\n        operator: 'instanceof',\n        actual: _getClass\n    },\n    regexp: {\n        check: function (arg) { return arg instanceof RegExp; },\n        operator: 'instanceof',\n        actual: _getClass\n    },\n    uuid: {\n        check: function (arg) {\n            return typeof (arg) === 'string' && UUID_REGEXP.test(arg);\n        },\n        operator: 'isUUID'\n    }\n};\n\nfunction _setExports(ndebug) {\n    var keys = Object.keys(types);\n    var out;\n\n    /* re-export standard assert */\n    if (process.env.NODE_NDEBUG) {\n        out = noop;\n    } else {\n        out = function (arg, msg) {\n            if (!arg) {\n                _toss(msg, 'true', arg);\n            }\n        };\n    }\n\n    /* standard checks */\n    keys.forEach(function (k) {\n        if (ndebug) {\n            out[k] = noop;\n            return;\n        }\n        var type = types[k];\n        out[k] = function (arg, msg) {\n            if (!type.check(arg)) {\n                _toss(msg, k, type.operator, arg, type.actual);\n            }\n        };\n    });\n\n    /* optional checks */\n    keys.forEach(function (k) {\n        var name = 'optional' + _capitalize(k);\n        if (ndebug) {\n            out[name] = noop;\n            return;\n        }\n        var type = types[k];\n        out[name] = function (arg, msg) {\n            if (arg === undefined || arg === null) {\n                return;\n            }\n            if (!type.check(arg)) {\n                _toss(msg, k, type.operator, arg, type.actual);\n            }\n        };\n    });\n\n    /* arrayOf checks */\n    keys.forEach(function (k) {\n        var name = 'arrayOf' + _capitalize(k);\n        if (ndebug) {\n            out[name] = noop;\n            return;\n        }\n        var type = types[k];\n        var expected = '[' + k + ']';\n        out[name] = function (arg, msg) {\n            if (!Array.isArray(arg)) {\n                _toss(msg, expected, type.operator, arg, type.actual);\n            }\n            var i;\n            for (i = 0; i < arg.length; i++) {\n                if (!type.check(arg[i])) {\n                    _toss(msg, expected, type.operator, arg, type.actual);\n                }\n            }\n        };\n    });\n\n    /* optionalArrayOf checks */\n    keys.forEach(function (k) {\n        var name = 'optionalArrayOf' + _capitalize(k);\n        if (ndebug) {\n            out[name] = noop;\n            return;\n        }\n        var type = types[k];\n        var expected = '[' + k + ']';\n        out[name] = function (arg, msg) {\n            if (arg === undefined || arg === null) {\n                return;\n            }\n            if (!Array.isArray(arg)) {\n                _toss(msg, expected, type.operator, arg, type.actual);\n            }\n            var i;\n            for (i = 0; i < arg.length; i++) {\n                if (!type.check(arg[i])) {\n                    _toss(msg, expected, type.operator, arg, type.actual);\n                }\n            }\n        };\n    });\n\n    /* re-export built-in assertions */\n    Object.keys(assert).forEach(function (k) {\n        if (k === 'AssertionError') {\n            out[k] = assert[k];\n            return;\n        }\n        if (ndebug) {\n            out[k] = noop;\n            return;\n        }\n        out[k] = assert[k];\n    });\n\n    /* export ourselves (for unit tests _only_) */\n    out._setExports = _setExports;\n\n    return out;\n}\n\nmodule.exports = _setExports(process.env.NODE_NDEBUG);\n"]}