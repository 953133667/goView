{"version":3,"sources":["test.js"],"names":[],"mappings":";;AAEA,IAAI,OAAQ,QAAQ,MAAR,CAAZ;AAAA,IACI,QAAQ,QAAQ,IAAR,CADZ;;AAGA,KAAK,eAAL,EAAsB,UAAU,CAAV,EAAa;AACjC,IAAE,EAAF,CAAK,MAAM,GAAX,EAAgB,qBAAhB;AACA,IAAE,EAAF,CAAK,MAAM,KAAX,EAAkB,uBAAlB;AACA,IAAE,EAAF,CAAK,MAAM,IAAX,EAAiB,sBAAjB;;AAEA,IAAE,KAAF,CAAQ,MAAM,GAAN,CAAU,MAAlB,EAA0B,EAA1B,EAA8B,WAAW,MAAM,GAAN,CAAU,MAArB,GAA8B,eAA5D;AACA,IAAE,KAAF,CAAQ,MAAM,KAAN,CAAY,IAAZ,CAAR,EAA2B,MAAM,GAAN,CAAU,CAAV,CAA3B,EAAyC,4BAAzC;;AAEA,IAAE,KAAF,CAAQ,MAAM,IAAN,CAAW,SAAX,CAAR,EAA+B,MAAM,GAAN,CAAU,CAAV,CAA/B,EAA6C,gCAA7C;;AAEA,IAAE,KAAF,CAAQ,MAAM,KAAN,CAAY,CAAZ,CAAR,EAAwB,MAAM,GAAN,CAAU,CAAV,CAAxB,EAAsC,2BAAtC;;AAEA,IAAE,KAAF,CAAQ,MAAM,IAAN,CAAW,KAAX,CAAR,EAA2B,MAAM,GAAN,CAAU,CAAV,CAA3B,EAAyC,4BAAzC;AACA,IAAE,GAAF;AACD,CAdD;;AAgBA,KAAK,eAAL,EAAsB,UAAU,CAAV,EAAa;AACjC,MAAI,OAAO,MAAM,MAAN,CAAa,gBAAb,CAAX;AACA,MAAI,OAAO,IAAI,IAAJ,CAAS,gBAAT,CAAX;;AAEA,IAAE,KAAF,CAAQ,KAAK,IAAb,EAAmB,gBAAnB,EAAqC,qBAArC;AACA,IAAE,KAAF,CAAQ,KAAK,IAAb,EAAmB,gBAAnB,EAAqC,qBAArC;AACA,IAAE,KAAF,CAAQ,KAAK,OAAb,EAAsB,gBAAtB,EAAwC,wBAAxC;AACA,IAAE,KAAF,CAAQ,KAAK,KAAb,EAAoB,UAApB;AACA,IAAE,GAAF;AACD,CATD","file":"test-compiled.js","sourcesContent":["#!/usr/bin/env node\n\nvar test  = require('tape')\n  , errno = require('./')\n\ntest('sanity checks', function (t) {\n  t.ok(errno.all, 'errno.all not found')\n  t.ok(errno.errno, 'errno.errno not found')\n  t.ok(errno.code, 'errno.code not found')\n\n  t.equal(errno.all.length, 59, 'found ' + errno.all.length + ', expected 59')\n  t.equal(errno.errno['-1'], errno.all[0], 'errno -1 not first element')\n\n  t.equal(errno.code['UNKNOWN'], errno.all[0], 'code UNKNOWN not first element')\n\n  t.equal(errno.errno[1], errno.all[2], 'errno 1 not third element')\n\n  t.equal(errno.code['EOF'], errno.all[2], 'code EOF not third element')\n  t.end()\n})\n\ntest('custom errors', function (t) {\n  var Cust = errno.create('FooNotBarError')\n  var cust = new Cust('foo is not bar')\n\n  t.equal(cust.name, 'FooNotBarError', 'correct custom name')\n  t.equal(cust.type, 'FooNotBarError', 'correct custom type')\n  t.equal(cust.message, 'foo is not bar', 'correct custom message')\n  t.notOk(cust.cause, 'no cause')\n  t.end()\n})\n"]}