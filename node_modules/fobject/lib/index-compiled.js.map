{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["// Generated by CoffeeScript 1.10.0\nvar File, fs, nodefn, path, semver,\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\nfs = require('graceful-fs');\n\npath = require('path');\n\nnodefn = require('when/node');\n\nsemver = require('semver');\n\nFile = (function() {\n\n  /**\n   * @class\n   * @name File\n   * @param {String} path The path to the file. This will be resolved to an\n     absolute path, so even if you change your cwd you can still access the same\n     file.\n   * @param {String} [options.base=./] Used for relative pathing. This will not\n     be resolved to an absolute path. Typically where a glob starts.\n   */\n  function File(path1, options) {\n    var ref;\n    this.path = path1;\n    if (options == null) {\n      options = {};\n    }\n    this._processOptionsObject = bind(this._processOptionsObject, this);\n    this.dirname = bind(this.dirname, this);\n    this.extname = bind(this.extname, this);\n    this.stat = bind(this.stat, this);\n    this.unlink = bind(this.unlink, this);\n    this.rename = bind(this.rename, this);\n    this.append = bind(this.append, this);\n    this.write = bind(this.write, this);\n    this.read = bind(this.read, this);\n    this._resolvePaths = bind(this._resolvePaths, this);\n    this.base = (ref = options.base) != null ? ref : './';\n    this._resolvePaths();\n  }\n\n\n  /**\n   * Normalize & resolve paths. Call if the File.path changes\n   * @function\n   * @name _resolvePaths\n   * @private\n   */\n\n  File.prototype._resolvePaths = function() {\n    this.path = path.resolve(this.base, this.path);\n    return this.relative = path.relative(this.base, this.path);\n  };\n\n\n  /**\n   * Read from the file\n   * @function\n   * @name read\n   * @param {String|null} [options.encoding=null]\n   * @param {String} [options.flag='r']\n   * @return {Promise}\n   */\n\n  File.prototype.read = function(options) {\n    if (options == null) {\n      options = {};\n    }\n    return nodefn.call(fs.readFile, this.path, this._processOptionsObject(options));\n  };\n\n\n  /**\n   * Write `data` to the file\n   * @function\n   * @name write\n   * @param {String|Buffer} data\n   * @param {String|null} [options.encoding='utf8'] ignored if data is a\n     buffer\n   * @param {Number} [options.mode=438] default is 0666 in Octal\n   * @param {String} [options.flag='w']\n   * @return {Promise}\n   */\n\n  File.prototype.write = function(data, options) {\n    if (options == null) {\n      options = {};\n    }\n    return nodefn.call(fs.writeFile, this.path, data, this._processOptionsObject(options));\n  };\n\n\n  /**\n   * Append `data` to the file\n   * @function\n   * @name append\n   * @param {String|Buffer} data\n   * @param {String|null} [options.encoding='utf8'] ignored if data is a\n     buffer\n   * @param {Number} [options.mode=438] default is 0666 in Octal\n   * @param {String} [options.flag='w']\n   * @return {Promise}\n   */\n\n  File.prototype.append = function(data, options) {\n    if (options == null) {\n      options = {};\n    }\n    return nodefn.call(fs.appendFile, this.path, data, this._processOptionsObject(options));\n  };\n\n\n  /**\n   * Rename the file\n   * @function\n   * @name rename\n   * @param {String} newPath The new path for the file. Will be resolved\n     relative to File.base.\n   * @return {Promise}\n   */\n\n  File.prototype.rename = function(newPath) {\n    newPath = path.resolve(this.base, newPath);\n    return nodefn.call(fs.rename, this.path, newPath).then((function(_this) {\n      return function() {\n        _this.path = newPath;\n        return _this._resolvePaths();\n      };\n    })(this));\n  };\n\n\n  /**\n   * Delete the file\n   * @function\n   * @name unlink\n   * @return {Promise}\n   */\n\n  File.prototype.unlink = function() {\n    return nodefn.call(fs.unlink, this.path);\n  };\n\n\n  /**\n   * Return a Stat object for the file\n   * @function\n   * @name stat\n   * @return {Promise}\n   */\n\n  File.prototype.stat = function() {\n    return nodefn.call(fs.stat, this.path);\n  };\n\n\n  /**\n   * Get the extension of a file\n   * @function\n   * @name extname\n   * @return {String}\n   */\n\n  File.prototype.extname = function() {\n    return path.extname(this.path);\n  };\n\n\n  /**\n   * Get the dirname of the file\n   * @function\n   * @name dirname\n   * @return {String}\n   */\n\n  File.prototype.dirname = function() {\n    return path.dirname(this.path);\n  };\n\n\n  /**\n   * Determine if we're using the new version of the FS API that supports an\n     options object.\n   * @return {Boolean} True if the version is >= 0.10.0 (when the options object\n     was introduced).\n   */\n\n  File.prototype._isOptionsObjectSupported = function() {\n    return semver.gte(process.version, '0.10.0');\n  };\n\n\n  /**\n   * The pre-v0.10.0 fs functions took a encoding parameter and no options\n     object. This function deals with that difference.\n   * @param {[type]} options [description]\n   */\n\n  File.prototype._processOptionsObject = function(options) {\n    var length, optionNames;\n    if (this._isOptionsObjectSupported()) {\n      return options;\n    } else {\n      optionNames = Object.keys(options);\n      length = optionNames.length;\n      if (length === 0 || (length === 1 && optionNames[0] === 'encoding')) {\n        return options.encoding;\n      } else {\n        throw new Error(\"Node version <= 0.10.0 only supports an encoding option. Called with \" + (optionNames.join()));\n      }\n    }\n  };\n\n  return File;\n\n})();\n\nmodule.exports = File;\n"]}