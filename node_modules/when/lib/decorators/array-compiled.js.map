{"version":3,"sources":["array.js"],"names":[],"mappings":"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","file":"array-compiled.js","sourcesContent":["/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function(require) {\n\n\tvar state = require('../state');\n\tvar applier = require('../apply');\n\n\treturn function array(Promise) {\n\n\t\tvar applyFold = applier(Promise);\n\t\tvar toPromise = Promise.resolve;\n\t\tvar all = Promise.all;\n\n\t\tvar ar = Array.prototype.reduce;\n\t\tvar arr = Array.prototype.reduceRight;\n\t\tvar slice = Array.prototype.slice;\n\n\t\t// Additional array combinators\n\n\t\tPromise.any = any;\n\t\tPromise.some = some;\n\t\tPromise.settle = settle;\n\n\t\tPromise.map = map;\n\t\tPromise.filter = filter;\n\t\tPromise.reduce = reduce;\n\t\tPromise.reduceRight = reduceRight;\n\n\t\t/**\n\t\t * When this promise fulfills with an array, do\n\t\t * onFulfilled.apply(void 0, array)\n\t\t * @param {function} onFulfilled function to apply\n\t\t * @returns {Promise} promise for the result of applying onFulfilled\n\t\t */\n\t\tPromise.prototype.spread = function(onFulfilled) {\n\t\t\treturn this.then(all).then(function(array) {\n\t\t\t\treturn onFulfilled.apply(this, array);\n\t\t\t});\n\t\t};\n\n\t\treturn Promise;\n\n\t\t/**\n\t\t * One-winner competitive race.\n\t\t * Return a promise that will fulfill when one of the promises\n\t\t * in the input array fulfills, or will reject when all promises\n\t\t * have rejected.\n\t\t * @param {array} promises\n\t\t * @returns {Promise} promise for the first fulfilled value\n\t\t */\n\t\tfunction any(promises) {\n\t\t\tvar p = Promise._defer();\n\t\t\tvar resolver = p._handler;\n\t\t\tvar l = promises.length>>>0;\n\n\t\t\tvar pending = l;\n\t\t\tvar errors = [];\n\n\t\t\tfor (var h, x, i = 0; i < l; ++i) {\n\t\t\t\tx = promises[i];\n\t\t\t\tif(x === void 0 && !(i in promises)) {\n\t\t\t\t\t--pending;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\th = Promise._handler(x);\n\t\t\t\tif(h.state() > 0) {\n\t\t\t\t\tresolver.become(h);\n\t\t\t\t\tPromise._visitRemaining(promises, i, h);\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\th.visit(resolver, handleFulfill, handleReject);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(pending === 0) {\n\t\t\t\tresolver.reject(new RangeError('any(): array must not be empty'));\n\t\t\t}\n\n\t\t\treturn p;\n\n\t\t\tfunction handleFulfill(x) {\n\t\t\t\t/*jshint validthis:true*/\n\t\t\t\terrors = null;\n\t\t\t\tthis.resolve(x); // this === resolver\n\t\t\t}\n\n\t\t\tfunction handleReject(e) {\n\t\t\t\t/*jshint validthis:true*/\n\t\t\t\tif(this.resolved) { // this === resolver\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\terrors.push(e);\n\t\t\t\tif(--pending === 0) {\n\t\t\t\t\tthis.reject(errors);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * N-winner competitive race\n\t\t * Return a promise that will fulfill when n input promises have\n\t\t * fulfilled, or will reject when it becomes impossible for n\n\t\t * input promises to fulfill (ie when promises.length - n + 1\n\t\t * have rejected)\n\t\t * @param {array} promises\n\t\t * @param {number} n\n\t\t * @returns {Promise} promise for the earliest n fulfillment values\n\t\t *\n\t\t * @deprecated\n\t\t */\n\t\tfunction some(promises, n) {\n\t\t\t/*jshint maxcomplexity:7*/\n\t\t\tvar p = Promise._defer();\n\t\t\tvar resolver = p._handler;\n\n\t\t\tvar results = [];\n\t\t\tvar errors = [];\n\n\t\t\tvar l = promises.length>>>0;\n\t\t\tvar nFulfill = 0;\n\t\t\tvar nReject;\n\t\t\tvar x, i; // reused in both for() loops\n\n\t\t\t// First pass: count actual array items\n\t\t\tfor(i=0; i<l; ++i) {\n\t\t\t\tx = promises[i];\n\t\t\t\tif(x === void 0 && !(i in promises)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t++nFulfill;\n\t\t\t}\n\n\t\t\t// Compute actual goals\n\t\t\tn = Math.max(n, 0);\n\t\t\tnReject = (nFulfill - n + 1);\n\t\t\tnFulfill = Math.min(n, nFulfill);\n\n\t\t\tif(n > nFulfill) {\n\t\t\t\tresolver.reject(new RangeError('some(): array must contain at least '\n\t\t\t\t+ n + ' item(s), but had ' + nFulfill));\n\t\t\t} else if(nFulfill === 0) {\n\t\t\t\tresolver.resolve(results);\n\t\t\t}\n\n\t\t\t// Second pass: observe each array item, make progress toward goals\n\t\t\tfor(i=0; i<l; ++i) {\n\t\t\t\tx = promises[i];\n\t\t\t\tif(x === void 0 && !(i in promises)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tPromise._handler(x).visit(resolver, fulfill, reject, resolver.notify);\n\t\t\t}\n\n\t\t\treturn p;\n\n\t\t\tfunction fulfill(x) {\n\t\t\t\t/*jshint validthis:true*/\n\t\t\t\tif(this.resolved) { // this === resolver\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresults.push(x);\n\t\t\t\tif(--nFulfill === 0) {\n\t\t\t\t\terrors = null;\n\t\t\t\t\tthis.resolve(results);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction reject(e) {\n\t\t\t\t/*jshint validthis:true*/\n\t\t\t\tif(this.resolved) { // this === resolver\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\terrors.push(e);\n\t\t\t\tif(--nReject === 0) {\n\t\t\t\t\tresults = null;\n\t\t\t\t\tthis.reject(errors);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Apply f to the value of each promise in a list of promises\n\t\t * and return a new list containing the results.\n\t\t * @param {array} promises\n\t\t * @param {function(x:*, index:Number):*} f mapping function\n\t\t * @returns {Promise}\n\t\t */\n\t\tfunction map(promises, f) {\n\t\t\treturn Promise._traverse(f, promises);\n\t\t}\n\n\t\t/**\n\t\t * Filter the provided array of promises using the provided predicate.  Input may\n\t\t * contain promises and values\n\t\t * @param {Array} promises array of promises and values\n\t\t * @param {function(x:*, index:Number):boolean} predicate filtering predicate.\n\t\t *  Must return truthy (or promise for truthy) for items to retain.\n\t\t * @returns {Promise} promise that will fulfill with an array containing all items\n\t\t *  for which predicate returned truthy.\n\t\t */\n\t\tfunction filter(promises, predicate) {\n\t\t\tvar a = slice.call(promises);\n\t\t\treturn Promise._traverse(predicate, a).then(function(keep) {\n\t\t\t\treturn filterSync(a, keep);\n\t\t\t});\n\t\t}\n\n\t\tfunction filterSync(promises, keep) {\n\t\t\t// Safe because we know all promises have fulfilled if we've made it this far\n\t\t\tvar l = keep.length;\n\t\t\tvar filtered = new Array(l);\n\t\t\tfor(var i=0, j=0; i<l; ++i) {\n\t\t\t\tif(keep[i]) {\n\t\t\t\t\tfiltered[j++] = Promise._handler(promises[i]).value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfiltered.length = j;\n\t\t\treturn filtered;\n\n\t\t}\n\n\t\t/**\n\t\t * Return a promise that will always fulfill with an array containing\n\t\t * the outcome states of all input promises.  The returned promise\n\t\t * will never reject.\n\t\t * @param {Array} promises\n\t\t * @returns {Promise} promise for array of settled state descriptors\n\t\t */\n\t\tfunction settle(promises) {\n\t\t\treturn all(promises.map(settleOne));\n\t\t}\n\n\t\tfunction settleOne(p) {\n\t\t\tvar h = Promise._handler(p);\n\t\t\tif(h.state() === 0) {\n\t\t\t\treturn toPromise(p).then(state.fulfilled, state.rejected);\n\t\t\t}\n\n\t\t\th._unreport();\n\t\t\treturn state.inspect(h);\n\t\t}\n\n\t\t/**\n\t\t * Traditional reduce function, similar to `Array.prototype.reduce()`, but\n\t\t * input may contain promises and/or values, and reduceFunc\n\t\t * may return either a value or a promise, *and* initialValue may\n\t\t * be a promise for the starting value.\n\t\t * @param {Array|Promise} promises array or promise for an array of anything,\n\t\t *      may contain a mix of promises and values.\n\t\t * @param {function(accumulated:*, x:*, index:Number):*} f reduce function\n\t\t * @returns {Promise} that will resolve to the final reduced value\n\t\t */\n\t\tfunction reduce(promises, f /*, initialValue */) {\n\t\t\treturn arguments.length > 2 ? ar.call(promises, liftCombine(f), arguments[2])\n\t\t\t\t\t: ar.call(promises, liftCombine(f));\n\t\t}\n\n\t\t/**\n\t\t * Traditional reduce function, similar to `Array.prototype.reduceRight()`, but\n\t\t * input may contain promises and/or values, and reduceFunc\n\t\t * may return either a value or a promise, *and* initialValue may\n\t\t * be a promise for the starting value.\n\t\t * @param {Array|Promise} promises array or promise for an array of anything,\n\t\t *      may contain a mix of promises and values.\n\t\t * @param {function(accumulated:*, x:*, index:Number):*} f reduce function\n\t\t * @returns {Promise} that will resolve to the final reduced value\n\t\t */\n\t\tfunction reduceRight(promises, f /*, initialValue */) {\n\t\t\treturn arguments.length > 2 ? arr.call(promises, liftCombine(f), arguments[2])\n\t\t\t\t\t: arr.call(promises, liftCombine(f));\n\t\t}\n\n\t\tfunction liftCombine(f) {\n\t\t\treturn function(z, x, i) {\n\t\t\t\treturn applyFold(f, void 0, [z,x,i]);\n\t\t\t};\n\t\t}\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));\n"]}