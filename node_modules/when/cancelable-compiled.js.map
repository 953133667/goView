{"version":3,"sources":["cancelable.js"],"names":[],"mappings":"AAAA;;AAEA;;;;;;;;;;;;;;;;AAgBA,CAAC,UAAS,MAAT,EAAiB;AAClB,SAAO,YAAW;;AAEd;;;;;;;;;;;;;AAaA,WAAO,UAAS,QAAT,EAAmB,QAAnB,EAA6B;AAChC;AACA;AACA,eAAS,MAAT,GAAkB,YAAW;AAClC,YAAI;AACH,mBAAS,MAAT,CAAgB,SAAS,QAAT,CAAhB;AACA,SAFD,CAEE,OAAM,CAAN,EAAS;AACV,mBAAS,MAAT,CAAgB,CAAhB;AACA;;AAED,eAAO,SAAS,OAAhB;AACM,OARD;;AAUA,aAAO,QAAP;AACH,KAdD;AAgBH,GA/BD;AAgCC,CAjCD,EAiCG,OAAO,MAAP,KAAkB,UAAlB,IAAgC,OAAO,GAAvC,GAA6C,MAA7C,GAAsD,UAAU,OAAV,EAAmB;AAAE,SAAO,OAAP,GAAiB,SAAjB;AAA6B,CAjC3G","file":"cancelable-compiled.js","sourcesContent":["/** @license MIT License (c) copyright B Cavalier & J Hann */\n\n/**\n * cancelable.js\n * @deprecated\n *\n * Decorator that makes a deferred \"cancelable\".  It adds a cancel() method that\n * will call a special cancel handler function and then reject the deferred.  The\n * cancel handler can be used to do resource cleanup, or anything else that should\n * be done before any other rejection handlers are executed.\n *\n * Usage:\n *\n * var cancelableDeferred = cancelable(when.defer(), myCancelHandler);\n *\n * @author brian@hovercraftstudios.com\n */\n\n(function(define) {\ndefine(function() {\n\n    /**\n     * Makes deferred cancelable, adding a cancel() method.\n\t * @deprecated\n     *\n     * @param deferred {Deferred} the {@link Deferred} to make cancelable\n     * @param canceler {Function} cancel handler function to execute when this deferred\n\t * is canceled.  This is guaranteed to run before all other rejection handlers.\n\t * The canceler will NOT be executed if the deferred is rejected in the standard\n\t * way, i.e. deferred.reject().  It ONLY executes if the deferred is canceled,\n\t * i.e. deferred.cancel()\n     *\n     * @returns deferred, with an added cancel() method.\n     */\n    return function(deferred, canceler) {\n        // Add a cancel method to the deferred to reject the delegate\n        // with the special canceled indicator.\n        deferred.cancel = function() {\n\t\t\ttry {\n\t\t\t\tdeferred.reject(canceler(deferred));\n\t\t\t} catch(e) {\n\t\t\t\tdeferred.reject(e);\n\t\t\t}\n\n\t\t\treturn deferred.promise;\n        };\n\n        return deferred;\n    };\n\n});\n})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(); });\n\n\n"]}