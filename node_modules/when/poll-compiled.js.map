{"version":3,"sources":["poll.js"],"names":[],"mappings":"AAAA;;AAEA;;;;;;;;AAQA,CAAC,UAAU,MAAV,EAAkB;AAAE;;AACrB,QAAO,UAAS,OAAT,EAAkB;;AAExB,MAAI,OAAO,QAAQ,QAAR,CAAX;AACA,MAAI,UAAU,KAAK,KAAL,CAAd;AACA,MAAI,aAAa,QAAQ,cAAR,CAAjB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA,SAAO,SAAS,IAAT,CAAc,IAAd,EAAoB,QAApB,EAA8B,QAA9B,EAAwC,gBAAxC,EAA0D;AAChE,OAAI,QAAJ,EAAc,QAAd,EAAwB,MAAxB;;AAEA,cAAW,KAAX;AACA,cAAW,WAAW,KAAK,KAAL,EAAX,EAAyB,YAAY;AAAE,eAAW,IAAX;AAAkB,IAAzD,CAAX;AACA,YAAS,SAAS,MAAlB;;AAEA,cAAW,YAAY,YAAY;AAAE,WAAO,KAAP;AAAe,IAApD;;AAEA,OAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;AACnC,eAAY,UAAU,QAAV,EAAoB;AAC/B,YAAO,YAAY;AAAE,aAAO,OAAO,KAAP,CAAa,QAAb,CAAP;AAAgC,MAArD;AACA,KAFU,CAER,QAFQ,CAAX;AAGA;;AAED,YAAS,OAAT,CAAiB,MAAjB,EAAyB;AACxB,aAAS,OAAT,CAAiB,MAAjB;AACA;;AAED,YAAS,QAAT,CAAkB,MAAlB,EAA0B;AACzB,YAAQ,QAAR,EAAkB,IAAlB,CAAuB,IAAvB,EAA6B,MAA7B;AACA,QAAI,WAAW,KAAK,CAApB,EAAuB;AACtB,cAAS,MAAT,CAAgB,MAAhB;AACA;AACD;;AAED,YAAS,IAAT,GAAgB;AACf,QAAI,QAAJ,EAAc;AAAE;AAAS;AACzB,SAAK,MAAL,EACC,UAAU,MAAV,EAAkB;AACjB,UAAK,SAAS,MAAT,CAAL,EACC,UAAU,YAAV,EAAwB;AACvB,aAAO,eAAe,QAAQ,MAAR,CAAf,GAAiC,SAAS,MAAT,CAAxC;AACA,MAHF,EAIC,YAAY;AAAE,eAAS,MAAT;AAAmB,MAJlC;AAMA,KARF,EASC,MATD;AAWA;;AAED,OAAI,gBAAJ,EAAsB;AACrB;AACA,IAFD,MAEO;AACN;AACA;AACA;;AAED;AACA,YAAS,OAAT,GAAmB,OAAO,MAAP,CAAc,SAAS,OAAvB,CAAnB;AACA,YAAS,OAAT,CAAiB,MAAjB,GAA0B,SAAS,MAAnC;;AAEA,UAAO,SAAS,OAAhB;AACA,GArDD;AAuDA,EArGD;AAsGC,CAvGD,EAuGG,OAAO,MAAP,KAAkB,UAAlB,IAAgC,OAAO,GAAvC,GAA6C,MAA7C,GAAsD,UAAU,OAAV,EAAmB;AAAE,QAAO,OAAP,GAAiB,QAAQ,OAAR,CAAjB;AAAoC,CAvGlH","file":"poll-compiled.js","sourcesContent":["/** @license MIT License (c) copyright 2012-2013 original author or authors */\n\n/**\n * poll.js\n *\n * Helper that polls until cancelled or for a condition to become true.\n *\n * @author Scott Andrews\n */\n\n(function (define) { 'use strict';\ndefine(function(require) {\n\n\tvar when = require('./when');\n\tvar attempt = when['try'];\n\tvar cancelable = require('./cancelable');\n\n\t/**\n\t * Periodically execute the task function on the msec delay. The result of\n\t * the task may be verified by watching for a condition to become true. The\n\t * returned deferred is cancellable if the polling needs to be cancelled\n\t * externally before reaching a resolved state.\n\t *\n\t * The next vote is scheduled after the results of the current vote are\n\t * verified and rejected.\n\t *\n\t * Polling may be terminated by the verifier returning a truthy value,\n\t * invoking cancel() on the returned promise, or the task function returning\n\t * a rejected promise.\n\t *\n\t * Usage:\n\t *\n\t * var count = 0;\n\t * function doSomething() { return count++ }\n\t *\n\t * // poll until cancelled\n\t * var p = poll(doSomething, 1000);\n\t * ...\n\t * p.cancel();\n\t *\n\t * // poll until condition is met\n\t * poll(doSomething, 1000, function(result) { return result > 10 })\n\t *     .then(function(result) { assert result == 10 });\n\t *\n\t * // delay first vote\n\t * poll(doSomething, 1000, anyFunc, true);\n\t *\n\t * @param task {Function} function that is executed after every timeout\n\t * @param interval {number|Function} timeout in milliseconds\n\t * @param [verifier] {Function} function to evaluate the result of the vote.\n\t *     May return a {Promise} or a {Boolean}. Rejecting the promise or a\n\t *     falsey value will schedule the next vote.\n\t * @param [delayInitialTask] {boolean} if truthy, the first vote is scheduled\n\t *     instead of immediate\n\t *\n\t * @returns {Promise}\n\t */\n\treturn function poll(task, interval, verifier, delayInitialTask) {\n\t\tvar deferred, canceled, reject;\n\n\t\tcanceled = false;\n\t\tdeferred = cancelable(when.defer(), function () { canceled = true; });\n\t\treject = deferred.reject;\n\n\t\tverifier = verifier || function () { return false; };\n\n\t\tif (typeof interval !== 'function') {\n\t\t\tinterval = (function (interval) {\n\t\t\t\treturn function () { return when().delay(interval); };\n\t\t\t})(interval);\n\t\t}\n\n\t\tfunction certify(result) {\n\t\t\tdeferred.resolve(result);\n\t\t}\n\n\t\tfunction schedule(result) {\n\t\t\tattempt(interval).then(vote, reject);\n\t\t\tif (result !== void 0) {\n\t\t\t\tdeferred.notify(result);\n\t\t\t}\n\t\t}\n\n\t\tfunction vote() {\n\t\t\tif (canceled) { return; }\n\t\t\twhen(task(),\n\t\t\t\tfunction (result) {\n\t\t\t\t\twhen(verifier(result),\n\t\t\t\t\t\tfunction (verification) {\n\t\t\t\t\t\t\treturn verification ? certify(result) : schedule(result);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfunction () { schedule(result); }\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\treject\n\t\t\t);\n\t\t}\n\n\t\tif (delayInitialTask) {\n\t\t\tschedule();\n\t\t} else {\n\t\t\t// if task() is blocking, vote will also block\n\t\t\tvote();\n\t\t}\n\n\t\t// make the promise cancelable\n\t\tdeferred.promise = Object.create(deferred.promise);\n\t\tdeferred.promise.cancel = deferred.cancel;\n\n\t\treturn deferred.promise;\n\t};\n\n});\n})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });\n"]}