{"version":3,"sources":["list.js"],"names":[],"mappings":"AAAA;;AAEA,CAAC,UAAS,MAAT,EAAiB;AAClB,QAAO,UAAS,OAAT,EAAkB;;AAExB,MAAI,SAAS,QAAQ,SAAR,EAAmB,MAAhC;;AAEA;;;;;;;;;;;AAWA,SAAO,SAAS,IAAT,CAAc,SAAd,EAAyB,SAAzB,EAAoC,IAApC,EAA0C;AAChD,OAAI,SAAS,EAAb;;AAEA,UAAO,OAAO,SAAP,EAAkB,SAAlB,EAA6B,MAA7B,EAAqC,IAArC,EAA2C,OAA3C,EAAoD,MAApD,CAAP;;AAEA,YAAS,MAAT,CAAgB,KAAhB,EAAuB,OAAvB,EAAgC;AAC/B,WAAO,IAAP,CAAY,KAAZ;AACA,WAAO,OAAP;AACA;AACD,GATD;AAWA,EA1BD;AA2BC,CA5BD,EA4BG,OAAO,MAAP,KAAkB,UAAlB,IAAgC,OAAO,GAAvC,GAA6C,MAA7C,GAAsD,UAAU,OAAV,EAAmB;AAAE,QAAO,OAAP,GAAiB,QAAQ,OAAR,CAAjB;AAAoC,CA5BlH","file":"list-compiled.js","sourcesContent":["/** @license MIT License (c) copyright B Cavalier & J Hann */\n\n(function(define) {\ndefine(function(require) {\n\n\tvar unfold = require('../when').unfold;\n\n\t/**\n\t * @deprecated\n\t * Given a seed and generator, produces an Array.  Effectively the\n\t * dual (opposite) of when.reduce()\n\t * @param {function} generator function that generates a value (or promise\n\t *  for a value) to be placed in the resulting array\n\t * @param {function} condition given a seed, must return truthy if the unfold\n\t *  should continue, or falsey if it should terminate\n\t * @param {*|Promise} seed any value or promise\n\t * @return {Promise} resulting array\n\t */\n\treturn function list(generator, condition, seed) {\n\t\tvar result = [];\n\n\t\treturn unfold(generator, condition, append, seed)['yield'](result);\n\n\t\tfunction append(value, newSeed) {\n\t\t\tresult.push(value);\n\t\t\treturn newSeed;\n\t\t}\n\t};\n\n});\n})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });\n\n"]}