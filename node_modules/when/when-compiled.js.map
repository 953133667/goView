{"version":3,"sources":["when.js"],"names":[],"mappings":"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","file":"when-compiled.js","sourcesContent":["/** @license MIT License (c) copyright 2010-2014 original author or authors */\n\n/**\n * Promises/A+ and when() implementation\n * when is part of the cujoJS family of libraries (http://cujojs.com/)\n * @author Brian Cavalier\n * @author John Hann\n */\n(function(define) { 'use strict';\ndefine(function (require) {\n\n\tvar timed = require('./lib/decorators/timed');\n\tvar array = require('./lib/decorators/array');\n\tvar flow = require('./lib/decorators/flow');\n\tvar fold = require('./lib/decorators/fold');\n\tvar inspect = require('./lib/decorators/inspect');\n\tvar generate = require('./lib/decorators/iterate');\n\tvar progress = require('./lib/decorators/progress');\n\tvar withThis = require('./lib/decorators/with');\n\tvar unhandledRejection = require('./lib/decorators/unhandledRejection');\n\tvar TimeoutError = require('./lib/TimeoutError');\n\n\tvar Promise = [array, flow, fold, generate, progress,\n\t\tinspect, withThis, timed, unhandledRejection]\n\t\t.reduce(function(Promise, feature) {\n\t\t\treturn feature(Promise);\n\t\t}, require('./lib/Promise'));\n\n\tvar apply = require('./lib/apply')(Promise);\n\n\t// Public API\n\n\twhen.promise     = promise;              // Create a pending promise\n\twhen.resolve     = Promise.resolve;      // Create a resolved promise\n\twhen.reject      = Promise.reject;       // Create a rejected promise\n\n\twhen.lift        = lift;                 // lift a function to return promises\n\twhen['try']      = attempt;              // call a function and return a promise\n\twhen.attempt     = attempt;              // alias for when.try\n\n\twhen.iterate     = Promise.iterate;      // DEPRECATED (use cujojs/most streams) Generate a stream of promises\n\twhen.unfold      = Promise.unfold;       // DEPRECATED (use cujojs/most streams) Generate a stream of promises\n\n\twhen.join        = join;                 // Join 2 or more promises\n\n\twhen.all         = all;                  // Resolve a list of promises\n\twhen.settle      = settle;               // Settle a list of promises\n\n\twhen.any         = lift(Promise.any);    // One-winner race\n\twhen.some        = lift(Promise.some);   // Multi-winner race\n\twhen.race        = lift(Promise.race);   // First-to-settle race\n\n\twhen.map         = map;                  // Array.map() for promises\n\twhen.filter      = filter;               // Array.filter() for promises\n\twhen.reduce      = lift(Promise.reduce);       // Array.reduce() for promises\n\twhen.reduceRight = lift(Promise.reduceRight);  // Array.reduceRight() for promises\n\n\twhen.isPromiseLike = isPromiseLike;      // Is something promise-like, aka thenable\n\n\twhen.Promise     = Promise;              // Promise constructor\n\twhen.defer       = defer;                // Create a {promise, resolve, reject} tuple\n\n\t// Error types\n\n\twhen.TimeoutError = TimeoutError;\n\n\t/**\n\t * Get a trusted promise for x, or by transforming x with onFulfilled\n\t *\n\t * @param {*} x\n\t * @param {function?} onFulfilled callback to be called when x is\n\t *   successfully fulfilled.  If promiseOrValue is an immediate value, callback\n\t *   will be invoked immediately.\n\t * @param {function?} onRejected callback to be called when x is\n\t *   rejected.\n\t * @param {function?} onProgress callback to be called when progress updates\n\t *   are issued for x. @deprecated\n\t * @returns {Promise} a new promise that will fulfill with the return\n\t *   value of callback or errback or the completion value of promiseOrValue if\n\t *   callback and/or errback is not supplied.\n\t */\n\tfunction when(x, onFulfilled, onRejected, onProgress) {\n\t\tvar p = Promise.resolve(x);\n\t\tif (arguments.length < 2) {\n\t\t\treturn p;\n\t\t}\n\n\t\treturn p.then(onFulfilled, onRejected, onProgress);\n\t}\n\n\t/**\n\t * Creates a new promise whose fate is determined by resolver.\n\t * @param {function} resolver function(resolve, reject, notify)\n\t * @returns {Promise} promise whose fate is determine by resolver\n\t */\n\tfunction promise(resolver) {\n\t\treturn new Promise(resolver);\n\t}\n\n\t/**\n\t * Lift the supplied function, creating a version of f that returns\n\t * promises, and accepts promises as arguments.\n\t * @param {function} f\n\t * @returns {Function} version of f that returns promises\n\t */\n\tfunction lift(f) {\n\t\treturn function() {\n\t\t\tfor(var i=0, l=arguments.length, a=new Array(l); i<l; ++i) {\n\t\t\t\ta[i] = arguments[i];\n\t\t\t}\n\t\t\treturn apply(f, this, a);\n\t\t};\n\t}\n\n\t/**\n\t * Call f in a future turn, with the supplied args, and return a promise\n\t * for the result.\n\t * @param {function} f\n\t * @returns {Promise}\n\t */\n\tfunction attempt(f /*, args... */) {\n\t\t/*jshint validthis:true */\n\t\tfor(var i=0, l=arguments.length-1, a=new Array(l); i<l; ++i) {\n\t\t\ta[i] = arguments[i+1];\n\t\t}\n\t\treturn apply(f, this, a);\n\t}\n\n\t/**\n\t * Creates a {promise, resolver} pair, either or both of which\n\t * may be given out safely to consumers.\n\t * @return {{promise: Promise, resolve: function, reject: function, notify: function}}\n\t */\n\tfunction defer() {\n\t\treturn new Deferred();\n\t}\n\n\tfunction Deferred() {\n\t\tvar p = Promise._defer();\n\n\t\tfunction resolve(x) { p._handler.resolve(x); }\n\t\tfunction reject(x) { p._handler.reject(x); }\n\t\tfunction notify(x) { p._handler.notify(x); }\n\n\t\tthis.promise = p;\n\t\tthis.resolve = resolve;\n\t\tthis.reject = reject;\n\t\tthis.notify = notify;\n\t\tthis.resolver = { resolve: resolve, reject: reject, notify: notify };\n\t}\n\n\t/**\n\t * Determines if x is promise-like, i.e. a thenable object\n\t * NOTE: Will return true for *any thenable object*, and isn't truly\n\t * safe, since it may attempt to access the `then` property of x (i.e.\n\t *  clever/malicious getters may do weird things)\n\t * @param {*} x anything\n\t * @returns {boolean} true if x is promise-like\n\t */\n\tfunction isPromiseLike(x) {\n\t\treturn x && typeof x.then === 'function';\n\t}\n\n\t/**\n\t * Return a promise that will resolve only once all the supplied arguments\n\t * have resolved. The resolution value of the returned promise will be an array\n\t * containing the resolution values of each of the arguments.\n\t * @param {...*} arguments may be a mix of promises and values\n\t * @returns {Promise}\n\t */\n\tfunction join(/* ...promises */) {\n\t\treturn Promise.all(arguments);\n\t}\n\n\t/**\n\t * Return a promise that will fulfill once all input promises have\n\t * fulfilled, or reject when any one input promise rejects.\n\t * @param {array|Promise} promises array (or promise for an array) of promises\n\t * @returns {Promise}\n\t */\n\tfunction all(promises) {\n\t\treturn when(promises, Promise.all);\n\t}\n\n\t/**\n\t * Return a promise that will always fulfill with an array containing\n\t * the outcome states of all input promises.  The returned promise\n\t * will only reject if `promises` itself is a rejected promise.\n\t * @param {array|Promise} promises array (or promise for an array) of promises\n\t * @returns {Promise} promise for array of settled state descriptors\n\t */\n\tfunction settle(promises) {\n\t\treturn when(promises, Promise.settle);\n\t}\n\n\t/**\n\t * Promise-aware array map function, similar to `Array.prototype.map()`,\n\t * but input array may contain promises or values.\n\t * @param {Array|Promise} promises array of anything, may contain promises and values\n\t * @param {function(x:*, index:Number):*} mapFunc map function which may\n\t *  return a promise or value\n\t * @returns {Promise} promise that will fulfill with an array of mapped values\n\t *  or reject if any input promise rejects.\n\t */\n\tfunction map(promises, mapFunc) {\n\t\treturn when(promises, function(promises) {\n\t\t\treturn Promise.map(promises, mapFunc);\n\t\t});\n\t}\n\n\t/**\n\t * Filter the provided array of promises using the provided predicate.  Input may\n\t * contain promises and values\n\t * @param {Array|Promise} promises array of promises and values\n\t * @param {function(x:*, index:Number):boolean} predicate filtering predicate.\n\t *  Must return truthy (or promise for truthy) for items to retain.\n\t * @returns {Promise} promise that will fulfill with an array containing all items\n\t *  for which predicate returned truthy.\n\t */\n\tfunction filter(promises, predicate) {\n\t\treturn when(promises, function(promises) {\n\t\t\treturn Promise.filter(promises, predicate);\n\t\t});\n\t}\n\n\treturn when;\n});\n})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });\n"]}