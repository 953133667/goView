{"version":3,"sources":["pipeline.js"],"names":[],"mappings":"AAAA;;AAEA;;;;;;;;;;;AAWA,CAAC,UAAS,MAAT,EAAiB;AAClB,QAAO,UAAS,OAAT,EAAkB;;AAExB,MAAI,OAAO,QAAQ,QAAR,CAAX;AACA,MAAI,MAAM,KAAK,OAAL,CAAa,GAAvB;AACA,MAAI,QAAQ,MAAM,SAAN,CAAgB,KAA5B;;AAEA;;;;;;;;AAQA,SAAO,SAAS,QAAT,CAAkB,KAAlB,CAAwB,oBAAxB,EAA8C;AACpD;AACA;AACA,OAAI,UAAU,UAAS,IAAT,EAAe,IAAf,EAAqB;AAClC,cAAU,UAAS,GAAT,EAAc,IAAd,EAAoB;AAC7B,YAAO,KAAK,GAAL,CAAP;AACA,KAFD;;AAIA,WAAO,KAAK,KAAL,CAAW,IAAX,EAAiB,IAAjB,CAAP;AACA,IAND;;AAQA,UAAO,IAAI,MAAM,IAAN,CAAW,SAAX,EAAsB,CAAtB,CAAJ,EAA8B,IAA9B,CAAmC,UAAS,IAAT,EAAe;AACxD,WAAO,KAAK,MAAL,CAAY,KAAZ,EAAmB,UAAS,GAAT,EAAc,IAAd,EAAoB;AAC7C,YAAO,QAAQ,GAAR,EAAa,IAAb,CAAP;AACA,KAFM,EAEJ,IAFI,CAAP;AAGA,IAJM,CAAP;AAKA,GAhBD;AAkBA,EAhCD;AAiCC,CAlCD,EAkCG,OAAO,MAAP,KAAkB,UAAlB,IAAgC,OAAO,GAAvC,GAA6C,MAA7C,GAAsD,UAAU,OAAV,EAAmB;AAAE,QAAO,OAAP,GAAiB,QAAQ,OAAR,CAAjB;AAAoC,CAlClH","file":"pipeline-compiled.js","sourcesContent":["/** @license MIT License (c) copyright 2011-2013 original author or authors */\n\n/**\n * pipeline.js\n *\n * Run a set of task functions in sequence, passing the result\n * of the previous as an argument to the next.  Like a shell\n * pipeline, e.g. `cat file.txt | grep 'foo' | sed -e 's/foo/bar/g'\n *\n * @author Brian Cavalier\n * @author John Hann\n */\n\n(function(define) {\ndefine(function(require) {\n\n\tvar when = require('./when');\n\tvar all = when.Promise.all;\n\tvar slice = Array.prototype.slice;\n\n\t/**\n\t * Run array of tasks in a pipeline where the next\n\t * tasks receives the result of the previous.  The first task\n\t * will receive the initialArgs as its argument list.\n\t * @param tasks {Array|Promise} array or promise for array of task functions\n\t * @param [initialArgs...] {*} arguments to be passed to the first task\n\t * @return {Promise} promise for return value of the final task\n\t */\n\treturn function pipeline(tasks /* initialArgs... */) {\n\t\t// Self-optimizing function to run first task with multiple\n\t\t// args using apply, but subsequence tasks via direct invocation\n\t\tvar runTask = function(args, task) {\n\t\t\trunTask = function(arg, task) {\n\t\t\t\treturn task(arg);\n\t\t\t};\n\n\t\t\treturn task.apply(null, args);\n\t\t};\n\n\t\treturn all(slice.call(arguments, 1)).then(function(args) {\n\t\t\treturn when.reduce(tasks, function(arg, task) {\n\t\t\t\treturn runTask(arg, task);\n\t\t\t}, args);\n\t\t});\n\t};\n\n});\n})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });\n\n\n"]}