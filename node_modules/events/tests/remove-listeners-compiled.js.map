{"version":3,"sources":["remove-listeners.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI,SAAS,QAAQ,UAAR,CAAb;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,SAAS,QAAQ,KAAR,CAAb;;AAEA,IAAI,QAAQ,CAAZ;;AAEA,SAAS,SAAT,GAAqB;AACnB,UAAQ,GAAR,CAAY,WAAZ;AACA;AACD;;AAED,SAAS,SAAT,GAAqB;AACnB,UAAQ,GAAR,CAAY,WAAZ;AACA;AACD;;AAED,SAAS,SAAT,GAAqB;AACnB,UAAQ,GAAR,CAAY,WAAZ;AACA;AACD;;AAED,SAAS,OAAT,GAAmB;AACjB,SAAO,CAAP;AACD;;AAED,SAAS,OAAT,GAAmB;AACjB,SAAO,CAAP;AACD;;AAED,IAAI,KAAK,IAAI,OAAO,YAAX,EAAT;AACA,GAAG,EAAH,CAAM,OAAN,EAAe,SAAf;AACA,GAAG,EAAH,CAAM,gBAAN,EAAwB,OAAO,QAAP,CAAgB,UAAS,IAAT,EAAe,EAAf,EAAmB;AACzD,SAAO,KAAP,CAAa,IAAb,EAAmB,OAAnB;AACA,SAAO,KAAP,CAAa,EAAb,EAAiB,SAAjB;AACD,CAHuB,CAAxB;AAIA,GAAG,cAAH,CAAkB,OAAlB,EAA2B,SAA3B;AACA,OAAO,SAAP,CAAiB,EAAjB,EAAqB,GAAG,SAAH,CAAa,OAAb,CAArB;;AAEA,IAAI,KAAK,IAAI,OAAO,YAAX,EAAT;AACA,GAAG,EAAH,CAAM,OAAN,EAAe,SAAf;AACA,GAAG,EAAH,CAAM,gBAAN,EAAwB,OAAO,IAA/B;AACA,GAAG,cAAH,CAAkB,OAAlB,EAA2B,SAA3B;AACA,OAAO,SAAP,CAAiB,CAAC,SAAD,CAAjB,EAA8B,GAAG,SAAH,CAAa,OAAb,CAA9B;;AAEA,IAAI,KAAK,IAAI,OAAO,YAAX,EAAT;AACA,GAAG,EAAH,CAAM,OAAN,EAAe,SAAf;AACA,GAAG,EAAH,CAAM,OAAN,EAAe,SAAf;AACA,GAAG,EAAH,CAAM,gBAAN,EAAwB,OAAO,QAAP,CAAgB,UAAS,IAAT,EAAe,EAAf,EAAmB;AACzD,SAAO,KAAP,CAAa,IAAb,EAAmB,OAAnB;AACA,SAAO,KAAP,CAAa,EAAb,EAAiB,SAAjB;AACD,CAHuB,CAAxB;AAIA,GAAG,cAAH,CAAkB,OAAlB,EAA2B,SAA3B;AACA,OAAO,SAAP,CAAiB,CAAC,SAAD,CAAjB,EAA8B,GAAG,SAAH,CAAa,OAAb,CAA9B;;AAEA,IAAI,KAAK,IAAI,OAAO,YAAX,EAAT;AACA,GAAG,EAAH,CAAM,gBAAN,EAAwB,OAAO,QAAP,CAAgB,UAAS,IAAT,EAAe,EAAf,EAAmB;AACzD,MAAI,OAAO,OAAX,EAAoB;AACpB,OAAK,cAAL,CAAoB,MAApB,EAA4B,OAA5B;AACA,OAAK,IAAL,CAAU,MAAV;AACD,CAJuB,EAIrB,CAJqB,CAAxB;AAKA,GAAG,EAAH,CAAM,MAAN,EAAc,OAAd;AACA,GAAG,EAAH,CAAM,MAAN,EAAc,OAAd;AACA,GAAG,cAAH,CAAkB,MAAlB,EAA0B,OAA1B","file":"remove-listeners-compiled.js","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar common = require('./common');\nvar assert = require('assert');\nvar events = require('../');\n\nvar count = 0;\n\nfunction listener1() {\n  console.log('listener1');\n  count++;\n}\n\nfunction listener2() {\n  console.log('listener2');\n  count++;\n}\n\nfunction listener3() {\n  console.log('listener3');\n  count++;\n}\n\nfunction remove1() {\n  assert(0);\n}\n\nfunction remove2() {\n  assert(0);\n}\n\nvar e1 = new events.EventEmitter();\ne1.on('hello', listener1);\ne1.on('removeListener', common.mustCall(function(name, cb) {\n  assert.equal(name, 'hello');\n  assert.equal(cb, listener1);\n}));\ne1.removeListener('hello', listener1);\nassert.deepEqual([], e1.listeners('hello'));\n\nvar e2 = new events.EventEmitter();\ne2.on('hello', listener1);\ne2.on('removeListener', assert.fail);\ne2.removeListener('hello', listener2);\nassert.deepEqual([listener1], e2.listeners('hello'));\n\nvar e3 = new events.EventEmitter();\ne3.on('hello', listener1);\ne3.on('hello', listener2);\ne3.on('removeListener', common.mustCall(function(name, cb) {\n  assert.equal(name, 'hello');\n  assert.equal(cb, listener1);\n}));\ne3.removeListener('hello', listener1);\nassert.deepEqual([listener2], e3.listeners('hello'));\n\nvar e4 = new events.EventEmitter();\ne4.on('removeListener', common.mustCall(function(name, cb) {\n  if (cb !== remove1) return;\n  this.removeListener('quux', remove2);\n  this.emit('quux');\n}, 2));\ne4.on('quux', remove1);\ne4.on('quux', remove2);\ne4.removeListener('quux', remove1);\n"]}