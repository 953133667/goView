{"version":3,"sources":["_.js"],"names":[],"mappings":"AAAA,IAAI,QAAQ,QAAQ,eAAR,EAAyB,KAArC;AACA,IAAI,OAAO,QAAQ,KAAR,EAAe,IAA1B;;AAEA,KAAK,eAAL,EAAsB,QAAQ,UAAR,EAAoB,EAApB,CAAtB;;AAEA,KAAK,cAAL,EAAqB,QAAQ,UAAR,EAAoB,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,CAApB,CAArB;;AAEA,KAAK,WAAL,EAAkB,QAAQ,aAAR,EAAuB,EAAvB,CAAlB;;AAEA,KAAK,UAAL,EAAiB,QAAQ,aAAR,EAAuB,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,CAAvB,CAAjB;;AAEA,KAAK,gBAAL,EAAuB,UAAU,CAAV,EAAa;AAChC,QAAI,QAAQ,MAAM,OAAN,EAAe,CAAC,MAAD,CAAf,CAAZ;;AAEA,UAAM,MAAN,CAAa,EAAb,CAAgB,MAAhB,EAAwB,UAAU,GAAV,EAAe;AACnC,UAAE,IAAF,CACI,QAAQ,IAAI,QAAJ,GAAe,IAAf,KAAwB,SAAhC,EAA2C,EAA3C,CADJ;AAGA,UAAE,GAAF;AACH,KALD;;AAOA,UAAM,MAAN,CAAa,EAAb,CAAgB,MAAhB,EAAwB,UAAU,GAAV,EAAe;AACnC,eAAO,KAAP,CAAa,GAAb;AACA,UAAE,GAAF;AACH,KAHD;AAIH,CAdD;;AAgBA,KAAK,eAAL,EAAsB,UAAU,CAAV,EAAa;AAC/B,QAAI,QAAQ,MAAM,OAAN,EAAe,CAAC,MAAD,CAAf,CAAZ;;AAEA,UAAM,MAAN,CAAa,EAAb,CAAgB,MAAhB,EAAwB,UAAU,GAAV,EAAe;AACnC,UAAE,IAAF,CACI,QAAQ,IAAI,QAAJ,GAAe,IAAf,KAAwB,SAAhC,EAA2C,CAAE,GAAF,EAAO,GAAP,CAA3C,CADJ;AAGA,UAAE,GAAF;AACH,KALD;;AAOA,UAAM,MAAN,CAAa,EAAb,CAAgB,MAAhB,EAAwB,UAAU,GAAV,EAAe;AACnC,UAAE,KAAF,CAAQ,GAAR;AACA,UAAE,GAAF;AACH,KAHD;AAIH,CAdD;;AAgBA,SAAS,OAAT,CAAkB,GAAlB,EAAuB,IAAvB,EAA6B;;AAEzB,WAAO,UAAU,CAAV,EAAa;AAChB,YAAI,KAAK,WAAW,YAAY;AAC5B,mBAAO,IAAP,CAAY,wBAAZ;AACH,SAFQ,EAEN,IAFM,CAAT;;AAIA,YAAI,SAAS,QAAQ,GAAR,EAAb;AACA,gBAAQ,KAAR,CAAc,YAAY,IAA1B;;AAEA,YAAI,OAAO,IAAI,KAAJ,CAAU,GAAV,CAAX;;AAEA,YAAI,MAAM,MAAM,KAAK,CAAL,CAAN,EAAe,KAAK,KAAL,CAAW,CAAX,EAAc,MAAd,CAAqB,KAAK,GAAL,CAAS,MAAT,CAArB,CAAf,CAAV;AACA,gBAAQ,KAAR,CAAc,MAAd;;AAEA,YAAI,MAAJ,CAAW,EAAX,CAAc,MAAd,EAAsB,UAAU,GAAV,EAAe;AACjC,cAAE,KAAF,CAAQ,GAAR;AACA,cAAE,GAAF;AACH,SAHD;;AAKA,YAAI,MAAJ,CAAW,EAAX,CAAc,MAAd,EAAsB,UAAU,GAAV,EAAe;AACjC,yBAAa,EAAb;AACA,gBAAI,IAAI,KAAK,KAAL,CAAW,IAAI,QAAJ,EAAX,CAAR;AACA,cAAE,IAAF,CAAO,EAAE,GAAF,CAAM,MAAN,CAAP,EAAsB,KAAK,GAAL,CAAS,MAAT,CAAtB;AACA,cAAE,GAAF;AACH,SALD;AAMH,KAxBD;AAyBH","file":"_-compiled.js","sourcesContent":["var spawn = require('child_process').spawn;\nvar test = require('tap').test;\n\ntest('dotSlashEmpty', testCmd('./bin.js', []));\n\ntest('dotSlashArgs', testCmd('./bin.js', [ 'a', 'b', 'c' ]));\n\ntest('nodeEmpty', testCmd('node bin.js', []));\n\ntest('nodeArgs', testCmd('node bin.js', [ 'x', 'y', 'z' ]));\n\ntest('whichNodeEmpty', function (t) {\n    var which = spawn('which', ['node']);\n    \n    which.stdout.on('data', function (buf) {\n        t.test(\n            testCmd(buf.toString().trim() + ' bin.js', [])\n        );\n        t.end();\n    });\n    \n    which.stderr.on('data', function (err) {\n        assert.error(err);\n        t.end();\n    });\n});\n\ntest('whichNodeArgs', function (t) {\n    var which = spawn('which', ['node']);\n\n    which.stdout.on('data', function (buf) {\n        t.test(\n            testCmd(buf.toString().trim() + ' bin.js', [ 'q', 'r' ])\n        );\n        t.end();\n    });\n    \n    which.stderr.on('data', function (err) {\n        t.error(err);\n        t.end();\n    });\n});\n\nfunction testCmd (cmd, args) {\n\n    return function (t) {\n        var to = setTimeout(function () {\n            assert.fail('Never got stdout data.')\n        }, 5000);\n        \n        var oldDir = process.cwd();\n        process.chdir(__dirname + '/_');\n        \n        var cmds = cmd.split(' ');\n        \n        var bin = spawn(cmds[0], cmds.slice(1).concat(args.map(String)));\n        process.chdir(oldDir);\n        \n        bin.stderr.on('data', function (err) {\n            t.error(err);\n            t.end();\n        });\n        \n        bin.stdout.on('data', function (buf) {\n            clearTimeout(to);\n            var _ = JSON.parse(buf.toString());\n            t.same(_.map(String), args.map(String));\n            t.end();\n        });\n    };\n}\n"]}