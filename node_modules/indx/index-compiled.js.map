{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA,IAAI,KAAK,QAAQ,IAAR,CAAT;AAAA,IACI,OAAO,QAAQ,MAAR,CADX;;AAGA,IAAI,mBAAmB,CAAC,IAAD,EAAO,QAAP,CAAvB;;AAEA,OAAO,OAAP,GAAiB,UAAS,GAAT,EAAa;AAC5B,QAAM,KAAK,OAAL,CAAa,GAAb,CAAN;AACA,MAAI,MAAM,EAAV;AACA,MAAI,OAAO,GAAG,WAAH,CAAe,GAAf;AACE;AADF,GAEG,MAFH,CAEU,UAAS,CAAT,EAAW;AAAE,WAAO,EAAE,KAAF,CAAQ,UAAR,IAAsB,KAAtB,GAA8B,IAArC;AAA2C,GAFlE;AAGE;AAHF,GAIG,MAJH,CAIU,UAAS,CAAT,EAAW;AAAE,WAAO,MAAM,GAAN,EAAU,CAAV,KAAgB,EAAE,KAAF,CAAQ,kBAAR,CAAhB,GAA8C,IAA9C,GAAqD,KAA5D;AAAmE,GAJ1F;AAKE;AALF,GAMG,MANH,CAMU,UAAS,CAAT,EAAW;AAAE,WAAQ,MAAM,GAAN,EAAU,CAAV,KAAgB,CAAC,eAAe,GAAf,EAAmB,CAAnB,CAAlB,GAA2C,KAA3C,GAAmD,IAA1D;AAAgE,GANvF;AAOE;AAPF,GAQG,GARH,CAQO,UAAS,CAAT,EAAW;AAAE,WAAO,EAAE,OAAF,CAAU,kBAAV,EAA8B,EAA9B,CAAP;AAA0C,GAR9D,CAAX;;AAUA,OAAK,OAAL,CAAa,UAAS,GAAT,EAAa;AACxB,QAAI;AACF,UAAI,GAAJ,IAAW,QAAQ,KAAK,IAAL,CAAU,GAAV,EAAe,GAAf,CAAR,CAAX;AACD,KAFD,CAEE,OAAO,GAAP,EAAY;AACZ,UAAI,OAAJ,GAAc,wBAAwB,KAAK,IAAL,CAAU,GAAV,EAAe,GAAf,CAAxB,GAA8C,IAA9C,GAAqD,IAAI,OAAvE;AACA,YAAM,GAAN;AACD;AACF,GAPD;;AASA,SAAO,GAAP;AACD,CAvBD;;AAyBA;AACA;AACA;;AAEA,SAAS,KAAT,CAAe,GAAf,EAAoB,CAApB,EAAsB;AAAE,SAAO,GAAG,QAAH,CAAY,KAAK,IAAL,CAAU,GAAV,EAAc,CAAd,CAAZ,EAA8B,WAA9B,EAAP;AAAoD;;AAE5E,SAAS,gBAAT,GAA2B;AACzB,MAAI,MAAM,EAAV;AACA,mBAAiB,OAAjB,CAAyB,UAAS,GAAT,EAAa;AAAE,WAAO,QAAQ,GAAR,GAAc,GAAd,GAAoB,GAA3B;AAAiC,GAAzE;AACA,SAAO,IAAI,MAAJ,CAAW,IAAI,KAAJ,CAAU,CAAV,EAAY,CAAC,CAAb,CAAX,CAAP;AACD;;AAED,SAAS,cAAT,CAAwB,GAAxB,EAA4B,CAA5B,EAA8B;AAC5B,MAAI,MAAM,KAAV;AACA,mBAAiB,OAAjB,CAAyB,UAAS,GAAT,EAAa;AACpC,QAAI,GAAG,UAAH,CAAc,KAAK,IAAL,CAAU,GAAV,EAAe,CAAf,EAAkB,WAAW,GAA7B,CAAd,CAAJ,EAAsD;AAAE,YAAM,IAAN;AAAa;AACtE,GAFD;AAGA,SAAO,GAAP;AACD","file":"index-compiled.js","sourcesContent":["var fs = require('fs'),\n    path = require('path');\n\nvar valid_extensions = ['js', 'coffee'];\n\nmodule.exports = function(dir){\n  dir = path.resolve(dir);\n  var res = {};\n  var objs = fs.readdirSync(dir)\n               // ignore index file\n               .filter(function(f){ return f.match(/^index\\./) ? false : true })\n               // ignore non-js files that aren't folders\n               .filter(function(f){ return isDir(dir,f) || f.match(extensions_regex()) ? true : false })\n               // ignore folders without an index file\n               .filter(function(f){ return (isDir(dir,f) && !contains_index(dir,f)) ? false : true })\n               // remove extensions\n               .map(function(f){ return f.replace(extensions_regex(), '') });\n\n  objs.forEach(function(obj){\n    try {\n      res[obj] = require(path.join(dir, obj));\n    } catch (err) {\n      err.message = \"Could note require \" + path.join(dir, obj) + \": \" + err.message\n      throw err\n    }\n  });\n\n  return res;\n}\n\n//\n// @api private\n//\n\nfunction isDir(dir, f){ return fs.statSync(path.join(dir,f)).isDirectory() }\n\nfunction extensions_regex(){\n  var str = '';\n  valid_extensions.forEach(function(ext){ str += '\\\\.' + ext + '$' + '|'; });\n  return new RegExp(str.slice(0,-1))\n}\n\nfunction contains_index(dir,f){\n  var res = false;\n  valid_extensions.forEach(function(ext){\n    if (fs.existsSync(path.join(dir, f, 'index.' + ext))) { res = true; }\n  });\n  return res;\n}\n"]}