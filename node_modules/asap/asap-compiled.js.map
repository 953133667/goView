{"version":3,"sources":["asap.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,UAAU,QAAQ,OAAR,CAAd;AACA,IAAI,YAAY,EAAhB;;AAEA;;;;;;;;;;AAUA,OAAO,OAAP,GAAiB,IAAjB;AACA,SAAS,IAAT,CAAc,IAAd,EAAoB;AAChB,QAAI,OAAJ;AACA,QAAI,UAAU,MAAd,EAAsB;AAClB,kBAAU,UAAU,GAAV,EAAV;AACH,KAFD,MAEO;AACH,kBAAU,IAAI,OAAJ,EAAV;AACH;AACD,YAAQ,IAAR,GAAe,IAAf;AACA,YAAQ,MAAR,GAAiB,QAAQ,MAAzB;AACA,YAAQ,OAAR;AACH;;AAED,SAAS,OAAT,GAAmB;AACf,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,MAAL,GAAc,IAAd;AACH;;AAED,QAAQ,SAAR,CAAkB,IAAlB,GAAyB,YAAY;AACjC,QAAI,KAAK,MAAT,EAAiB;AACb,aAAK,MAAL,CAAY,KAAZ;AACH;AACD,QAAI,QAAQ,IAAZ;AACA,QAAI;AACA,aAAK,IAAL,CAAU,IAAV;AACA,gBAAQ,KAAR;AACA;AACA;AACA,YAAI,KAAK,MAAT,EAAiB;AACb,iBAAK,MAAL,CAAY,IAAZ;AACH;AACJ,KARD,SAQU;AACN;AACA;AACA,YAAI,KAAJ,EAAW;AACP;AACA;AACA;AACA;AACA;AACA,oBAAQ,YAAR;AACH;AACD;AACA;AACA,aAAK,IAAL,GAAY,IAAZ;AACA,aAAK,MAAL,GAAc,IAAd;AACA,kBAAU,IAAV,CAAe,IAAf;AACH;AACJ,CA9BD","file":"asap-compiled.js","sourcesContent":["\"use strict\";\n\nvar rawAsap = require(\"./raw\");\nvar freeTasks = [];\n\n/**\n * Calls a task as soon as possible after returning, in its own event, with\n * priority over IO events. An exception thrown in a task can be handled by\n * `process.on(\"uncaughtException\") or `domain.on(\"error\")`, but will otherwise\n * crash the process. If the error is handled, all subsequent tasks will\n * resume.\n *\n * @param {{call}} task A callable object, typically a function that takes no\n * arguments.\n */\nmodule.exports = asap;\nfunction asap(task) {\n    var rawTask;\n    if (freeTasks.length) {\n        rawTask = freeTasks.pop();\n    } else {\n        rawTask = new RawTask();\n    }\n    rawTask.task = task;\n    rawTask.domain = process.domain;\n    rawAsap(rawTask);\n}\n\nfunction RawTask() {\n    this.task = null;\n    this.domain = null;\n}\n\nRawTask.prototype.call = function () {\n    if (this.domain) {\n        this.domain.enter();\n    }\n    var threw = true;\n    try {\n        this.task.call();\n        threw = false;\n        // If the task throws an exception (presumably) Node.js restores the\n        // domain stack for the next event.\n        if (this.domain) {\n            this.domain.exit();\n        }\n    } finally {\n        // We use try/finally and a threw flag to avoid messing up stack traces\n        // when we catch and release errors.\n        if (threw) {\n            // In Node.js, uncaught exceptions are considered fatal errors.\n            // Re-throw them to interrupt flushing!\n            // Ensure that flushing continues if an uncaught exception is\n            // suppressed listening process.on(\"uncaughtException\") or\n            // domain.on(\"error\").\n            rawAsap.requestFlush();\n        }\n        // If the task threw an error, we do not want to exit the domain here.\n        // Exiting the domain would prevent the domain from catching the error.\n        this.task = null;\n        this.domain = null;\n        freeTasks.push(this);\n    }\n};\n\n"]}