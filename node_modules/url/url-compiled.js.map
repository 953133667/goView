{"version":3,"sources":["url.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI,WAAW,QAAQ,UAAR,CAAf;;AAEA,QAAQ,KAAR,GAAgB,QAAhB;AACA,QAAQ,OAAR,GAAkB,UAAlB;AACA,QAAQ,aAAR,GAAwB,gBAAxB;AACA,QAAQ,MAAR,GAAiB,SAAjB;;AAEA,QAAQ,GAAR,GAAc,GAAd;;AAEA,SAAS,GAAT,GAAe;AACb,OAAK,QAAL,GAAgB,IAAhB;AACA,OAAK,OAAL,GAAe,IAAf;AACA,OAAK,IAAL,GAAY,IAAZ;AACA,OAAK,IAAL,GAAY,IAAZ;AACA,OAAK,IAAL,GAAY,IAAZ;AACA,OAAK,QAAL,GAAgB,IAAhB;AACA,OAAK,IAAL,GAAY,IAAZ;AACA,OAAK,MAAL,GAAc,IAAd;AACA,OAAK,KAAL,GAAa,IAAb;AACA,OAAK,QAAL,GAAgB,IAAhB;AACA,OAAK,IAAL,GAAY,IAAZ;AACA,OAAK,IAAL,GAAY,IAAZ;AACD;;AAED;;AAEA;AACA;AACA,IAAI,kBAAkB,mBAAtB;AAAA,IACI,cAAc,UADlB;;;AAGI;AACA;AACA,SAAS,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,IAA1B,EAAgC,IAAhC,EAAsC,IAAtC,CALb;;;AAOI;AACA,SAAS,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,IAAhB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,MAAhC,CAAuC,MAAvC,CARb;;;AAUI;AACA,aAAa,CAAC,IAAD,EAAO,MAAP,CAAc,MAAd,CAXjB;;AAYI;AACA;AACA;AACA;AACA,eAAe,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,MAA1B,CAAiC,UAAjC,CAhBnB;AAAA,IAiBI,kBAAkB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAjBtB;AAAA,IAkBI,iBAAiB,GAlBrB;AAAA,IAmBI,sBAAsB,uBAnB1B;AAAA,IAoBI,oBAAoB,6BApBxB;;AAqBI;AACA,iBAAiB;AACf,gBAAc,IADC;AAEf,iBAAe;AAFA,CAtBrB;;AA0BI;AACA,mBAAmB;AACjB,gBAAc,IADG;AAEjB,iBAAe;AAFE,CA3BvB;;AA+BI;AACA,kBAAkB;AAChB,UAAQ,IADQ;AAEhB,WAAS,IAFO;AAGhB,SAAO,IAHS;AAIhB,YAAU,IAJM;AAKhB,UAAQ,IALQ;AAMhB,WAAS,IANO;AAOhB,YAAU,IAPM;AAQhB,UAAQ,IARQ;AAShB,aAAW,IATK;AAUhB,WAAS;AAVO,CAhCtB;AAAA,IA4CI,cAAc,QAAQ,aAAR,CA5ClB;;AA8CA,SAAS,QAAT,CAAkB,GAAlB,EAAuB,gBAAvB,EAAyC,iBAAzC,EAA4D;AAC1D,MAAI,OAAO,SAAS,GAAT,CAAP,IAAwB,eAAe,GAA3C,EAAgD,OAAO,GAAP;;AAEhD,MAAI,IAAI,IAAI,GAAJ,EAAR;AACA,IAAE,KAAF,CAAQ,GAAR,EAAa,gBAAb,EAA+B,iBAA/B;AACA,SAAO,CAAP;AACD;;AAED,IAAI,SAAJ,CAAc,KAAd,GAAsB,UAAS,GAAT,EAAc,gBAAd,EAAgC,iBAAhC,EAAmD;AACvE,MAAI,CAAC,SAAS,GAAT,CAAL,EAAoB;AAClB,UAAM,IAAI,SAAJ,CAAc,2CAA2C,OAAO,GAAhE,CAAN;AACD;;AAED,MAAI,OAAO,GAAX;;AAEA;AACA;AACA,SAAO,KAAK,IAAL,EAAP;;AAEA,MAAI,QAAQ,gBAAgB,IAAhB,CAAqB,IAArB,CAAZ;AACA,MAAI,KAAJ,EAAW;AACT,YAAQ,MAAM,CAAN,CAAR;AACA,QAAI,aAAa,MAAM,WAAN,EAAjB;AACA,SAAK,QAAL,GAAgB,UAAhB;AACA,WAAO,KAAK,MAAL,CAAY,MAAM,MAAlB,CAAP;AACD;;AAED;AACA;AACA;AACA;AACA,MAAI,qBAAqB,KAArB,IAA8B,KAAK,KAAL,CAAW,sBAAX,CAAlC,EAAsE;AACpE,QAAI,UAAU,KAAK,MAAL,CAAY,CAAZ,EAAe,CAAf,MAAsB,IAApC;AACA,QAAI,WAAW,EAAE,SAAS,iBAAiB,KAAjB,CAAX,CAAf,EAAoD;AAClD,aAAO,KAAK,MAAL,CAAY,CAAZ,CAAP;AACA,WAAK,OAAL,GAAe,IAAf;AACD;AACF;;AAED,MAAI,CAAC,iBAAiB,KAAjB,CAAD,KACC,WAAY,SAAS,CAAC,gBAAgB,KAAhB,CADvB,CAAJ,EACqD;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,QAAI,UAAU,CAAC,CAAf;AACA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,gBAAgB,MAApC,EAA4C,GAA5C,EAAiD;AAC/C,UAAI,MAAM,KAAK,OAAL,CAAa,gBAAgB,CAAhB,CAAb,CAAV;AACA,UAAI,QAAQ,CAAC,CAAT,KAAe,YAAY,CAAC,CAAb,IAAkB,MAAM,OAAvC,CAAJ,EACE,UAAU,GAAV;AACH;;AAED;AACA;AACA,QAAI,IAAJ,EAAU,MAAV;AACA,QAAI,YAAY,CAAC,CAAjB,EAAoB;AAClB;AACA,eAAS,KAAK,WAAL,CAAiB,GAAjB,CAAT;AACD,KAHD,MAGO;AACL;AACA;AACA,eAAS,KAAK,WAAL,CAAiB,GAAjB,EAAsB,OAAtB,CAAT;AACD;;AAED;AACA;AACA,QAAI,WAAW,CAAC,CAAhB,EAAmB;AACjB,aAAO,KAAK,KAAL,CAAW,CAAX,EAAc,MAAd,CAAP;AACA,aAAO,KAAK,KAAL,CAAW,SAAS,CAApB,CAAP;AACA,WAAK,IAAL,GAAY,mBAAmB,IAAnB,CAAZ;AACD;;AAED;AACA,cAAU,CAAC,CAAX;AACA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,aAAa,MAAjC,EAAyC,GAAzC,EAA8C;AAC5C,UAAI,MAAM,KAAK,OAAL,CAAa,aAAa,CAAb,CAAb,CAAV;AACA,UAAI,QAAQ,CAAC,CAAT,KAAe,YAAY,CAAC,CAAb,IAAkB,MAAM,OAAvC,CAAJ,EACE,UAAU,GAAV;AACH;AACD;AACA,QAAI,YAAY,CAAC,CAAjB,EACE,UAAU,KAAK,MAAf;;AAEF,SAAK,IAAL,GAAY,KAAK,KAAL,CAAW,CAAX,EAAc,OAAd,CAAZ;AACA,WAAO,KAAK,KAAL,CAAW,OAAX,CAAP;;AAEA;AACA,SAAK,SAAL;;AAEA;AACA;AACA,SAAK,QAAL,GAAgB,KAAK,QAAL,IAAiB,EAAjC;;AAEA;AACA;AACA,QAAI,eAAe,KAAK,QAAL,CAAc,CAAd,MAAqB,GAArB,IACf,KAAK,QAAL,CAAc,KAAK,QAAL,CAAc,MAAd,GAAuB,CAArC,MAA4C,GADhD;;AAGA;AACA,QAAI,CAAC,YAAL,EAAmB;AACjB,UAAI,YAAY,KAAK,QAAL,CAAc,KAAd,CAAoB,IAApB,CAAhB;AACA,WAAK,IAAI,IAAI,CAAR,EAAW,IAAI,UAAU,MAA9B,EAAsC,IAAI,CAA1C,EAA6C,GAA7C,EAAkD;AAChD,YAAI,OAAO,UAAU,CAAV,CAAX;AACA,YAAI,CAAC,IAAL,EAAW;AACX,YAAI,CAAC,KAAK,KAAL,CAAW,mBAAX,CAAL,EAAsC;AACpC,cAAI,UAAU,EAAd;AACA,eAAK,IAAI,IAAI,CAAR,EAAW,IAAI,KAAK,MAAzB,EAAiC,IAAI,CAArC,EAAwC,GAAxC,EAA6C;AAC3C,gBAAI,KAAK,UAAL,CAAgB,CAAhB,IAAqB,GAAzB,EAA8B;AAC5B;AACA;AACA;AACA,yBAAW,GAAX;AACD,aALD,MAKO;AACL,yBAAW,KAAK,CAAL,CAAX;AACD;AACF;AACD;AACA,cAAI,CAAC,QAAQ,KAAR,CAAc,mBAAd,CAAL,EAAyC;AACvC,gBAAI,aAAa,UAAU,KAAV,CAAgB,CAAhB,EAAmB,CAAnB,CAAjB;AACA,gBAAI,UAAU,UAAU,KAAV,CAAgB,IAAI,CAApB,CAAd;AACA,gBAAI,MAAM,KAAK,KAAL,CAAW,iBAAX,CAAV;AACA,gBAAI,GAAJ,EAAS;AACP,yBAAW,IAAX,CAAgB,IAAI,CAAJ,CAAhB;AACA,sBAAQ,OAAR,CAAgB,IAAI,CAAJ,CAAhB;AACD;AACD,gBAAI,QAAQ,MAAZ,EAAoB;AAClB,qBAAO,MAAM,QAAQ,IAAR,CAAa,GAAb,CAAN,GAA0B,IAAjC;AACD;AACD,iBAAK,QAAL,GAAgB,WAAW,IAAX,CAAgB,GAAhB,CAAhB;AACA;AACD;AACF;AACF;AACF;;AAED,QAAI,KAAK,QAAL,CAAc,MAAd,GAAuB,cAA3B,EAA2C;AACzC,WAAK,QAAL,GAAgB,EAAhB;AACD,KAFD,MAEO;AACL;AACA,WAAK,QAAL,GAAgB,KAAK,QAAL,CAAc,WAAd,EAAhB;AACD;;AAED,QAAI,CAAC,YAAL,EAAmB;AACjB;AACA;AACA;AACA;AACA,UAAI,cAAc,KAAK,QAAL,CAAc,KAAd,CAAoB,GAApB,CAAlB;AACA,UAAI,SAAS,EAAb;AACA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,YAAY,MAAhC,EAAwC,EAAE,CAA1C,EAA6C;AAC3C,YAAI,IAAI,YAAY,CAAZ,CAAR;AACA,eAAO,IAAP,CAAY,EAAE,KAAF,CAAQ,gBAAR,IACR,SAAS,SAAS,MAAT,CAAgB,CAAhB,CADD,GACsB,CADlC;AAED;AACD,WAAK,QAAL,GAAgB,OAAO,IAAP,CAAY,GAAZ,CAAhB;AACD;;AAED,QAAI,IAAI,KAAK,IAAL,GAAY,MAAM,KAAK,IAAvB,GAA8B,EAAtC;AACA,QAAI,IAAI,KAAK,QAAL,IAAiB,EAAzB;AACA,SAAK,IAAL,GAAY,IAAI,CAAhB;AACA,SAAK,IAAL,IAAa,KAAK,IAAlB;;AAEA;AACA;AACA,QAAI,YAAJ,EAAkB;AAChB,WAAK,QAAL,GAAgB,KAAK,QAAL,CAAc,MAAd,CAAqB,CAArB,EAAwB,KAAK,QAAL,CAAc,MAAd,GAAuB,CAA/C,CAAhB;AACA,UAAI,KAAK,CAAL,MAAY,GAAhB,EAAqB;AACnB,eAAO,MAAM,IAAb;AACD;AACF;AACF;;AAED;AACA;AACA,MAAI,CAAC,eAAe,UAAf,CAAL,EAAiC;;AAE/B;AACA;AACA;AACA,SAAK,IAAI,IAAI,CAAR,EAAW,IAAI,WAAW,MAA/B,EAAuC,IAAI,CAA3C,EAA8C,GAA9C,EAAmD;AACjD,UAAI,KAAK,WAAW,CAAX,CAAT;AACA,UAAI,MAAM,mBAAmB,EAAnB,CAAV;AACA,UAAI,QAAQ,EAAZ,EAAgB;AACd,cAAM,OAAO,EAAP,CAAN;AACD;AACD,aAAO,KAAK,KAAL,CAAW,EAAX,EAAe,IAAf,CAAoB,GAApB,CAAP;AACD;AACF;;AAGD;AACA,MAAI,OAAO,KAAK,OAAL,CAAa,GAAb,CAAX;AACA,MAAI,SAAS,CAAC,CAAd,EAAiB;AACf;AACA,SAAK,IAAL,GAAY,KAAK,MAAL,CAAY,IAAZ,CAAZ;AACA,WAAO,KAAK,KAAL,CAAW,CAAX,EAAc,IAAd,CAAP;AACD;AACD,MAAI,KAAK,KAAK,OAAL,CAAa,GAAb,CAAT;AACA,MAAI,OAAO,CAAC,CAAZ,EAAe;AACb,SAAK,MAAL,GAAc,KAAK,MAAL,CAAY,EAAZ,CAAd;AACA,SAAK,KAAL,GAAa,KAAK,MAAL,CAAY,KAAK,CAAjB,CAAb;AACA,QAAI,gBAAJ,EAAsB;AACpB,WAAK,KAAL,GAAa,YAAY,KAAZ,CAAkB,KAAK,KAAvB,CAAb;AACD;AACD,WAAO,KAAK,KAAL,CAAW,CAAX,EAAc,EAAd,CAAP;AACD,GAPD,MAOO,IAAI,gBAAJ,EAAsB;AAC3B;AACA,SAAK,MAAL,GAAc,EAAd;AACA,SAAK,KAAL,GAAa,EAAb;AACD;AACD,MAAI,IAAJ,EAAU,KAAK,QAAL,GAAgB,IAAhB;AACV,MAAI,gBAAgB,UAAhB,KACA,KAAK,QADL,IACiB,CAAC,KAAK,QAD3B,EACqC;AACnC,SAAK,QAAL,GAAgB,GAAhB;AACD;;AAED;AACA,MAAI,KAAK,QAAL,IAAiB,KAAK,MAA1B,EAAkC;AAChC,QAAI,IAAI,KAAK,QAAL,IAAiB,EAAzB;AACA,QAAI,IAAI,KAAK,MAAL,IAAe,EAAvB;AACA,SAAK,IAAL,GAAY,IAAI,CAAhB;AACD;;AAED;AACA,OAAK,IAAL,GAAY,KAAK,MAAL,EAAZ;AACA,SAAO,IAAP;AACD,CAvOD;;AAyOA;AACA,SAAS,SAAT,CAAmB,GAAnB,EAAwB;AACtB;AACA;AACA;AACA;AACA,MAAI,SAAS,GAAT,CAAJ,EAAmB,MAAM,SAAS,GAAT,CAAN;AACnB,MAAI,EAAE,eAAe,GAAjB,CAAJ,EAA2B,OAAO,IAAI,SAAJ,CAAc,MAAd,CAAqB,IAArB,CAA0B,GAA1B,CAAP;AAC3B,SAAO,IAAI,MAAJ,EAAP;AACD;;AAED,IAAI,SAAJ,CAAc,MAAd,GAAuB,YAAW;AAChC,MAAI,OAAO,KAAK,IAAL,IAAa,EAAxB;AACA,MAAI,IAAJ,EAAU;AACR,WAAO,mBAAmB,IAAnB,CAAP;AACA,WAAO,KAAK,OAAL,CAAa,MAAb,EAAqB,GAArB,CAAP;AACA,YAAQ,GAAR;AACD;;AAED,MAAI,WAAW,KAAK,QAAL,IAAiB,EAAhC;AAAA,MACI,WAAW,KAAK,QAAL,IAAiB,EADhC;AAAA,MAEI,OAAO,KAAK,IAAL,IAAa,EAFxB;AAAA,MAGI,OAAO,KAHX;AAAA,MAII,QAAQ,EAJZ;;AAMA,MAAI,KAAK,IAAT,EAAe;AACb,WAAO,OAAO,KAAK,IAAnB;AACD,GAFD,MAEO,IAAI,KAAK,QAAT,EAAmB;AACxB,WAAO,QAAQ,KAAK,QAAL,CAAc,OAAd,CAAsB,GAAtB,MAA+B,CAAC,CAAhC,GACX,KAAK,QADM,GAEX,MAAM,KAAK,QAAX,GAAsB,GAFnB,CAAP;AAGA,QAAI,KAAK,IAAT,EAAe;AACb,cAAQ,MAAM,KAAK,IAAnB;AACD;AACF;;AAED,MAAI,KAAK,KAAL,IACA,SAAS,KAAK,KAAd,CADA,IAEA,OAAO,IAAP,CAAY,KAAK,KAAjB,EAAwB,MAF5B,EAEoC;AAClC,YAAQ,YAAY,SAAZ,CAAsB,KAAK,KAA3B,CAAR;AACD;;AAED,MAAI,SAAS,KAAK,MAAL,IAAgB,SAAU,MAAM,KAAhC,IAA2C,EAAxD;;AAEA,MAAI,YAAY,SAAS,MAAT,CAAgB,CAAC,CAAjB,MAAwB,GAAxC,EAA6C,YAAY,GAAZ;;AAE7C;AACA;AACA,MAAI,KAAK,OAAL,IACA,CAAC,CAAC,QAAD,IAAa,gBAAgB,QAAhB,CAAd,KAA4C,SAAS,KADzD,EACgE;AAC9D,WAAO,QAAQ,QAAQ,EAAhB,CAAP;AACA,QAAI,YAAY,SAAS,MAAT,CAAgB,CAAhB,MAAuB,GAAvC,EAA4C,WAAW,MAAM,QAAjB;AAC7C,GAJD,MAIO,IAAI,CAAC,IAAL,EAAW;AAChB,WAAO,EAAP;AACD;;AAED,MAAI,QAAQ,KAAK,MAAL,CAAY,CAAZ,MAAmB,GAA/B,EAAoC,OAAO,MAAM,IAAb;AACpC,MAAI,UAAU,OAAO,MAAP,CAAc,CAAd,MAAqB,GAAnC,EAAwC,SAAS,MAAM,MAAf;;AAExC,aAAW,SAAS,OAAT,CAAiB,OAAjB,EAA0B,UAAS,KAAT,EAAgB;AACnD,WAAO,mBAAmB,KAAnB,CAAP;AACD,GAFU,CAAX;AAGA,WAAS,OAAO,OAAP,CAAe,GAAf,EAAoB,KAApB,CAAT;;AAEA,SAAO,WAAW,IAAX,GAAkB,QAAlB,GAA6B,MAA7B,GAAsC,IAA7C;AACD,CAtDD;;AAwDA,SAAS,UAAT,CAAoB,MAApB,EAA4B,QAA5B,EAAsC;AACpC,SAAO,SAAS,MAAT,EAAiB,KAAjB,EAAwB,IAAxB,EAA8B,OAA9B,CAAsC,QAAtC,CAAP;AACD;;AAED,IAAI,SAAJ,CAAc,OAAd,GAAwB,UAAS,QAAT,EAAmB;AACzC,SAAO,KAAK,aAAL,CAAmB,SAAS,QAAT,EAAmB,KAAnB,EAA0B,IAA1B,CAAnB,EAAoD,MAApD,EAAP;AACD,CAFD;;AAIA,SAAS,gBAAT,CAA0B,MAA1B,EAAkC,QAAlC,EAA4C;AAC1C,MAAI,CAAC,MAAL,EAAa,OAAO,QAAP;AACb,SAAO,SAAS,MAAT,EAAiB,KAAjB,EAAwB,IAAxB,EAA8B,aAA9B,CAA4C,QAA5C,CAAP;AACD;;AAED,IAAI,SAAJ,CAAc,aAAd,GAA8B,UAAS,QAAT,EAAmB;AAC/C,MAAI,SAAS,QAAT,CAAJ,EAAwB;AACtB,QAAI,MAAM,IAAI,GAAJ,EAAV;AACA,QAAI,KAAJ,CAAU,QAAV,EAAoB,KAApB,EAA2B,IAA3B;AACA,eAAW,GAAX;AACD;;AAED,MAAI,SAAS,IAAI,GAAJ,EAAb;AACA,SAAO,IAAP,CAAY,IAAZ,EAAkB,OAAlB,CAA0B,UAAS,CAAT,EAAY;AACpC,WAAO,CAAP,IAAY,KAAK,CAAL,CAAZ;AACD,GAFD,EAEG,IAFH;;AAIA;AACA;AACA,SAAO,IAAP,GAAc,SAAS,IAAvB;;AAEA;AACA,MAAI,SAAS,IAAT,KAAkB,EAAtB,EAA0B;AACxB,WAAO,IAAP,GAAc,OAAO,MAAP,EAAd;AACA,WAAO,MAAP;AACD;;AAED;AACA,MAAI,SAAS,OAAT,IAAoB,CAAC,SAAS,QAAlC,EAA4C;AAC1C;AACA,WAAO,IAAP,CAAY,QAAZ,EAAsB,OAAtB,CAA8B,UAAS,CAAT,EAAY;AACxC,UAAI,MAAM,UAAV,EACE,OAAO,CAAP,IAAY,SAAS,CAAT,CAAZ;AACH,KAHD;;AAKA;AACA,QAAI,gBAAgB,OAAO,QAAvB,KACA,OAAO,QADP,IACmB,CAAC,OAAO,QAD/B,EACyC;AACvC,aAAO,IAAP,GAAc,OAAO,QAAP,GAAkB,GAAhC;AACD;;AAED,WAAO,IAAP,GAAc,OAAO,MAAP,EAAd;AACA,WAAO,MAAP;AACD;;AAED,MAAI,SAAS,QAAT,IAAqB,SAAS,QAAT,KAAsB,OAAO,QAAtD,EAAgE;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAI,CAAC,gBAAgB,SAAS,QAAzB,CAAL,EAAyC;AACvC,aAAO,IAAP,CAAY,QAAZ,EAAsB,OAAtB,CAA8B,UAAS,CAAT,EAAY;AACxC,eAAO,CAAP,IAAY,SAAS,CAAT,CAAZ;AACD,OAFD;AAGA,aAAO,IAAP,GAAc,OAAO,MAAP,EAAd;AACA,aAAO,MAAP;AACD;;AAED,WAAO,QAAP,GAAkB,SAAS,QAA3B;AACA,QAAI,CAAC,SAAS,IAAV,IAAkB,CAAC,iBAAiB,SAAS,QAA1B,CAAvB,EAA4D;AAC1D,UAAI,UAAU,CAAC,SAAS,QAAT,IAAqB,EAAtB,EAA0B,KAA1B,CAAgC,GAAhC,CAAd;AACA,aAAO,QAAQ,MAAR,IAAkB,EAAE,SAAS,IAAT,GAAgB,QAAQ,KAAR,EAAlB,CAAzB,CAA4D;AAC5D,UAAI,CAAC,SAAS,IAAd,EAAoB,SAAS,IAAT,GAAgB,EAAhB;AACpB,UAAI,CAAC,SAAS,QAAd,EAAwB,SAAS,QAAT,GAAoB,EAApB;AACxB,UAAI,QAAQ,CAAR,MAAe,EAAnB,EAAuB,QAAQ,OAAR,CAAgB,EAAhB;AACvB,UAAI,QAAQ,MAAR,GAAiB,CAArB,EAAwB,QAAQ,OAAR,CAAgB,EAAhB;AACxB,aAAO,QAAP,GAAkB,QAAQ,IAAR,CAAa,GAAb,CAAlB;AACD,KARD,MAQO;AACL,aAAO,QAAP,GAAkB,SAAS,QAA3B;AACD;AACD,WAAO,MAAP,GAAgB,SAAS,MAAzB;AACA,WAAO,KAAP,GAAe,SAAS,KAAxB;AACA,WAAO,IAAP,GAAc,SAAS,IAAT,IAAiB,EAA/B;AACA,WAAO,IAAP,GAAc,SAAS,IAAvB;AACA,WAAO,QAAP,GAAkB,SAAS,QAAT,IAAqB,SAAS,IAAhD;AACA,WAAO,IAAP,GAAc,SAAS,IAAvB;AACA;AACA,QAAI,OAAO,QAAP,IAAmB,OAAO,MAA9B,EAAsC;AACpC,UAAI,IAAI,OAAO,QAAP,IAAmB,EAA3B;AACA,UAAI,IAAI,OAAO,MAAP,IAAiB,EAAzB;AACA,aAAO,IAAP,GAAc,IAAI,CAAlB;AACD;AACD,WAAO,OAAP,GAAiB,OAAO,OAAP,IAAkB,SAAS,OAA5C;AACA,WAAO,IAAP,GAAc,OAAO,MAAP,EAAd;AACA,WAAO,MAAP;AACD;;AAED,MAAI,cAAe,OAAO,QAAP,IAAmB,OAAO,QAAP,CAAgB,MAAhB,CAAuB,CAAvB,MAA8B,GAApE;AAAA,MACI,WACI,SAAS,IAAT,IACA,SAAS,QAAT,IAAqB,SAAS,QAAT,CAAkB,MAAlB,CAAyB,CAAzB,MAAgC,GAH7D;AAAA,MAKI,aAAc,YAAY,WAAZ,IACC,OAAO,IAAP,IAAe,SAAS,QAN3C;AAAA,MAOI,gBAAgB,UAPpB;AAAA,MAQI,UAAU,OAAO,QAAP,IAAmB,OAAO,QAAP,CAAgB,KAAhB,CAAsB,GAAtB,CAAnB,IAAiD,EAR/D;AAAA,MASI,UAAU,SAAS,QAAT,IAAqB,SAAS,QAAT,CAAkB,KAAlB,CAAwB,GAAxB,CAArB,IAAqD,EATnE;AAAA,MAUI,YAAY,OAAO,QAAP,IAAmB,CAAC,gBAAgB,OAAO,QAAvB,CAVpC;;AAYA;AACA;AACA;AACA;AACA;AACA,MAAI,SAAJ,EAAe;AACb,WAAO,QAAP,GAAkB,EAAlB;AACA,WAAO,IAAP,GAAc,IAAd;AACA,QAAI,OAAO,IAAX,EAAiB;AACf,UAAI,QAAQ,CAAR,MAAe,EAAnB,EAAuB,QAAQ,CAAR,IAAa,OAAO,IAApB,CAAvB,KACK,QAAQ,OAAR,CAAgB,OAAO,IAAvB;AACN;AACD,WAAO,IAAP,GAAc,EAAd;AACA,QAAI,SAAS,QAAb,EAAuB;AACrB,eAAS,QAAT,GAAoB,IAApB;AACA,eAAS,IAAT,GAAgB,IAAhB;AACA,UAAI,SAAS,IAAb,EAAmB;AACjB,YAAI,QAAQ,CAAR,MAAe,EAAnB,EAAuB,QAAQ,CAAR,IAAa,SAAS,IAAtB,CAAvB,KACK,QAAQ,OAAR,CAAgB,SAAS,IAAzB;AACN;AACD,eAAS,IAAT,GAAgB,IAAhB;AACD;AACD,iBAAa,eAAe,QAAQ,CAAR,MAAe,EAAf,IAAqB,QAAQ,CAAR,MAAe,EAAnD,CAAb;AACD;;AAED,MAAI,QAAJ,EAAc;AACZ;AACA,WAAO,IAAP,GAAe,SAAS,IAAT,IAAiB,SAAS,IAAT,KAAkB,EAApC,GACA,SAAS,IADT,GACgB,OAAO,IADrC;AAEA,WAAO,QAAP,GAAmB,SAAS,QAAT,IAAqB,SAAS,QAAT,KAAsB,EAA5C,GACA,SAAS,QADT,GACoB,OAAO,QAD7C;AAEA,WAAO,MAAP,GAAgB,SAAS,MAAzB;AACA,WAAO,KAAP,GAAe,SAAS,KAAxB;AACA,cAAU,OAAV;AACA;AACD,GAVD,MAUO,IAAI,QAAQ,MAAZ,EAAoB;AACzB;AACA;AACA,QAAI,CAAC,OAAL,EAAc,UAAU,EAAV;AACd,YAAQ,GAAR;AACA,cAAU,QAAQ,MAAR,CAAe,OAAf,CAAV;AACA,WAAO,MAAP,GAAgB,SAAS,MAAzB;AACA,WAAO,KAAP,GAAe,SAAS,KAAxB;AACD,GARM,MAQA,IAAI,CAAC,kBAAkB,SAAS,MAA3B,CAAL,EAAyC;AAC9C;AACA;AACA;AACA,QAAI,SAAJ,EAAe;AACb,aAAO,QAAP,GAAkB,OAAO,IAAP,GAAc,QAAQ,KAAR,EAAhC;AACA;AACA;AACA;AACA,UAAI,aAAa,OAAO,IAAP,IAAe,OAAO,IAAP,CAAY,OAAZ,CAAoB,GAApB,IAA2B,CAA1C,GACA,OAAO,IAAP,CAAY,KAAZ,CAAkB,GAAlB,CADA,GACyB,KAD1C;AAEA,UAAI,UAAJ,EAAgB;AACd,eAAO,IAAP,GAAc,WAAW,KAAX,EAAd;AACA,eAAO,IAAP,GAAc,OAAO,QAAP,GAAkB,WAAW,KAAX,EAAhC;AACD;AACF;AACD,WAAO,MAAP,GAAgB,SAAS,MAAzB;AACA,WAAO,KAAP,GAAe,SAAS,KAAxB;AACA;AACA,QAAI,CAAC,OAAO,OAAO,QAAd,CAAD,IAA4B,CAAC,OAAO,OAAO,MAAd,CAAjC,EAAwD;AACtD,aAAO,IAAP,GAAc,CAAC,OAAO,QAAP,GAAkB,OAAO,QAAzB,GAAoC,EAArC,KACC,OAAO,MAAP,GAAgB,OAAO,MAAvB,GAAgC,EADjC,CAAd;AAED;AACD,WAAO,IAAP,GAAc,OAAO,MAAP,EAAd;AACA,WAAO,MAAP;AACD;;AAED,MAAI,CAAC,QAAQ,MAAb,EAAqB;AACnB;AACA;AACA,WAAO,QAAP,GAAkB,IAAlB;AACA;AACA,QAAI,OAAO,MAAX,EAAmB;AACjB,aAAO,IAAP,GAAc,MAAM,OAAO,MAA3B;AACD,KAFD,MAEO;AACL,aAAO,IAAP,GAAc,IAAd;AACD;AACD,WAAO,IAAP,GAAc,OAAO,MAAP,EAAd;AACA,WAAO,MAAP;AACD;;AAED;AACA;AACA;AACA,MAAI,OAAO,QAAQ,KAAR,CAAc,CAAC,CAAf,EAAkB,CAAlB,CAAX;AACA,MAAI,mBACA,CAAC,OAAO,IAAP,IAAe,SAAS,IAAzB,MAAmC,SAAS,GAAT,IAAgB,SAAS,IAA5D,KACA,SAAS,EAFb;;AAIA;AACA;AACA,MAAI,KAAK,CAAT;AACA,OAAK,IAAI,IAAI,QAAQ,MAArB,EAA6B,KAAK,CAAlC,EAAqC,GAArC,EAA0C;AACxC,WAAO,QAAQ,CAAR,CAAP;AACA,QAAI,QAAQ,GAAZ,EAAiB;AACf,cAAQ,MAAR,CAAe,CAAf,EAAkB,CAAlB;AACD,KAFD,MAEO,IAAI,SAAS,IAAb,EAAmB;AACxB,cAAQ,MAAR,CAAe,CAAf,EAAkB,CAAlB;AACA;AACD,KAHM,MAGA,IAAI,EAAJ,EAAQ;AACb,cAAQ,MAAR,CAAe,CAAf,EAAkB,CAAlB;AACA;AACD;AACF;;AAED;AACA,MAAI,CAAC,UAAD,IAAe,CAAC,aAApB,EAAmC;AACjC,WAAO,IAAP,EAAa,EAAb,EAAiB;AACf,cAAQ,OAAR,CAAgB,IAAhB;AACD;AACF;;AAED,MAAI,cAAc,QAAQ,CAAR,MAAe,EAA7B,KACC,CAAC,QAAQ,CAAR,CAAD,IAAe,QAAQ,CAAR,EAAW,MAAX,CAAkB,CAAlB,MAAyB,GADzC,CAAJ,EACmD;AACjD,YAAQ,OAAR,CAAgB,EAAhB;AACD;;AAED,MAAI,oBAAqB,QAAQ,IAAR,CAAa,GAAb,EAAkB,MAAlB,CAAyB,CAAC,CAA1B,MAAiC,GAA1D,EAAgE;AAC9D,YAAQ,IAAR,CAAa,EAAb;AACD;;AAED,MAAI,aAAa,QAAQ,CAAR,MAAe,EAAf,IACZ,QAAQ,CAAR,KAAc,QAAQ,CAAR,EAAW,MAAX,CAAkB,CAAlB,MAAyB,GAD5C;;AAGA;AACA,MAAI,SAAJ,EAAe;AACb,WAAO,QAAP,GAAkB,OAAO,IAAP,GAAc,aAAa,EAAb,GACA,QAAQ,MAAR,GAAiB,QAAQ,KAAR,EAAjB,GAAmC,EADnE;AAEA;AACA;AACA;AACA,QAAI,aAAa,OAAO,IAAP,IAAe,OAAO,IAAP,CAAY,OAAZ,CAAoB,GAApB,IAA2B,CAA1C,GACA,OAAO,IAAP,CAAY,KAAZ,CAAkB,GAAlB,CADA,GACyB,KAD1C;AAEA,QAAI,UAAJ,EAAgB;AACd,aAAO,IAAP,GAAc,WAAW,KAAX,EAAd;AACA,aAAO,IAAP,GAAc,OAAO,QAAP,GAAkB,WAAW,KAAX,EAAhC;AACD;AACF;;AAED,eAAa,cAAe,OAAO,IAAP,IAAe,QAAQ,MAAnD;;AAEA,MAAI,cAAc,CAAC,UAAnB,EAA+B;AAC7B,YAAQ,OAAR,CAAgB,EAAhB;AACD;;AAED,MAAI,CAAC,QAAQ,MAAb,EAAqB;AACnB,WAAO,QAAP,GAAkB,IAAlB;AACA,WAAO,IAAP,GAAc,IAAd;AACD,GAHD,MAGO;AACL,WAAO,QAAP,GAAkB,QAAQ,IAAR,CAAa,GAAb,CAAlB;AACD;;AAED;AACA,MAAI,CAAC,OAAO,OAAO,QAAd,CAAD,IAA4B,CAAC,OAAO,OAAO,MAAd,CAAjC,EAAwD;AACtD,WAAO,IAAP,GAAc,CAAC,OAAO,QAAP,GAAkB,OAAO,QAAzB,GAAoC,EAArC,KACC,OAAO,MAAP,GAAgB,OAAO,MAAvB,GAAgC,EADjC,CAAd;AAED;AACD,SAAO,IAAP,GAAc,SAAS,IAAT,IAAiB,OAAO,IAAtC;AACA,SAAO,OAAP,GAAiB,OAAO,OAAP,IAAkB,SAAS,OAA5C;AACA,SAAO,IAAP,GAAc,OAAO,MAAP,EAAd;AACA,SAAO,MAAP;AACD,CAtQD;;AAwQA,IAAI,SAAJ,CAAc,SAAd,GAA0B,YAAW;AACnC,MAAI,OAAO,KAAK,IAAhB;AACA,MAAI,OAAO,YAAY,IAAZ,CAAiB,IAAjB,CAAX;AACA,MAAI,IAAJ,EAAU;AACR,WAAO,KAAK,CAAL,CAAP;AACA,QAAI,SAAS,GAAb,EAAkB;AAChB,WAAK,IAAL,GAAY,KAAK,MAAL,CAAY,CAAZ,CAAZ;AACD;AACD,WAAO,KAAK,MAAL,CAAY,CAAZ,EAAe,KAAK,MAAL,GAAc,KAAK,MAAlC,CAAP;AACD;AACD,MAAI,IAAJ,EAAU,KAAK,QAAL,GAAgB,IAAhB;AACX,CAXD;;AAaA,SAAS,QAAT,CAAkB,GAAlB,EAAuB;AACrB,SAAO,OAAO,GAAP,KAAe,QAAtB;AACD;;AAED,SAAS,QAAT,CAAkB,GAAlB,EAAuB;AACrB,SAAO,OAAO,GAAP,KAAe,QAAf,IAA2B,QAAQ,IAA1C;AACD;;AAED,SAAS,MAAT,CAAgB,GAAhB,EAAqB;AACnB,SAAO,QAAQ,IAAf;AACD;AACD,SAAS,iBAAT,CAA2B,GAA3B,EAAgC;AAC9B,SAAQ,OAAO,IAAf;AACD","file":"url-compiled.js","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar punycode = require('punycode');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a puny coded representation of \"domain\".\n      // It only converts the part of the domain name that\n      // has non ASCII characters. I.e. it dosent matter if\n      // you call it with a domain that already is in ASCII.\n      var domainArray = this.hostname.split('.');\n      var newOut = [];\n      for (var i = 0; i < domainArray.length; ++i) {\n        var s = domainArray[i];\n        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?\n            'xn--' + punycode.encode(s) : s);\n      }\n      this.hostname = newOut.join('.');\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  Object.keys(this).forEach(function(k) {\n    result[k] = this[k];\n  }, this);\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    Object.keys(relative).forEach(function(k) {\n      if (k !== 'protocol')\n        result[k] = relative[k];\n    });\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      Object.keys(relative).forEach(function(k) {\n        result[k] = relative[k];\n      });\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especialy happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!isNull(result.pathname) || !isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host) && (last === '.' || last === '..') ||\n      last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last == '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especialy happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!isNull(result.pathname) || !isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n\nfunction isString(arg) {\n  return typeof arg === \"string\";\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isNull(arg) {\n  return arg === null;\n}\nfunction isNullOrUndefined(arg) {\n  return  arg == null;\n}\n"]}