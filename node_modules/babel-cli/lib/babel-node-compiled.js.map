{"version":3,"sources":["babel-node.js"],"names":[],"mappings":"AAAA;;AAEA;;AAEA;;;;;AAKA,IAAI,aAAa,QAAQ,SAAR,CAAjB;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;;AAEA,IAAI,OAAO,CAAC,KAAK,IAAL,CAAU,SAAV,EAAqB,aAArB,CAAD,CAAX;;AAEA,IAAI,YAAY,QAAQ,IAAR,CAAa,KAAb,CAAmB,CAAnB,CAAhB;AACA,IAAI,WAAW,KAAK,CAApB;;AAEA;AACA,IAAI,eAAe,UAAU,OAAV,CAAkB,IAAlB,CAAnB;AACA,IAAI,eAAe,CAAC,CAApB,EAAuB;AACrB,aAAW,UAAU,KAAV,CAAgB,YAAhB,CAAX,CADqB,CACqB;AAC1C,cAAY,UAAU,KAAV,CAAgB,CAAhB,EAAmB,YAAnB,CAAZ;AACD;;AAED;;;;;AAKA,SAAS,mBAAT,CAA6B,GAA7B,EAAkC;AAChC,MAAI,UAAU,IAAI,KAAJ,CAAU,QAAV,CAAd;;AAEA,MAAI,OAAJ,EAAa;AACX,WAAO,OAAO,QAAQ,CAAR,EAAW,OAAX,CAAmB,IAAnB,EAAyB,GAAzB,CAAd;AACD;;AAED,SAAO,GAAP;AACD;;AAED,WAAW,UAAU,GAAV,EAAe,OAAf,EAAwB;AACjC,YAAU,OAAV,CAAkB,UAAU,GAAV,EAAe;AAC/B,QAAI,OAAO,IAAI,KAAJ,CAAU,GAAV,EAAe,CAAf,CAAX;;AAEA,YAAQ,IAAR;AACE,WAAK,IAAL;AACE,aAAK,OAAL,CAAa,SAAb;AACA;;AAEF,WAAK,OAAL;AACA,WAAK,SAAL;AACA,WAAK,aAAL;AACE,aAAK,OAAL,CAAa,GAAb;AACA;;AAEF,WAAK,KAAL;AACE,aAAK,OAAL,CAAa,aAAb;AACA;;AAEF,WAAK,WAAL;AACA,WAAK,UAAL;AACE,aAAK,OAAL,CAAa,IAAb;AACA;;AAEF;AACE,YAAI,QAAQ,OAAR,CAAgB,oBAAoB,IAApB,CAAhB,KAA8C,CAA9C,IAAmD,IAAI,OAAJ,CAAY,SAAZ,MAA2B,CAAlF,EAAqF;AACnF,eAAK,OAAL,CAAa,GAAb;AACD,SAFD,MAEO;AACL,eAAK,IAAL,CAAU,GAAV;AACD;AACD;AA1BJ;AA4BD,GA/BD;;AAiCA;AACA,MAAI,eAAe,CAAC,CAApB,EAAuB;AACrB,WAAO,KAAK,MAAL,CAAY,QAAZ,CAAP;AACD;;AAED,MAAI;AACF,QAAI,QAAQ,QAAQ,OAAR,CAAZ;AACA,UAAM,QAAQ,IAAR,CAAa,CAAb,CAAN,EAAuB,IAAvB;AACD,GAHD,CAGE,OAAO,GAAP,EAAY;AACZ,QAAI,IAAI,IAAJ,KAAa,kBAAjB,EAAqC,MAAM,GAAN;;AAErC,QAAI,gBAAgB,QAAQ,eAAR,CAApB;AACA,QAAI,OAAO,cAAc,KAAd,CAAoB,QAAQ,IAAR,CAAa,CAAb,CAApB,EAAqC,IAArC,EAA2C,EAAE,OAAO,SAAT,EAA3C,CAAX;AACA,SAAK,EAAL,CAAQ,MAAR,EAAgB,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtC,cAAQ,EAAR,CAAW,MAAX,EAAmB,YAAY;AAC7B,YAAI,MAAJ,EAAY;AACV,kBAAQ,IAAR,CAAa,QAAQ,GAArB,EAA0B,MAA1B;AACD,SAFD,MAEO;AACL,kBAAQ,IAAR,CAAa,IAAb;AACD;AACF,OAND;AAOD,KARD;AASD;AACF,CAzDD","file":"babel-node-compiled.js","sourcesContent":["\"use strict\";\n\n/* eslint indent: 0 */\n\n/**\n * This tiny wrapper file checks for known node flags and appends them\n * when found, before invoking the \"real\" _babel-node(1) executable.\n */\n\nvar getV8Flags = require(\"v8flags\");\nvar path = require(\"path\");\n\nvar args = [path.join(__dirname, \"_babel-node\")];\n\nvar babelArgs = process.argv.slice(2);\nvar userArgs = void 0;\n\n// separate node arguments from script arguments\nvar argSeparator = babelArgs.indexOf(\"--\");\nif (argSeparator > -1) {\n  userArgs = babelArgs.slice(argSeparator); // including the  --\n  babelArgs = babelArgs.slice(0, argSeparator);\n}\n\n/**\n * Replace dashes with underscores in the v8Flag name\n * Also ensure that if the arg contains a value (e.g. --arg=true)\n * that only the flag is returned.\n */\nfunction getNormalizedV8Flag(arg) {\n  var matches = arg.match(/--(.+)/);\n\n  if (matches) {\n    return \"--\" + matches[1].replace(/-/g, \"_\");\n  }\n\n  return arg;\n}\n\ngetV8Flags(function (err, v8Flags) {\n  babelArgs.forEach(function (arg) {\n    var flag = arg.split(\"=\")[0];\n\n    switch (flag) {\n      case \"-d\":\n        args.unshift(\"--debug\");\n        break;\n\n      case \"debug\":\n      case \"--debug\":\n      case \"--debug-brk\":\n        args.unshift(arg);\n        break;\n\n      case \"-gc\":\n        args.unshift(\"--expose-gc\");\n        break;\n\n      case \"--inspect\":\n      case \"--nolazy\":\n        args.unshift(flag);\n        break;\n\n      default:\n        if (v8Flags.indexOf(getNormalizedV8Flag(flag)) >= 0 || arg.indexOf(\"--trace\") === 0) {\n          args.unshift(arg);\n        } else {\n          args.push(arg);\n        }\n        break;\n    }\n  });\n\n  // append arguments passed after --\n  if (argSeparator > -1) {\n    args = args.concat(userArgs);\n  }\n\n  try {\n    var kexec = require(\"kexec\");\n    kexec(process.argv[0], args);\n  } catch (err) {\n    if (err.code !== \"MODULE_NOT_FOUND\") throw err;\n\n    var child_process = require(\"child_process\");\n    var proc = child_process.spawn(process.argv[0], args, { stdio: \"inherit\" });\n    proc.on(\"exit\", function (code, signal) {\n      process.on(\"exit\", function () {\n        if (signal) {\n          process.kill(process.pid, signal);\n        } else {\n          process.exit(code);\n        }\n      });\n    });\n  }\n});"]}