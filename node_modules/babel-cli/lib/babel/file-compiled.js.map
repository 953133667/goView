{"version":3,"sources":["file.js"],"names":[],"mappings":"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","file":"file-compiled.js","sourcesContent":["\"use strict\";\n\nvar _stringify = require(\"babel-runtime/core-js/json/stringify\");\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar convertSourceMap = require(\"convert-source-map\");\nvar pathExists = require(\"path-exists\");\nvar sourceMap = require(\"source-map\");\nvar slash = require(\"slash\");\nvar path = require(\"path\");\nvar util = require(\"./util\");\nvar fs = require(\"fs\");\nvar _ = require(\"lodash\");\n\nmodule.exports = function (commander, filenames, opts) {\n  if (commander.sourceMaps === \"inline\") {\n    opts.sourceMaps = true;\n  }\n\n  var results = [];\n\n  var buildResult = function buildResult() {\n    var map = new sourceMap.SourceMapGenerator({\n      file: path.basename(commander.outFile || \"\") || \"stdout\",\n      sourceRoot: opts.sourceRoot\n    });\n\n    var code = \"\";\n    var offset = 0;\n\n    _.each(results, function (result) {\n      var filename = result.filename || \"stdout\";\n      code += result.code + \"\\n\";\n\n      if (result.map) {\n        (function () {\n          var consumer = new sourceMap.SourceMapConsumer(result.map);\n\n          var sourceFilename = filename;\n          if (commander.outFile) {\n            sourceFilename = path.relative(path.dirname(commander.outFile), sourceFilename);\n          }\n          sourceFilename = slash(sourceFilename);\n\n          map._sources.add(sourceFilename);\n          map.setSourceContent(sourceFilename, result.actual);\n\n          consumer.eachMapping(function (mapping) {\n            map._mappings.add({\n              generatedLine: mapping.generatedLine + offset,\n              generatedColumn: mapping.generatedColumn,\n              originalLine: mapping.source == null ? null : mapping.originalLine,\n              originalColumn: mapping.source == null ? null : mapping.originalColumn,\n              source: mapping.source == null ? null : sourceFilename\n            });\n          });\n\n          offset = code.split(\"\\n\").length;\n        })();\n      }\n    });\n\n    // add the inline sourcemap comment if we've either explicitly asked for inline source\n    // maps, or we've requested them without any output file\n    if (commander.sourceMaps === \"inline\" || !commander.outFile && commander.sourceMaps) {\n      code += \"\\n\" + convertSourceMap.fromObject(map).toComment();\n    }\n\n    return {\n      map: map,\n      code: code\n    };\n  };\n\n  var output = function output() {\n    var result = buildResult();\n\n    if (commander.outFile) {\n      // we've requested for a sourcemap to be written to disk\n      if (commander.sourceMaps && commander.sourceMaps !== \"inline\") {\n        var mapLoc = commander.outFile + \".map\";\n        result.code = util.addSourceMappingUrl(result.code, mapLoc);\n        fs.writeFileSync(mapLoc, (0, _stringify2.default)(result.map));\n      }\n\n      fs.writeFileSync(commander.outFile, result.code);\n    } else {\n      process.stdout.write(result.code + \"\\n\");\n    }\n  };\n\n  var stdin = function stdin() {\n    var code = \"\";\n\n    process.stdin.setEncoding(\"utf8\");\n\n    process.stdin.on(\"readable\", function () {\n      var chunk = process.stdin.read();\n      if (chunk !== null) code += chunk;\n    });\n\n    process.stdin.on(\"end\", function () {\n      results.push(util.transform(commander.filename, code));\n      output();\n    });\n  };\n\n  var walk = function walk() {\n    var _filenames = [];\n    results = [];\n\n    _.each(filenames, function (filename) {\n      if (!pathExists.sync(filename)) return;\n\n      var stat = fs.statSync(filename);\n      if (stat.isDirectory()) {\n        (function () {\n          var dirname = filename;\n\n          _.each(util.readdirFilter(filename), function (filename) {\n            _filenames.push(path.join(dirname, filename));\n          });\n        })();\n      } else {\n        _filenames.push(filename);\n      }\n    });\n\n    _.each(_filenames, function (filename) {\n      if (util.shouldIgnore(filename)) return;\n\n      var data = util.compile(filename);\n      if (data.ignored) return;\n      results.push(data);\n    });\n\n    output();\n  };\n\n  var files = function files() {\n\n    if (!commander.skipInitialBuild) {\n      walk();\n    }\n\n    if (commander.watch) {\n      var chokidar = util.requireChokidar();\n      chokidar.watch(filenames, {\n        persistent: true,\n        ignoreInitial: true\n      }).on(\"all\", function (type, filename) {\n        if (util.shouldIgnore(filename) || !util.canCompile(filename, commander.extensions)) return;\n\n        if (type === \"add\" || type === \"change\") {\n          util.log(type + \" \" + filename);\n          try {\n            walk();\n          } catch (err) {\n            console.error(err.stack);\n          }\n        }\n      });\n    }\n  };\n\n  if (filenames.length) {\n    files();\n  } else {\n    stdin();\n  }\n};"]}