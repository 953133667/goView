{"version":3,"sources":["isFunction.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,YAAR,CAAf;;AAEA;AACA,IAAI,UAAU,mBAAd;AAAA,IACI,SAAS,4BADb;;AAGA;AACA,IAAI,cAAc,OAAO,SAAzB;;AAEA;;;;;AAKA,IAAI,iBAAiB,YAAY,QAAjC;;AAEA;;;;;;;;;;;;;;;;;;AAkBA,SAAS,UAAT,CAAoB,KAApB,EAA2B;AACzB;AACA;AACA;AACA,MAAI,MAAM,SAAS,KAAT,IAAkB,eAAe,IAAf,CAAoB,KAApB,CAAlB,GAA+C,EAAzD;AACA,SAAO,OAAO,OAAP,IAAkB,OAAO,MAAhC;AACD;;AAED,OAAO,OAAP,GAAiB,UAAjB","file":"isFunction-compiled.js","sourcesContent":["var isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified,\n *  else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8 which returns 'object' for typed array and weak map constructors,\n  // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\nmodule.exports = isFunction;\n"]}