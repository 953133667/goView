{"version":3,"sources":["findIndex.js"],"names":[],"mappings":"AAAA,IAAI,gBAAgB,QAAQ,kBAAR,CAApB;AAAA,IACI,eAAe,QAAQ,iBAAR,CADnB;AAAA,IAEI,YAAY,QAAQ,aAAR,CAFhB;;AAIA;AACA,IAAI,YAAY,KAAK,GAArB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,SAAS,SAAT,CAAmB,KAAnB,EAA0B,SAA1B,EAAqC,SAArC,EAAgD;AAC9C,MAAI,SAAS,QAAQ,MAAM,MAAd,GAAuB,CAApC;AACA,MAAI,CAAC,MAAL,EAAa;AACX,WAAO,CAAC,CAAR;AACD;AACD,MAAI,QAAQ,aAAa,IAAb,GAAoB,CAApB,GAAwB,UAAU,SAAV,CAApC;AACA,MAAI,QAAQ,CAAZ,EAAe;AACb,YAAQ,UAAU,SAAS,KAAnB,EAA0B,CAA1B,CAAR;AACD;AACD,SAAO,cAAc,KAAd,EAAqB,aAAa,SAAb,EAAwB,CAAxB,CAArB,EAAiD,KAAjD,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,SAAjB","file":"findIndex-compiled.js","sourcesContent":["var baseFindIndex = require('./_baseFindIndex'),\n    baseIteratee = require('./_baseIteratee'),\n    toInteger = require('./toInteger');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to search.\n * @param {Array|Function|Object|string} [predicate=_.identity]\n *  The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array ? array.length : 0;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\nmodule.exports = findIndex;\n"]}