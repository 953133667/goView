{"version":3,"sources":["toInteger.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,YAAR,CAAf;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,SAAS,SAAT,CAAmB,KAAnB,EAA0B;AACxB,MAAI,SAAS,SAAS,KAAT,CAAb;AAAA,MACI,YAAY,SAAS,CADzB;;AAGA,SAAO,WAAW,MAAX,GAAqB,YAAY,SAAS,SAArB,GAAiC,MAAtD,GAAgE,CAAvE;AACD;;AAED,OAAO,OAAP,GAAiB,SAAjB","file":"toInteger-compiled.js","sourcesContent":["var toFinite = require('./toFinite');\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nmodule.exports = toInteger;\n"]}