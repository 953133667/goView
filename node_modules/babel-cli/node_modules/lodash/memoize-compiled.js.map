{"version":3,"sources":["memoize.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,aAAR,CAAf;;AAEA;AACA,IAAI,kBAAkB,qBAAtB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA,SAAS,OAAT,CAAiB,IAAjB,EAAuB,QAAvB,EAAiC;AAC/B,MAAI,OAAO,IAAP,IAAe,UAAf,IAA8B,YAAY,OAAO,QAAP,IAAmB,UAAjE,EAA8E;AAC5E,UAAM,IAAI,SAAJ,CAAc,eAAd,CAAN;AACD;AACD,MAAI,WAAW,YAAW;AACxB,QAAI,OAAO,SAAX;AAAA,QACI,MAAM,WAAW,SAAS,KAAT,CAAe,IAAf,EAAqB,IAArB,CAAX,GAAwC,KAAK,CAAL,CADlD;AAAA,QAEI,QAAQ,SAAS,KAFrB;;AAIA,QAAI,MAAM,GAAN,CAAU,GAAV,CAAJ,EAAoB;AAClB,aAAO,MAAM,GAAN,CAAU,GAAV,CAAP;AACD;AACD,QAAI,SAAS,KAAK,KAAL,CAAW,IAAX,EAAiB,IAAjB,CAAb;AACA,aAAS,KAAT,GAAiB,MAAM,GAAN,CAAU,GAAV,EAAe,MAAf,CAAjB;AACA,WAAO,MAAP;AACD,GAXD;AAYA,WAAS,KAAT,GAAiB,KAAK,QAAQ,KAAR,IAAiB,QAAtB,GAAjB;AACA,SAAO,QAAP;AACD;;AAED;AACA,QAAQ,KAAR,GAAgB,QAAhB;;AAEA,OAAO,OAAP,GAAiB,OAAjB","file":"memoize-compiled.js","sourcesContent":["var MapCache = require('./_MapCache');\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\nmodule.exports = memoize;\n"]}