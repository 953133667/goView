{"version":3,"sources":["_arrayReduce.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;AAYA,SAAS,WAAT,CAAqB,KAArB,EAA4B,QAA5B,EAAsC,WAAtC,EAAmD,SAAnD,EAA8D;AAC5D,MAAI,QAAQ,CAAC,CAAb;AAAA,MACI,SAAS,QAAQ,MAAM,MAAd,GAAuB,CADpC;;AAGA,MAAI,aAAa,MAAjB,EAAyB;AACvB,kBAAc,MAAM,EAAE,KAAR,CAAd;AACD;AACD,SAAO,EAAE,KAAF,GAAU,MAAjB,EAAyB;AACvB,kBAAc,SAAS,WAAT,EAAsB,MAAM,KAAN,CAAtB,EAAoC,KAApC,EAA2C,KAA3C,CAAd;AACD;AACD,SAAO,WAAP;AACD;;AAED,OAAO,OAAP,GAAiB,WAAjB","file":"_arrayReduce-compiled.js","sourcesContent":["/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayReduce;\n"]}