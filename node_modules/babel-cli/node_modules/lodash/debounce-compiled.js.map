{"version":3,"sources":["debounce.js"],"names":[],"mappings":"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","file":"debounce-compiled.js","sourcesContent":["var isObject = require('./isObject'),\n    now = require('./now'),\n    toNumber = require('./toNumber');\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide an options object to indicate whether `func` should be invoked on\n * the leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent calls\n * to the debounced function return the result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked\n * on the trailing edge of the timeout only if the debounced function is\n * invoked more than once during the `wait` timeout.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nmodule.exports = debounce;\n"]}