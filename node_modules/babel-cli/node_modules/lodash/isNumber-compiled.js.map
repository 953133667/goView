{"version":3,"sources":["isNumber.js"],"names":[],"mappings":"AAAA,IAAI,eAAe,QAAQ,gBAAR,CAAnB;;AAEA;AACA,IAAI,YAAY,iBAAhB;;AAEA;AACA,IAAI,cAAc,OAAO,SAAzB;;AAEA;;;;;AAKA,IAAI,iBAAiB,YAAY,QAAjC;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,SAAS,QAAT,CAAkB,KAAlB,EAAyB;AACvB,SAAO,OAAO,KAAP,IAAgB,QAAhB,IACJ,aAAa,KAAb,KAAuB,eAAe,IAAf,CAAoB,KAApB,KAA8B,SADxD;AAED;;AAED,OAAO,OAAP,GAAiB,QAAjB","file":"isNumber-compiled.js","sourcesContent":["var isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar numberTag = '[object Number]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/**\n * Checks if `value` is classified as a `Number` primitive or object.\n *\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n * classified as numbers, use the `_.isFinite` method.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified,\n *  else `false`.\n * @example\n *\n * _.isNumber(3);\n * // => true\n *\n * _.isNumber(Number.MIN_VALUE);\n * // => true\n *\n * _.isNumber(Infinity);\n * // => true\n *\n * _.isNumber('3');\n * // => false\n */\nfunction isNumber(value) {\n  return typeof value == 'number' ||\n    (isObjectLike(value) && objectToString.call(value) == numberTag);\n}\n\nmodule.exports = isNumber;\n"]}