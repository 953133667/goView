{"version":3,"sources":["mapKeys.js"],"names":[],"mappings":"AAAA,IAAI,aAAa,QAAQ,eAAR,CAAjB;AAAA,IACI,eAAe,QAAQ,iBAAR,CADnB;;AAGA;;;;;;;;;;;;;;;;;;;;;;AAsBA,SAAS,OAAT,CAAiB,MAAjB,EAAyB,QAAzB,EAAmC;AACjC,MAAI,SAAS,EAAb;AACA,aAAW,aAAa,QAAb,EAAuB,CAAvB,CAAX;;AAEA,aAAW,MAAX,EAAmB,UAAS,KAAT,EAAgB,GAAhB,EAAqB,MAArB,EAA6B;AAC9C,WAAO,SAAS,KAAT,EAAgB,GAAhB,EAAqB,MAArB,CAAP,IAAuC,KAAvC;AACD,GAFD;AAGA,SAAO,MAAP;AACD;;AAED,OAAO,OAAP,GAAiB,OAAjB","file":"mapKeys-compiled.js","sourcesContent":["var baseForOwn = require('./_baseForOwn'),\n    baseIteratee = require('./_baseIteratee');\n\n/**\n * The opposite of `_.mapValues`; this method creates an object with the\n * same values as `object` and keys generated by running each own enumerable\n * string keyed property of `object` thru `iteratee`. The iteratee is invoked\n * with three arguments: (value, key, object).\n *\n * @static\n * @memberOf _\n * @since 3.8.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Array|Function|Object|string} [iteratee=_.identity]\n *  The function invoked per iteration.\n * @returns {Object} Returns the new mapped object.\n * @see _.mapValues\n * @example\n *\n * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n *   return key + value;\n * });\n * // => { 'a1': 1, 'b2': 2 }\n */\nfunction mapKeys(object, iteratee) {\n  var result = {};\n  iteratee = baseIteratee(iteratee, 3);\n\n  baseForOwn(object, function(value, key, object) {\n    result[iteratee(value, key, object)] = value;\n  });\n  return result;\n}\n\nmodule.exports = mapKeys;\n"]}