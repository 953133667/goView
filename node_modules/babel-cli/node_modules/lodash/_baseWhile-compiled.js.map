{"version":3,"sources":["_baseWhile.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,cAAR,CAAhB;;AAEA;;;;;;;;;;;AAWA,SAAS,SAAT,CAAmB,KAAnB,EAA0B,SAA1B,EAAqC,MAArC,EAA6C,SAA7C,EAAwD;AACtD,MAAI,SAAS,MAAM,MAAnB;AAAA,MACI,QAAQ,YAAY,MAAZ,GAAqB,CAAC,CADlC;;AAGA,SAAO,CAAC,YAAY,OAAZ,GAAsB,EAAE,KAAF,GAAU,MAAjC,KACL,UAAU,MAAM,KAAN,CAAV,EAAwB,KAAxB,EAA+B,KAA/B,CADF,EACyC,CAAE;;AAE3C,SAAO,SACH,UAAU,KAAV,EAAkB,YAAY,CAAZ,GAAgB,KAAlC,EAA2C,YAAY,QAAQ,CAApB,GAAwB,MAAnE,CADG,GAEH,UAAU,KAAV,EAAkB,YAAY,QAAQ,CAApB,GAAwB,CAA1C,EAA+C,YAAY,MAAZ,GAAqB,KAApE,CAFJ;AAGD;;AAED,OAAO,OAAP,GAAiB,SAAjB","file":"_baseWhile-compiled.js","sourcesContent":["var baseSlice = require('./_baseSlice');\n\n/**\n * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n * without support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to query.\n * @param {Function} predicate The function invoked per iteration.\n * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseWhile(array, predicate, isDrop, fromRight) {\n  var length = array.length,\n      index = fromRight ? length : -1;\n\n  while ((fromRight ? index-- : ++index < length) &&\n    predicate(array[index], index, array)) {}\n\n  return isDrop\n    ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n    : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n}\n\nmodule.exports = baseWhile;\n"]}