{"version":3,"sources":["split.js"],"names":[],"mappings":"AAAA,IAAI,eAAe,QAAQ,iBAAR,CAAnB;AAAA,IACI,YAAY,QAAQ,cAAR,CADhB;AAAA,IAEI,iBAAiB,QAAQ,mBAAR,CAFrB;AAAA,IAGI,WAAW,QAAQ,YAAR,CAHf;AAAA,IAII,qBAAqB,QAAQ,uBAAR,CAJzB;AAAA,IAKI,gBAAgB,QAAQ,kBAAR,CALpB;AAAA,IAMI,WAAW,QAAQ,YAAR,CANf;;AAQA;AACA,IAAI,mBAAmB,UAAvB;;AAEA;AACA,IAAI,cAAc,OAAO,SAAzB;;AAEA;AACA,IAAI,cAAc,YAAY,KAA9B;;AAEA;;;;;;;;;;;;;;;;;;;AAmBA,SAAS,KAAT,CAAe,MAAf,EAAuB,SAAvB,EAAkC,KAAlC,EAAyC;AACvC,MAAI,SAAS,OAAO,KAAP,IAAgB,QAAzB,IAAqC,eAAe,MAAf,EAAuB,SAAvB,EAAkC,KAAlC,CAAzC,EAAmF;AACjF,gBAAY,QAAQ,SAApB;AACD;AACD,UAAQ,UAAU,SAAV,GAAsB,gBAAtB,GAAyC,UAAU,CAA3D;AACA,MAAI,CAAC,KAAL,EAAY;AACV,WAAO,EAAP;AACD;AACD,WAAS,SAAS,MAAT,CAAT;AACA,MAAI,WACE,OAAO,SAAP,IAAoB,QAApB,IACC,aAAa,IAAb,IAAqB,CAAC,SAAS,SAAT,CAFzB,CAAJ,EAGO;AACL,gBAAY,aAAa,SAAb,CAAZ;AACA,QAAI,aAAa,EAAb,IAAmB,mBAAmB,IAAnB,CAAwB,MAAxB,CAAvB,EAAwD;AACtD,aAAO,UAAU,cAAc,MAAd,CAAV,EAAiC,CAAjC,EAAoC,KAApC,CAAP;AACD;AACF;AACD,SAAO,YAAY,IAAZ,CAAiB,MAAjB,EAAyB,SAAzB,EAAoC,KAApC,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,KAAjB","file":"split-compiled.js","sourcesContent":["var baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    isIterateeCall = require('./_isIterateeCall'),\n    isRegExp = require('./isRegExp'),\n    reHasComplexSymbol = require('./_reHasComplexSymbol'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/** Used for built-in method references. */\nvar stringProto = String.prototype;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeSplit = stringProto.split;\n\n/**\n * Splits `string` by `separator`.\n *\n * **Note:** This method is based on\n * [`String#split`](https://mdn.io/String/split).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to split.\n * @param {RegExp|string} separator The separator pattern to split by.\n * @param {number} [limit] The length to truncate results to.\n * @returns {Array} Returns the string segments.\n * @example\n *\n * _.split('a-b-c', '-', 2);\n * // => ['a', 'b']\n */\nfunction split(string, separator, limit) {\n  if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n    separator = limit = undefined;\n  }\n  limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n  if (!limit) {\n    return [];\n  }\n  string = toString(string);\n  if (string && (\n        typeof separator == 'string' ||\n        (separator != null && !isRegExp(separator))\n      )) {\n    separator = baseToString(separator);\n    if (separator == '' && reHasComplexSymbol.test(string)) {\n      return castSlice(stringToArray(string), 0, limit);\n    }\n  }\n  return nativeSplit.call(string, separator, limit);\n}\n\nmodule.exports = split;\n"]}