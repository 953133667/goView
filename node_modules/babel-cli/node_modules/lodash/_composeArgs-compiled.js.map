{"version":3,"sources":["_composeArgs.js"],"names":[],"mappings":"AAAA;AACA,IAAI,YAAY,KAAK,GAArB;;AAEA;;;;;;;;;;;AAWA,SAAS,WAAT,CAAqB,IAArB,EAA2B,QAA3B,EAAqC,OAArC,EAA8C,SAA9C,EAAyD;AACvD,MAAI,YAAY,CAAC,CAAjB;AAAA,MACI,aAAa,KAAK,MADtB;AAAA,MAEI,gBAAgB,QAAQ,MAF5B;AAAA,MAGI,YAAY,CAAC,CAHjB;AAAA,MAII,aAAa,SAAS,MAJ1B;AAAA,MAKI,cAAc,UAAU,aAAa,aAAvB,EAAsC,CAAtC,CALlB;AAAA,MAMI,SAAS,MAAM,aAAa,WAAnB,CANb;AAAA,MAOI,cAAc,CAAC,SAPnB;;AASA,SAAO,EAAE,SAAF,GAAc,UAArB,EAAiC;AAC/B,WAAO,SAAP,IAAoB,SAAS,SAAT,CAApB;AACD;AACD,SAAO,EAAE,SAAF,GAAc,aAArB,EAAoC;AAClC,QAAI,eAAe,YAAY,UAA/B,EAA2C;AACzC,aAAO,QAAQ,SAAR,CAAP,IAA6B,KAAK,SAAL,CAA7B;AACD;AACF;AACD,SAAO,aAAP,EAAsB;AACpB,WAAO,WAAP,IAAsB,KAAK,WAAL,CAAtB;AACD;AACD,SAAO,MAAP;AACD;;AAED,OAAO,OAAP,GAAiB,WAAjB","file":"_composeArgs-compiled.js","sourcesContent":["/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Creates an array that is the composition of partially applied arguments,\n * placeholders, and provided arguments into a single array of arguments.\n *\n * @private\n * @param {Array} args The provided arguments.\n * @param {Array} partials The arguments to prepend to those provided.\n * @param {Array} holders The `partials` placeholder indexes.\n * @params {boolean} [isCurried] Specify composing for a curried function.\n * @returns {Array} Returns the new array of composed arguments.\n */\nfunction composeArgs(args, partials, holders, isCurried) {\n  var argsIndex = -1,\n      argsLength = args.length,\n      holdersLength = holders.length,\n      leftIndex = -1,\n      leftLength = partials.length,\n      rangeLength = nativeMax(argsLength - holdersLength, 0),\n      result = Array(leftLength + rangeLength),\n      isUncurried = !isCurried;\n\n  while (++leftIndex < leftLength) {\n    result[leftIndex] = partials[leftIndex];\n  }\n  while (++argsIndex < holdersLength) {\n    if (isUncurried || argsIndex < argsLength) {\n      result[holders[argsIndex]] = args[argsIndex];\n    }\n  }\n  while (rangeLength--) {\n    result[leftIndex++] = args[argsIndex++];\n  }\n  return result;\n}\n\nmodule.exports = composeArgs;\n"]}