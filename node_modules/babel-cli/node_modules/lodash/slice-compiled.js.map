{"version":3,"sources":["slice.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,cAAR,CAAhB;AAAA,IACI,iBAAiB,QAAQ,mBAAR,CADrB;AAAA,IAEI,YAAY,QAAQ,aAAR,CAFhB;;AAIA;;;;;;;;;;;;;;;;AAgBA,SAAS,KAAT,CAAe,KAAf,EAAsB,KAAtB,EAA6B,GAA7B,EAAkC;AAChC,MAAI,SAAS,QAAQ,MAAM,MAAd,GAAuB,CAApC;AACA,MAAI,CAAC,MAAL,EAAa;AACX,WAAO,EAAP;AACD;AACD,MAAI,OAAO,OAAO,GAAP,IAAc,QAArB,IAAiC,eAAe,KAAf,EAAsB,KAAtB,EAA6B,GAA7B,CAArC,EAAwE;AACtE,YAAQ,CAAR;AACA,UAAM,MAAN;AACD,GAHD,MAIK;AACH,YAAQ,SAAS,IAAT,GAAgB,CAAhB,GAAoB,UAAU,KAAV,CAA5B;AACA,UAAM,QAAQ,SAAR,GAAoB,MAApB,GAA6B,UAAU,GAAV,CAAnC;AACD;AACD,SAAO,UAAU,KAAV,EAAiB,KAAjB,EAAwB,GAAxB,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,KAAjB","file":"slice-compiled.js","sourcesContent":["var baseSlice = require('./_baseSlice'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toInteger = require('./toInteger');\n\n/**\n * Creates a slice of `array` from `start` up to, but not including, `end`.\n *\n * **Note:** This method is used instead of\n * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n * returned.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction slice(array, start, end) {\n  var length = array ? array.length : 0;\n  if (!length) {\n    return [];\n  }\n  if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n    start = 0;\n    end = length;\n  }\n  else {\n    start = start == null ? 0 : toInteger(start);\n    end = end === undefined ? length : toInteger(end);\n  }\n  return baseSlice(array, start, end);\n}\n\nmodule.exports = slice;\n"]}