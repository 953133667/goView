{"version":3,"sources":["_stackSet.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,cAAR,CAAhB;AAAA,IACI,WAAW,QAAQ,aAAR,CADf;;AAGA;AACA,IAAI,mBAAmB,GAAvB;;AAEA;;;;;;;;;;AAUA,SAAS,QAAT,CAAkB,GAAlB,EAAuB,KAAvB,EAA8B;AAC5B,MAAI,QAAQ,KAAK,QAAjB;AACA,MAAI,iBAAiB,SAAjB,IAA8B,MAAM,QAAN,CAAe,MAAf,IAAyB,gBAA3D,EAA6E;AAC3E,YAAQ,KAAK,QAAL,GAAgB,IAAI,QAAJ,CAAa,MAAM,QAAnB,CAAxB;AACD;AACD,QAAM,GAAN,CAAU,GAAV,EAAe,KAAf;AACA,SAAO,IAAP;AACD;;AAED,OAAO,OAAP,GAAiB,QAAjB","file":"_stackSet-compiled.js","sourcesContent":["var ListCache = require('./_ListCache'),\n    MapCache = require('./_MapCache');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache && cache.__data__.length == LARGE_ARRAY_SIZE) {\n    cache = this.__data__ = new MapCache(cache.__data__);\n  }\n  cache.set(key, value);\n  return this;\n}\n\nmodule.exports = stackSet;\n"]}