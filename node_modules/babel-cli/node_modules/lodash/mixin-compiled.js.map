{"version":3,"sources":["mixin.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,cAAR,CAAhB;AAAA,IACI,YAAY,QAAQ,cAAR,CADhB;AAAA,IAEI,gBAAgB,QAAQ,kBAAR,CAFpB;AAAA,IAGI,YAAY,QAAQ,cAAR,CAHhB;AAAA,IAII,aAAa,QAAQ,cAAR,CAJjB;AAAA,IAKI,WAAW,QAAQ,YAAR,CALf;AAAA,IAMI,OAAO,QAAQ,QAAR,CANX;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,SAAS,KAAT,CAAe,MAAf,EAAuB,MAAvB,EAA+B,OAA/B,EAAwC;AACtC,MAAI,QAAQ,KAAK,MAAL,CAAZ;AAAA,MACI,cAAc,cAAc,MAAd,EAAsB,KAAtB,CADlB;;AAGA,MAAI,QAAQ,EAAE,SAAS,OAAT,KAAqB,WAAW,OAAlC,KAA8C,CAAC,CAAC,QAAQ,KAApE;AAAA,MACI,SAAS,WAAW,MAAX,CADb;;AAGA,YAAU,WAAV,EAAuB,UAAS,UAAT,EAAqB;AAC1C,QAAI,OAAO,OAAO,UAAP,CAAX;AACA,WAAO,UAAP,IAAqB,IAArB;AACA,QAAI,MAAJ,EAAY;AACV,aAAO,SAAP,CAAiB,UAAjB,IAA+B,YAAW;AACxC,YAAI,WAAW,KAAK,SAApB;AACA,YAAI,SAAS,QAAb,EAAuB;AACrB,cAAI,SAAS,OAAO,KAAK,WAAZ,CAAb;AAAA,cACI,UAAU,OAAO,WAAP,GAAqB,UAAU,KAAK,WAAf,CADnC;;AAGA,kBAAQ,IAAR,CAAa,EAAE,QAAQ,IAAV,EAAgB,QAAQ,SAAxB,EAAmC,WAAW,MAA9C,EAAb;AACA,iBAAO,SAAP,GAAmB,QAAnB;AACA,iBAAO,MAAP;AACD;AACD,eAAO,KAAK,KAAL,CAAW,MAAX,EAAmB,UAAU,CAAC,KAAK,KAAL,EAAD,CAAV,EAA0B,SAA1B,CAAnB,CAAP;AACD,OAXD;AAYD;AACF,GAjBD;;AAmBA,SAAO,MAAP;AACD;;AAED,OAAO,OAAP,GAAiB,KAAjB","file":"mixin-compiled.js","sourcesContent":["var arrayEach = require('./_arrayEach'),\n    arrayPush = require('./_arrayPush'),\n    baseFunctions = require('./_baseFunctions'),\n    copyArray = require('./_copyArray'),\n    isFunction = require('./isFunction'),\n    isObject = require('./isObject'),\n    keys = require('./keys');\n\n/**\n * Adds all own enumerable string keyed function properties of a source\n * object to the destination object. If `object` is a function, then methods\n * are added to its prototype as well.\n *\n * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n * avoid conflicts caused by modifying the original.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {Function|Object} [object=lodash] The destination object.\n * @param {Object} source The object of functions to add.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\n * @returns {Function|Object} Returns `object`.\n * @example\n *\n * function vowels(string) {\n *   return _.filter(string, function(v) {\n *     return /[aeiou]/i.test(v);\n *   });\n * }\n *\n * _.mixin({ 'vowels': vowels });\n * _.vowels('fred');\n * // => ['e']\n *\n * _('fred').vowels().value();\n * // => ['e']\n *\n * _.mixin({ 'vowels': vowels }, { 'chain': false });\n * _('fred').vowels();\n * // => ['e']\n */\nfunction mixin(object, source, options) {\n  var props = keys(source),\n      methodNames = baseFunctions(source, props);\n\n  var chain = !(isObject(options) && 'chain' in options) || !!options.chain,\n      isFunc = isFunction(object);\n\n  arrayEach(methodNames, function(methodName) {\n    var func = source[methodName];\n    object[methodName] = func;\n    if (isFunc) {\n      object.prototype[methodName] = function() {\n        var chainAll = this.__chain__;\n        if (chain || chainAll) {\n          var result = object(this.__wrapped__),\n              actions = result.__actions__ = copyArray(this.__actions__);\n\n          actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n          result.__chain__ = chainAll;\n          return result;\n        }\n        return func.apply(object, arrayPush([this.value()], arguments));\n      };\n    }\n  });\n\n  return object;\n}\n\nmodule.exports = mixin;\n"]}