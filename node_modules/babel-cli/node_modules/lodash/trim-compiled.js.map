{"version":3,"sources":["trim.js"],"names":[],"mappings":"AAAA,IAAI,eAAe,QAAQ,iBAAR,CAAnB;AAAA,IACI,YAAY,QAAQ,cAAR,CADhB;AAAA,IAEI,gBAAgB,QAAQ,kBAAR,CAFpB;AAAA,IAGI,kBAAkB,QAAQ,oBAAR,CAHtB;AAAA,IAII,gBAAgB,QAAQ,kBAAR,CAJpB;AAAA,IAKI,WAAW,QAAQ,YAAR,CALf;;AAOA;AACA,IAAI,SAAS,YAAb;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBA,SAAS,IAAT,CAAc,MAAd,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC;AAClC,WAAS,SAAS,MAAT,CAAT;AACA,MAAI,WAAW,SAAS,UAAU,SAA9B,CAAJ,EAA8C;AAC5C,WAAO,OAAO,OAAP,CAAe,MAAf,EAAuB,EAAvB,CAAP;AACD;AACD,MAAI,CAAC,MAAD,IAAW,EAAE,QAAQ,aAAa,KAAb,CAAV,CAAf,EAA+C;AAC7C,WAAO,MAAP;AACD;AACD,MAAI,aAAa,cAAc,MAAd,CAAjB;AAAA,MACI,aAAa,cAAc,KAAd,CADjB;AAAA,MAEI,QAAQ,gBAAgB,UAAhB,EAA4B,UAA5B,CAFZ;AAAA,MAGI,MAAM,cAAc,UAAd,EAA0B,UAA1B,IAAwC,CAHlD;;AAKA,SAAO,UAAU,UAAV,EAAsB,KAAtB,EAA6B,GAA7B,EAAkC,IAAlC,CAAuC,EAAvC,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,IAAjB","file":"trim-compiled.js","sourcesContent":["var baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    charsEndIndex = require('./_charsEndIndex'),\n    charsStartIndex = require('./_charsStartIndex'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/**\n * Removes leading and trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trim('  abc  ');\n * // => 'abc'\n *\n * _.trim('-_-abc-_-', '_-');\n * // => 'abc'\n *\n * _.map(['  foo  ', '  bar  '], _.trim);\n * // => ['foo', 'bar']\n */\nfunction trim(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return string.replace(reTrim, '');\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      chrSymbols = stringToArray(chars),\n      start = charsStartIndex(strSymbols, chrSymbols),\n      end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n  return castSlice(strSymbols, start, end).join('');\n}\n\nmodule.exports = trim;\n"]}