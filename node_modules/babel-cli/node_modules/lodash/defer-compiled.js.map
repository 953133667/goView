{"version":3,"sources":["defer.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,cAAR,CAAhB;AAAA,IACI,OAAO,QAAQ,QAAR,CADX;;AAGA;;;;;;;;;;;;;;;;;;AAkBA,IAAI,QAAQ,KAAK,UAAS,IAAT,EAAe,IAAf,EAAqB;AACpC,SAAO,UAAU,IAAV,EAAgB,CAAhB,EAAmB,IAAnB,CAAP;AACD,CAFW,CAAZ;;AAIA,OAAO,OAAP,GAAiB,KAAjB","file":"defer-compiled.js","sourcesContent":["var baseDelay = require('./_baseDelay'),\n    rest = require('./rest');\n\n/**\n * Defers invoking the `func` until the current call stack has cleared. Any\n * additional arguments are provided to `func` when it's invoked.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to defer.\n * @param {...*} [args] The arguments to invoke `func` with.\n * @returns {number} Returns the timer id.\n * @example\n *\n * _.defer(function(text) {\n *   console.log(text);\n * }, 'deferred');\n * // => Logs 'deferred' after one or more milliseconds.\n */\nvar defer = rest(function(func, args) {\n  return baseDelay(func, 1, args);\n});\n\nmodule.exports = defer;\n"]}