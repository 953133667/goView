{"version":3,"sources":["isEqualWith.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,gBAAR,CAAlB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,SAAS,WAAT,CAAqB,KAArB,EAA4B,KAA5B,EAAmC,UAAnC,EAA+C;AAC7C,eAAa,OAAO,UAAP,IAAqB,UAArB,GAAkC,UAAlC,GAA+C,SAA5D;AACA,MAAI,SAAS,aAAa,WAAW,KAAX,EAAkB,KAAlB,CAAb,GAAwC,SAArD;AACA,SAAO,WAAW,SAAX,GAAuB,YAAY,KAAZ,EAAmB,KAAnB,EAA0B,UAA1B,CAAvB,GAA+D,CAAC,CAAC,MAAxE;AACD;;AAED,OAAO,OAAP,GAAiB,WAAjB","file":"isEqualWith-compiled.js","sourcesContent":["var baseIsEqual = require('./_baseIsEqual');\n\n/**\n * This method is like `_.isEqual` except that it accepts `customizer` which\n * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n * are handled by the method instead. The `customizer` is invoked with up to\n * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if the values are equivalent,\n *  else `false`.\n * @example\n *\n * function isGreeting(value) {\n *   return /^h(?:i|ello)$/.test(value);\n * }\n *\n * function customizer(objValue, othValue) {\n *   if (isGreeting(objValue) && isGreeting(othValue)) {\n *     return true;\n *   }\n * }\n *\n * var array = ['hello', 'goodbye'];\n * var other = ['hi', 'goodbye'];\n *\n * _.isEqualWith(array, other, customizer);\n * // => true\n */\nfunction isEqualWith(value, other, customizer) {\n  customizer = typeof customizer == 'function' ? customizer : undefined;\n  var result = customizer ? customizer(value, other) : undefined;\n  return result === undefined ? baseIsEqual(value, other, customizer) : !!result;\n}\n\nmodule.exports = isEqualWith;\n"]}