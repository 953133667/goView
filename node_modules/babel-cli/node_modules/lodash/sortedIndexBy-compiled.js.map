{"version":3,"sources":["sortedIndexBy.js"],"names":[],"mappings":"AAAA,IAAI,eAAe,QAAQ,iBAAR,CAAnB;AAAA,IACI,oBAAoB,QAAQ,sBAAR,CADxB;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,SAAS,aAAT,CAAuB,KAAvB,EAA8B,KAA9B,EAAqC,QAArC,EAA+C;AAC7C,SAAO,kBAAkB,KAAlB,EAAyB,KAAzB,EAAgC,aAAa,QAAb,CAAhC,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,aAAjB","file":"sortedIndexBy-compiled.js","sourcesContent":["var baseIteratee = require('./_baseIteratee'),\n    baseSortedIndexBy = require('./_baseSortedIndexBy');\n\n/**\n * This method is like `_.sortedIndex` except that it accepts `iteratee`\n * which is invoked for `value` and each element of `array` to compute their\n * sort ranking. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The sorted array to inspect.\n * @param {*} value The value to evaluate.\n * @param {Array|Function|Object|string} [iteratee=_.identity]\n *  The iteratee invoked per element.\n * @returns {number} Returns the index at which `value` should be inserted\n *  into `array`.\n * @example\n *\n * var objects = [{ 'x': 4 }, { 'x': 5 }];\n *\n * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.sortedIndexBy(objects, { 'x': 4 }, 'x');\n * // => 0\n */\nfunction sortedIndexBy(array, value, iteratee) {\n  return baseSortedIndexBy(array, value, baseIteratee(iteratee));\n}\n\nmodule.exports = sortedIndexBy;\n"]}