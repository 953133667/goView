{"version":3,"sources":["flattenDepth.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,gBAAR,CAAlB;AAAA,IACI,YAAY,QAAQ,aAAR,CADhB;;AAGA;;;;;;;;;;;;;;;;;;;;AAoBA,SAAS,YAAT,CAAsB,KAAtB,EAA6B,KAA7B,EAAoC;AAClC,MAAI,SAAS,QAAQ,MAAM,MAAd,GAAuB,CAApC;AACA,MAAI,CAAC,MAAL,EAAa;AACX,WAAO,EAAP;AACD;AACD,UAAQ,UAAU,SAAV,GAAsB,CAAtB,GAA0B,UAAU,KAAV,CAAlC;AACA,SAAO,YAAY,KAAZ,EAAmB,KAAnB,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,YAAjB","file":"flattenDepth-compiled.js","sourcesContent":["var baseFlatten = require('./_baseFlatten'),\n    toInteger = require('./toInteger');\n\n/**\n * Recursively flatten `array` up to `depth` times.\n *\n * @static\n * @memberOf _\n * @since 4.4.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @param {number} [depth=1] The maximum recursion depth.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * var array = [1, [2, [3, [4]], 5]];\n *\n * _.flattenDepth(array, 1);\n * // => [1, 2, [3, [4]], 5]\n *\n * _.flattenDepth(array, 2);\n * // => [1, 2, 3, [4], 5]\n */\nfunction flattenDepth(array, depth) {\n  var length = array ? array.length : 0;\n  if (!length) {\n    return [];\n  }\n  depth = depth === undefined ? 1 : toInteger(depth);\n  return baseFlatten(array, depth);\n}\n\nmodule.exports = flattenDepth;\n"]}