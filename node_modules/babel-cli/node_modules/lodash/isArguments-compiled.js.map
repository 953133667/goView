{"version":3,"sources":["isArguments.js"],"names":[],"mappings":"AAAA,IAAI,oBAAoB,QAAQ,qBAAR,CAAxB;;AAEA;AACA,IAAI,UAAU,oBAAd;;AAEA;AACA,IAAI,cAAc,OAAO,SAAzB;;AAEA;AACA,IAAI,iBAAiB,YAAY,cAAjC;;AAEA;;;;;AAKA,IAAI,iBAAiB,YAAY,QAAjC;;AAEA;AACA,IAAI,uBAAuB,YAAY,oBAAvC;;AAEA;;;;;;;;;;;;;;;;;;AAkBA,SAAS,WAAT,CAAqB,KAArB,EAA4B;AAC1B;AACA,SAAO,kBAAkB,KAAlB,KAA4B,eAAe,IAAf,CAAoB,KAApB,EAA2B,QAA3B,CAA5B,KACJ,CAAC,qBAAqB,IAArB,CAA0B,KAA1B,EAAiC,QAAjC,CAAD,IAA+C,eAAe,IAAf,CAAoB,KAApB,KAA8B,OADzE,CAAP;AAED;;AAED,OAAO,OAAP,GAAiB,WAAjB","file":"isArguments-compiled.js","sourcesContent":["var isArrayLikeObject = require('./isArrayLikeObject');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\nmodule.exports = isArguments;\n"]}