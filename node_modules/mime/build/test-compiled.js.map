{"version":3,"sources":["test.js"],"names":[],"mappings":"AAAA;;;;AAIA,IAAI,OAAO,QAAQ,SAAR,CAAX;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;;AAEA;AACA;AACA;;AAEA,OAAO,KAAP,CAAa,YAAb,EAA2B,KAAK,MAAL,CAAY,UAAZ,CAA3B,E,CAAyD;AACzD,OAAO,KAAP,CAAa,YAAb,EAA2B,KAAK,MAAL,CAAY,UAAZ,CAA3B,E,CAAyD;AACzD,OAAO,KAAP,CAAa,YAAb,EAA2B,KAAK,MAAL,CAAY,cAAZ,CAA3B,E,CAAyD;AACzD,OAAO,KAAP,CAAa,YAAb,EAA2B,KAAK,MAAL,CAAY,WAAZ,CAA3B,E,CAAyD;AACzD,OAAO,KAAP,CAAa,YAAb,EAA2B,KAAK,MAAL,CAAY,MAAZ,CAA3B,E,CAAyD;AACzD,OAAO,KAAP,CAAa,YAAb,EAA2B,KAAK,MAAL,CAAY,KAAZ,CAA3B,E,CAAyD;AACzD,OAAO,KAAP,CAAa,YAAb,EAA2B,KAAK,MAAL,CAAY,MAAZ,CAA3B,E,CAAyD;AACzD,OAAO,KAAP,CAAa,YAAb,EAA2B,KAAK,MAAL,CAAY,OAAZ,CAA3B,E,CAAyD;AACzD,OAAO,KAAP,CAAa,0BAAb,EAAyC,KAAK,MAAL,CAAY,WAAZ,CAAzC,E,CAAoE;AACpE,OAAO,KAAP,CAAa,UAAb,EAAyB,KAAK,MAAL,CAAY,eAAZ,EAA6B,UAA7B,CAAzB,E,CAAoE;;AAEpE;AACA;AACA;;AAEA,OAAO,KAAP,CAAa,KAAb,EAAoB,KAAK,SAAL,CAAe,KAAK,KAAL,CAAW,IAA1B,CAApB;AACA,OAAO,KAAP,CAAa,MAAb,EAAqB,KAAK,SAAL,CAAe,KAAK,KAAL,CAAW,GAA1B,CAArB;AACA,OAAO,KAAP,CAAa,KAAb,EAAoB,KAAK,SAAL,CAAe,0BAAf,CAApB;AACA,OAAO,KAAP,CAAa,KAAb,EAAoB,KAAK,SAAL,CAAe,2BAAf,CAApB;AACA,OAAO,KAAP,CAAa,MAAb,EAAqB,KAAK,SAAL,CAAe,2BAAf,CAArB;AACA,OAAO,KAAP,CAAa,MAAb,EAAqB,KAAK,SAAL,CAAe,2BAAf,CAArB;AACA,OAAO,KAAP,CAAa,MAAb,EAAqB,KAAK,SAAL,CAAe,0BAAf,CAArB;AACA,OAAO,KAAP,CAAa,MAAb,EAAqB,KAAK,SAAL,CAAe,2BAAf,CAArB;AACA,OAAO,KAAP,CAAa,MAAb,EAAqB,KAAK,SAAL,CAAe,yBAAf,CAArB;AACA,OAAO,KAAP,CAAa,MAAb,EAAqB,KAAK,SAAL,CAAe,yBAAf,CAArB;AACA,OAAO,KAAP,CAAa,SAAb,EAAwB,KAAK,SAAL,CAAe,cAAf,CAAxB;;AAEA;AACA;AACA;;AAEA,OAAO,KAAP,CAAa,uBAAb,EAAsC,KAAK,MAAL,CAAY,WAAZ,CAAtC;AACA,OAAO,KAAP,CAAa,0BAAb,EAAyC,KAAK,MAAL,CAAY,aAAZ,CAAzC;AACA,OAAO,KAAP,CAAa,WAAb,EAA0B,KAAK,MAAL,CAAY,UAAZ,CAA1B;AACA,OAAO,KAAP,CAAa,eAAb,EAA8B,KAAK,MAAL,CAAY,UAAZ,CAA9B;;AAEA;AACA;AACA;;AAEA,OAAO,KAAP,CAAa,OAAb,EAAsB,KAAK,QAAL,CAAc,MAAd,CAAqB,YAArB,CAAtB;AACA,OAAO,KAAP,CAAa,SAAb,EAAwB,KAAK,QAAL,CAAc,MAAd,CAAqB,KAAK,KAAL,CAAW,EAAhC,CAAxB;AACA,OAAO,KAAP,CAAa,UAAb,EAAyB,KAAK,QAAL,CAAc,MAAd,CAAqB,0BAArB,EAAiD,UAAjD,CAAzB;;AAEA,QAAQ,GAAR,CAAY,oBAAZ","file":"test-compiled.js","sourcesContent":["/**\n * Usage: node test.js\n */\n\nvar mime = require('../mime');\nvar assert = require('assert');\nvar path = require('path');\n\n//\n// Test mime lookups\n//\n\nassert.equal('text/plain', mime.lookup('text.txt'));     // normal file\nassert.equal('text/plain', mime.lookup('TEXT.TXT'));     // uppercase\nassert.equal('text/plain', mime.lookup('dir/text.txt')); // dir + file\nassert.equal('text/plain', mime.lookup('.text.txt'));    // hidden file\nassert.equal('text/plain', mime.lookup('.txt'));         // nameless\nassert.equal('text/plain', mime.lookup('txt'));          // extension-only\nassert.equal('text/plain', mime.lookup('/txt'));         // extension-less ()\nassert.equal('text/plain', mime.lookup('\\\\txt'));        // Windows, extension-less\nassert.equal('application/octet-stream', mime.lookup('text.nope')); // unrecognized\nassert.equal('fallback', mime.lookup('text.fallback', 'fallback')); // alternate default\n\n//\n// Test extensions\n//\n\nassert.equal('txt', mime.extension(mime.types.text));\nassert.equal('html', mime.extension(mime.types.htm));\nassert.equal('bin', mime.extension('application/octet-stream'));\nassert.equal('bin', mime.extension('application/octet-stream '));\nassert.equal('html', mime.extension(' text/html; charset=UTF-8'));\nassert.equal('html', mime.extension('text/html; charset=UTF-8 '));\nassert.equal('html', mime.extension('text/html; charset=UTF-8'));\nassert.equal('html', mime.extension('text/html ; charset=UTF-8'));\nassert.equal('html', mime.extension('text/html;charset=UTF-8'));\nassert.equal('html', mime.extension('text/Html;charset=UTF-8'));\nassert.equal(undefined, mime.extension('unrecognized'));\n\n//\n// Test node.types lookups\n//\n\nassert.equal('application/font-woff', mime.lookup('file.woff'));\nassert.equal('application/octet-stream', mime.lookup('file.buffer'));\nassert.equal('audio/mp4', mime.lookup('file.m4a'));\nassert.equal('font/opentype', mime.lookup('file.otf'));\n\n//\n// Test charsets\n//\n\nassert.equal('UTF-8', mime.charsets.lookup('text/plain'));\nassert.equal(undefined, mime.charsets.lookup(mime.types.js));\nassert.equal('fallback', mime.charsets.lookup('application/octet-stream', 'fallback'));\n\nconsole.log('\\nAll tests passed');\n"]}