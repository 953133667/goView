{"version":3,"sources":["test-zlib-random-byte-pipes.js"],"names":[],"mappings":"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","file":"test-zlib-random-byte-pipes-compiled.js","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar crypto = require('crypto');\nvar stream = require('stream');\nvar Stream = stream.Stream;\nvar util = require('util');\nvar tape = require('tape');\nvar zlib = require('../');\n\n\n\n// emit random bytes, and keep a shasum\nfunction RandomReadStream(opt) {\n  Stream.call(this);\n\n  this.readable = true;\n  this._paused = false;\n  this._processing = false;\n\n  this._hasher = crypto.createHash('sha1');\n  opt = opt || {};\n\n  // base block size.\n  opt.block = opt.block || 256 * 1024;\n\n  // total number of bytes to emit\n  opt.total = opt.total || 256 * 1024 * 1024;\n  this._remaining = opt.total;\n\n  // how variable to make the block sizes\n  opt.jitter = opt.jitter || 1024;\n\n  this._opt = opt;\n\n  this._process = this._process.bind(this);\n\n  process.nextTick(this._process);\n}\n\nutil.inherits(RandomReadStream, Stream);\n\nRandomReadStream.prototype.pause = function() {\n  this._paused = true;\n  this.emit('pause');\n};\n\nRandomReadStream.prototype.resume = function() {\n  this._paused = false;\n  this.emit('resume');\n  this._process();\n};\n\nRandomReadStream.prototype._process = function() {\n  if (this._processing) return;\n  if (this._paused) return;\n\n  this._processing = true;\n\n  if (!this._remaining) {\n    this._hash = this._hasher.digest('hex').toLowerCase().trim();\n    this._processing = false;\n\n    this.emit('end');\n    return;\n  }\n\n  // figure out how many bytes to output\n  // if finished, then just emit end.\n  var block = this._opt.block;\n  var jitter = this._opt.jitter;\n  if (jitter) {\n    block += Math.ceil(Math.random() * jitter - (jitter / 2));\n  }\n  block = Math.min(block, this._remaining);\n  var buf = new Buffer(block);\n  for (var i = 0; i < block; i++) {\n    buf[i] = Math.random() * 256;\n  }\n\n  this._hasher.update(buf);\n\n  this._remaining -= block;\n\n  this._processing = false;\n\n  this.emit('data', buf);\n  process.nextTick(this._process);\n};\n\n\n// a filter that just verifies a shasum\nfunction HashStream() {\n  Stream.call(this);\n\n  this.readable = this.writable = true;\n  this._hasher = crypto.createHash('sha1');\n}\n\nutil.inherits(HashStream, Stream);\n\nHashStream.prototype.write = function(c) {\n  // Simulate the way that an fs.ReadStream returns false\n  // on *every* write like a jerk, only to resume a\n  // moment later.\n  this._hasher.update(c);\n  process.nextTick(this.resume.bind(this));\n  return false;\n};\n\nHashStream.prototype.resume = function() {\n  this.emit('resume');\n  process.nextTick(this.emit.bind(this, 'drain'));\n};\n\nHashStream.prototype.end = function(c) {\n  if (c) {\n    this.write(c);\n  }\n  this._hash = this._hasher.digest('hex').toLowerCase().trim();\n  this.emit('data', this._hash);\n  this.emit('end');\n};\n\ntape('random byte pipes', function(t) {\n  var inp = new RandomReadStream({ total: 1024, block: 256, jitter: 16 });\n  var out = new HashStream();\n  var gzip = zlib.createGzip();\n  var gunz = zlib.createGunzip();\n\n  inp.pipe(gzip).pipe(gunz).pipe(out);\n\n  inp.on('data', function(c) {\n    t.ok(c.length);\n  });\n\n  gzip.on('data', function(c) {\n    t.ok(c.length);\n  });\n\n  gunz.on('data', function(c) {\n    t.ok(c.length);\n  });\n\n  out.on('data', function(c) {\n    t.ok(c.length);\n  });\n\n  out.on('data', function(c) {\n    t.ok(c.length);\n    t.equal(c, inp._hash, 'hashes should match');\n  });\n  \n  out.on('end', function() {\n    t.end();\n  })\n});\n\n"]}