{"version":3,"sources":["test-zlib-params.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,QAAQ,cAAR,CAAb;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,KAAK,QAAQ,IAAR,CAAT;;AAEA,IAAI,OAAO,GAAG,YAAH,CAAgB,KAAK,OAAL,CAAa,OAAO,WAApB,EAAiC,YAAjC,CAAhB,CAAX;AAAA,IACI,YAAY,KAAK,IADrB;AAAA,IAEI,OAAO,EAAE,OAAO,CAAT,EAAY,UAAU,KAAK,kBAA3B,EAFX;AAAA,IAGI,WAAW,KAAK,aAAL,CAAmB,IAAnB,CAHf;;AAKA,IAAI,SAAS,KAAK,KAAL,CAAW,CAAX,EAAc,SAAd,CAAb;AAAA,IACI,SAAS,KAAK,KAAL,CAAW,SAAX,CADb;AAAA,IAEI,SAAS,IAAI,MAAJ,CAAW,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,CAAX,CAFb;AAAA,IAGI,WAAW,OAAO,MAAP,CAAc,CAAC,MAAD,EAAS,MAAT,CAAd,CAHf;AAAA,IAII,MAJJ;;AAMA,SAAS,KAAT,CAAe,MAAf,EAAuB,YAAW;AAChC,WAAS,MAAT,CAAgB,CAAhB,EAAmB,KAAK,kBAAxB,EAA4C,YAAW;AACrD,WAAO,SAAS,IAAT,EAAP,CAAuB;AACvB,aAAS,GAAT,CAAa,MAAb,EAAqB,YAAW;AAC9B,UAAI,OAAO,EAAX;AAAA,UAAe,GAAf;AACA,aAAO,MAAM,SAAS,IAAT,EAAb,EACE,KAAK,IAAL,CAAU,GAAV;AACF,eAAS,OAAO,MAAP,CAAc,IAAd,CAAT;AACD,KALD;AAMD,GARD;AASA,SAAO,SAAS,IAAT,EAAP,CAAuB;AACxB,CAXD;;AAaA,QAAQ,IAAR,CAAa,MAAb,EAAqB,YAAW;AAC9B,SAAO,SAAP,CAAiB,MAAjB,EAAyB,QAAzB;AACD,CAFD","file":"test-zlib-params-compiled.js","sourcesContent":["var common = require('../common.js');\nvar assert = require('assert');\nvar zlib = require('zlib');\nvar path = require('path');\nvar fs = require('fs');\n\nvar file = fs.readFileSync(path.resolve(common.fixturesDir, 'person.jpg')),\n    chunkSize = 24 * 1024,\n    opts = { level: 9, strategy: zlib.Z_DEFAULT_STRATEGY },\n    deflater = zlib.createDeflate(opts);\n\nvar chunk1 = file.slice(0, chunkSize),\n    chunk2 = file.slice(chunkSize),\n    blkhdr = new Buffer([0x00, 0x48, 0x82, 0xb7, 0x7d]),\n    expected = Buffer.concat([blkhdr, chunk2]),\n    actual;\n\ndeflater.write(chunk1, function() {\n  deflater.params(0, zlib.Z_DEFAULT_STRATEGY, function() {\n    while (deflater.read());\n    deflater.end(chunk2, function() {\n      var bufs = [], buf;\n      while (buf = deflater.read())\n        bufs.push(buf);\n      actual = Buffer.concat(bufs);\n    });\n  });\n  while (deflater.read());\n});\n\nprocess.once('exit', function() {\n  assert.deepEqual(actual, expected);\n});\n"]}