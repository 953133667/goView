{"version":3,"sources":["convert.js"],"names":[],"mappings":"AAAA,IAAI,OAAO,QAAQ,MAAR,CAAX;AAAA,IACE,MAAM,QAAQ,YAAR,CADR;AAAA,IAEC,SAAS,CACR,GADQ,EAER,IAFQ,EAGR,KAHQ,EAIR,IAJQ,EAKR,KALQ,EAMR,MANQ,EAOR,KAPQ,EAQR,MARQ,EASR,OATQ,CAFV;;AAcA,KAAK,4BAAL,EAAmC,UAAU,CAAV,EAAa;AAC9C,GAAE,IAAF,CAAO,OAAO,MAAd;;AAEA,MAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACtC,MAAI,QAAQ,OAAO,CAAP,CAAZ;AAAA,MACE,MADF;AAAA,MAEE,GAFF;AAAA,MAGE,GAHF;;AAKA,WAAS,IAAI,aAAJ,CAAkB,IAAI,KAAJ,EAAW,UAAU,IAAV,EAAgB;AAAE,UAAO,KAAK,UAAL,CAAgB,CAAhB,CAAP;AAA4B,GAAzD,CAAlB,CAAT;;AAEA,QAAM,IAAI,WAAJ,CAAgB,MAAhB,CAAN;AACA,QAAM,IAAI,GAAJ,EAAS,UAAU,IAAV,EAAgB;AAAE,UAAO,OAAO,YAAP,CAAoB,IAApB,CAAP;AAAmC,GAA9D,EAAgE,IAAhE,CAAqE,EAArE,CAAN;;AAEA,IAAE,KAAF,CAAQ,KAAR,EAAe,GAAf,EAAoB,aAAa,KAAjC;AACD;AAEF,CAjBD;;AAmBA,SAAS,GAAT,CAAc,GAAd,EAAmB,QAAnB,EAA6B;AAC5B,KAAI,MAAM,EAAV;AAAA,KACG,MADH;AAAA,KAEG,WAFH;;AAIA,MAAK,IAAI,IAAI,CAAR,EAAW,MAAM,IAAI,MAA1B,EAAkC,IAAI,GAAtC,EAA2C,GAA3C,EAAgD;AAC/C,MAAK,OAAO,GAAP,KAAe,QAAf,IAA2B,CAAC,CAAC,IAAI,MAAJ,CAAW,CAAX,CAAlC,EAAkD;AACjD,YAAS,IAAI,MAAJ,CAAW,CAAX,CAAT;AACA,iBAAc,SAAS,MAAT,EAAiB,CAAjB,EAAoB,GAApB,CAAd;AACA,OAAI,CAAJ,IAAS,WAAT;AACA,GAJD,MAIO,IAAI,OAAO,GAAP,KAAe,QAAf,IAA2B,KAAK,GAApC,EAAyC;AAC/C,YAAS,IAAI,CAAJ,CAAT;AACA,iBAAc,SAAS,MAAT,EAAiB,CAAjB,EAAoB,GAApB,CAAd;AACA,OAAI,CAAJ,IAAS,WAAT;AACA;AACD;AACD,QAAO,GAAP;AACA","file":"convert-compiled.js","sourcesContent":["var test = require('tape'),\n  b64 = require('../lib/b64'),\n\tchecks = [\n\t\t'a',\n\t\t'aa',\n\t\t'aaa',\n\t\t'hi',\n\t\t'hi!',\n\t\t'hi!!',\n\t\t'sup',\n\t\t'sup?',\n\t\t'sup?!'\n\t];\n\ntest('convert to base64 and back', function (t) {\n  t.plan(checks.length);\n\n  for (var i = 0; i < checks.length; i++) {\n    var check = checks[i],\n      b64Str,\n      arr,\n      str;\n\n    b64Str = b64.fromByteArray(map(check, function (char) { return char.charCodeAt(0); }));\n\n    arr = b64.toByteArray(b64Str);\n    str = map(arr, function (byte) { return String.fromCharCode(byte); }).join('');\n\n    t.equal(check, str, 'Checked ' + check);\n  }\n\n});\n\nfunction map (arr, callback) {\n\tvar res = [],\n    kValue,\n    mappedValue;\n\n\tfor (var k = 0, len = arr.length; k < len; k++) {\n\t\tif ((typeof arr === 'string' && !!arr.charAt(k))) {\n\t\t\tkValue = arr.charAt(k);\n\t\t\tmappedValue = callback(kValue, k, arr);\n\t\t\tres[k] = mappedValue;\n\t\t} else if (typeof arr !== 'string' && k in arr) {\n\t\t\tkValue = arr[k];\n\t\t\tmappedValue = callback(kValue, k, arr);\n\t\t\tres[k] = mappedValue;\n\t\t}\n\t}\n\treturn res;\n}\n"]}