{"version":3,"sources":["fromStringWithSourceMapTest.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,KAAK,QAAQ,IAAR,CAAT;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,gBAAgB,QAAQ,KAAR,EAAe,aAAnC;AACA,IAAI,0BAA0B,QAAQ,KAAR,EAAe,uBAA7C;;AAEA,SAAS,yBAAT,EAAoC,YAAW;AAC9C,IAAG,WAAH,CAAe,KAAK,OAAL,CAAa,SAAb,EAAwB,wBAAxB,CAAf,EAAkE,MAAlE,CAAyE,UAAS,IAAT,EAAe;AACvF,SAAO,iBAAgB,IAAhB,CAAqB,IAArB;AAAP;AACA,EAFD,EAEG,OAFH,CAEW,UAAS,IAAT,EAAe;AACzB,KAAG,+BAA+B,IAAlC,EAAwC,YAAW;AAClD,OAAI,MAAM,KAAK,KAAL,CAAW,GAAG,YAAH,CAAgB,KAAK,OAAL,CAAa,SAAb,EAAwB,4BAA4B,IAApD,CAAhB,EAA2E,OAA3E,CAAX,CAAV;AACA,OAAI,iBAAiB,GAAG,YAAH,CAAgB,KAAK,OAAL,CAAa,SAAb,EAAwB,4BAA4B,IAAI,IAAxD,CAAhB,EAA+E,OAA/E,CAArB;AACA,OAAI,eAAe,KAAK,KAAL,CAAW,GAAG,YAAH,CAAgB,KAAK,OAAL,CAAa,SAAb,EAAwB,4BACrE,KAAK,OAAL,CAAa,eAAb,EAA8B,eAA9B,CAD6C,CAAhB,EACoB,OADpB,CAAX,CAAnB;AAEA,OAAI,MAAM,wBAAwB,cAAxB,EAAwC,GAAxC,CAAV;AACA,OAAI,SAAS,IAAI,qBAAJ,CAA0B;AACtC,UAAM,IAAI;AAD4B,IAA1B,CAAb;AAGA,OAAG,OAAO,GAAP,CAAW,QAAX,KAAwB,aAAa,QAAxC,EAAkD;AACjD,OAAG,aAAH,CAAiB,KAAK,OAAL,CAAa,SAAb,EAAwB,4BACzC,KAAK,OAAL,CAAa,eAAb,EAA8B,aAA9B,CADiB,CAAjB,EAC+C,KAAK,SAAL,CAAe,OAAO,GAAtB,EAA2B,IAA3B,EAAiC,CAAjC,CAD/C,EACoF,OADpF;AAEA;AACD,QAAK,KAAL,CAAW,KAAK,SAAL,CAAe,OAAO,GAAtB,CAAX,EAAuC,MAAvC,CAA8C,EAA9C,CAAiD,GAAjD,CAAqD,YAArD;AACA,OAAG,OAAO,MAAP,KAAkB,cAArB,EAAqC;AACpC,OAAG,aAAH,CAAiB,KAAK,OAAL,CAAa,SAAb,EAAwB,4BACzC,KAAK,QAAL,CAAc,IAAI,IAAlB,EAAwB,KAAK,OAAL,CAAa,IAAI,IAAjB,CAAxB,CADyC,GACS,SADT,GACqB,KAAK,OAAL,CAAa,IAAI,IAAjB,CAD7C,CAAjB,EACuF,OAAO,MAD9F,EACsG,OADtG;AAEA;AACD,UAAO,MAAP,CAAc,MAAd,CAAqB,EAArB,CAAwB,GAAxB,CAA4B,cAA5B;;AAEA,SAAM,wBAAwB,cAAxB,EAAwC,YAAxC,CAAN;AACA,YAAS,IAAI,qBAAJ,CAA0B;AAClC,UAAM,IAAI;AADwB,IAA1B,CAAT;AAGA,UAAO,MAAP,CAAc,MAAd,CAAqB,EAArB,CAAwB,GAAxB,CAA4B,cAA5B;AACA,QAAK,KAAL,CAAW,KAAK,SAAL,CAAe,OAAO,GAAtB,CAAX,EAAuC,MAAvC,CAA8C,EAA9C,CAAiD,GAAjD,CAAqD,YAArD;AACA,GA1BD;AA4BA,EA/BD;AAgCA,CAjCD","file":"fromStringWithSourceMapTest-compiled.js","sourcesContent":["var should = require(\"should\");\r\nvar fs = require(\"fs\");\r\nvar path = require(\"path\");\r\nvar SourceListMap = require(\"../\").SourceListMap;\r\nvar fromStringWithSourceMap = require(\"../\").fromStringWithSourceMap;\r\n\r\ndescribe(\"fromStringWithSourceMap\", function() {\r\n\tfs.readdirSync(path.resolve(__dirname, \"fixtures/from-to-tests\")).filter(function(name) {\r\n\t\treturn /\\.input\\.map$/.test(name);\r\n\t}).forEach(function(name) {\r\n\t\tit(\"should parse and generate \" + name, function() {\r\n\t\t\tvar MAP = JSON.parse(fs.readFileSync(path.resolve(__dirname, \"fixtures/from-to-tests/\" + name), \"utf-8\"));\r\n\t\t\tvar GENERATED_CODE = fs.readFileSync(path.resolve(__dirname, \"fixtures/from-to-tests/\" + MAP.file), \"utf-8\");\r\n\t\t\tvar EXPECTED_MAP = JSON.parse(fs.readFileSync(path.resolve(__dirname, \"fixtures/from-to-tests/\" + \r\n\t\t\t\tname.replace(/\\.input\\.map$/, \".expected.map\")), \"utf-8\"));\r\n\t\t\tvar slm = fromStringWithSourceMap(GENERATED_CODE, MAP);\r\n\t\t\tvar result = slm.toStringWithSourceMap({\r\n\t\t\t\tfile: MAP.file\r\n\t\t\t});\r\n\t\t\tif(result.map.mappings !== EXPECTED_MAP.mappings) {\r\n\t\t\t\tfs.writeFileSync(path.resolve(__dirname, \"fixtures/from-to-tests/\" + \r\n\t\t\t\tname.replace(/\\.input\\.map$/, \".output.map\")), JSON.stringify(result.map, null, 2), \"utf-8\");\r\n\t\t\t}\r\n\t\t\tJSON.parse(JSON.stringify(result.map)).should.be.eql(EXPECTED_MAP);\r\n\t\t\tif(result.source !== GENERATED_CODE) {\r\n\t\t\t\tfs.writeFileSync(path.resolve(__dirname, \"fixtures/from-to-tests/\" + \r\n\t\t\t\tpath.basename(MAP.file, path.extname(MAP.file)) + \".output\" + path.extname(MAP.file)), result.source, \"utf-8\");\r\n\t\t\t}\r\n\t\t\tresult.source.should.be.eql(GENERATED_CODE);\r\n\r\n\t\t\tslm = fromStringWithSourceMap(GENERATED_CODE, EXPECTED_MAP);\r\n\t\t\tresult = slm.toStringWithSourceMap({\r\n\t\t\t\tfile: MAP.file\r\n\t\t\t});\r\n\t\t\tresult.source.should.be.eql(GENERATED_CODE);\r\n\t\t\tJSON.parse(JSON.stringify(result.map)).should.be.eql(EXPECTED_MAP);\r\n\t\t});\r\n\r\n\t});\r\n});\r\n"]}