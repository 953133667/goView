{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\n\nvar detector = require('./detector');\n\nvar handlers = {};\nvar types = require('./types');\n\n// load all available handlers\ntypes.forEach(function (type) {\n  handlers[type] = require('./types/' + type);\n});\n\n// Maximum buffer size, with a default of 128 kilobytes.\n// TO-DO: make this adaptive based on the initial signature of the image\nvar MaxBufferSize = 128*1024;\n\nfunction lookup (buffer, filepath) {\n  // detect the file type.. don't rely on the extension\n  var type = detector(buffer, filepath);\n\n  // find an appropriate handler for this file type\n  if (type in handlers) {\n    var size = handlers[type].calculate(buffer, filepath);\n    if (size !== false) {\n      size.type = type;\n      return size;\n    }\n  }\n\n  // throw up, if we don't understand the file\n  throw new TypeError('unsupported file type: ' + type + ' (file: ' + filepath + ')');\n}\n\nfunction asyncFileToBuffer (filepath, callback) {\n  // open the file in read only mode\n  fs.open(filepath, 'r', function (err, descriptor) {\n    if (err) { return callback(err); }\n    var size = fs.fstatSync(descriptor).size;\n    var bufferSize = Math.min(size, MaxBufferSize);\n    var buffer = new Buffer(bufferSize);\n    // read first buffer block from the file, asynchronously\n    fs.read(descriptor, buffer, 0, bufferSize, 0, function (err) {\n      if (err) { return callback(err); }\n      // close the file, we are done\n      fs.close(descriptor, function (err) {\n        callback(err, buffer);\n      });\n    });\n  });\n}\n\nfunction syncFileToBuffer (filepath) {\n  // read from the file, synchronously\n  var descriptor = fs.openSync(filepath, 'r');\n  var size = fs.fstatSync(descriptor).size;\n  var bufferSize = Math.min(size, MaxBufferSize);\n  var buffer = new Buffer(bufferSize);\n  fs.readSync(descriptor, buffer, 0, bufferSize, 0);\n  fs.closeSync(descriptor);\n  return buffer;\n}\n\n/**\n * @params input - buffer or relative/absolute path of the image file\n * @params callback - optional function for async detection\n */\nmodule.exports = function (input, callback) {\n\n  // Handle buffer input\n  if (Buffer.isBuffer(input)) {\n    return lookup(input);\n  }\n\n  // input should be a string at this point\n  if (typeof input !== 'string') {\n    throw new TypeError('invalid invocation');\n  }\n\n  // resolve the file path\n  var filepath = path.resolve(input);\n\n  if (typeof callback === 'function') {\n    asyncFileToBuffer(filepath, function (err, buffer) {\n      if (err) { return callback(err); }\n\n      // return the dimensions\n      var dimensions;\n      try {\n        dimensions = lookup(buffer, filepath);\n      } catch (e) {\n        err = e;\n      }\n      callback(err, dimensions);\n    });\n  } else {\n    var buffer = syncFileToBuffer(filepath);\n    return lookup(buffer, filepath);\n  }\n};\n\nmodule.exports.types = types;\n"]}