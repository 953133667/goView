{"version":3,"sources":["jpg.js"],"names":[],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;;AAEA,SAAS,KAAT,CAAgB,MAAhB,EAAwB;AAAE;AACxB,MAAI,YAAY,OAAO,QAAP,CAAgB,KAAhB,EAAuB,CAAvB,EAA0B,CAA1B,CAAhB;;AAEA,SAAQ,WAAW,SAAnB;AACD;;AAED,SAAS,WAAT,CAAsB,MAAtB,EAA8B,CAA9B,EAAiC;AAC/B,SAAO;AACL,cAAW,OAAO,YAAP,CAAoB,CAApB,CADN;AAEL,aAAU,OAAO,YAAP,CAAoB,IAAI,CAAxB;AAFL,GAAP;AAID;;AAED,SAAS,cAAT,CAAyB,MAAzB,EAAiC,CAAjC,EAAoC;AAClC;AACA,MAAI,IAAI,OAAO,MAAf,EAAuB;AACrB,UAAM,IAAI,SAAJ,CAAc,qCAAd,CAAN;AACD;AACD;AACA,MAAI,OAAO,CAAP,MAAc,IAAlB,EAAwB;AACtB,UAAM,IAAI,SAAJ,CAAc,qCAAd,CAAN;AACD;AACF;;AAED,SAAS,SAAT,CAAoB,MAApB,EAA4B;;AAE1B;AACA,WAAS,OAAO,KAAP,CAAa,CAAb,CAAT;;AAEA,MAAI,CAAJ,EAAO,IAAP;AACA,SAAO,OAAO,MAAd,EAAsB;AACpB;AACA,QAAI,OAAO,YAAP,CAAoB,CAApB,CAAJ;;AAEA;AACA,mBAAe,MAAf,EAAuB,CAAvB;;AAEA;AACA;AACA,WAAO,OAAO,IAAI,CAAX,CAAP;AACA,QAAI,SAAS,IAAT,IAAiB,SAAS,IAA9B,EAAoC;AAClC,aAAO,YAAY,MAAZ,EAAoB,IAAI,CAAxB,CAAP;AACD;;AAED;AACA,aAAS,OAAO,KAAP,CAAa,IAAI,CAAjB,CAAT;AACD;;AAED,QAAM,IAAI,SAAJ,CAAc,4BAAd,CAAN;AACD;;AAED,OAAO,OAAP,GAAiB;AACf,YAAU,KADK;AAEf,eAAa;AAFE,CAAjB","file":"jpg-compiled.js","sourcesContent":["'use strict';\n\n// NOTE: we only support baseline and progressive JPGs here\n// due to the structure of the loader class, we only get a buffer\n// with a maximum size of 4096 bytes. so if the SOF marker is outside\n// if this range we can't detect the file size correctly.\n\nfunction isJPG (buffer) { //, filepath\n  var SOIMarker = buffer.toString('hex', 0, 2);\n\n  return ('ffd8' === SOIMarker);\n}\n\nfunction extractSize (buffer, i) {\n  return {\n    'height' : buffer.readUInt16BE(i),\n    'width' : buffer.readUInt16BE(i + 2)\n  };\n}\n\nfunction validateBuffer (buffer, i) {\n  // index should be within buffer limits\n  if (i > buffer.length) {\n    throw new TypeError('Corrupt JPG, exceeded buffer limits');\n  }\n  // Every JPEG block must begin with a 0xFF\n  if (buffer[i] !== 0xFF) {\n    throw new TypeError('Invalid JPG, marker table corrupted');\n  }\n}\n\nfunction calculate (buffer) {\n\n  // Skip 5 chars, they are for signature\n  buffer = buffer.slice(4);\n\n  var i, next;\n  while (buffer.length) {\n    // read length of the next block\n    i = buffer.readUInt16BE(0);\n\n    // ensure correct format\n    validateBuffer(buffer, i);\n\n    // 0xFFC0 is baseline(SOF)\n    // 0xFFC2 is progressive(SOF2)\n    next = buffer[i + 1];\n    if (next === 0xC0 || next === 0xC2) {\n      return extractSize(buffer, i + 5);\n    }\n\n    // move to the next block\n    buffer = buffer.slice(i + 2);\n  }\n\n  throw new TypeError('Invalid JPG, no size found');\n}\n\nmodule.exports = {\n  'detect': isJPG,\n  'calculate': calculate\n};\n"]}