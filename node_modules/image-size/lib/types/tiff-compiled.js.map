{"version":3,"sources":["tiff.js"],"names":[],"mappings":"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","file":"tiff-compiled.js","sourcesContent":["'use strict';\n\n// based on http://www.compix.com/fileformattif.htm\n// TO-DO: support big-endian as well\n\nvar fs = require('fs');\nvar readUInt = require('../readUInt');\n\nfunction isTIFF (buffer) {\n  var hex4 = buffer.toString('hex', 0, 4);\n  return ('49492a00' === hex4 || '4d4d002a' === hex4);\n}\n\n// Read IFD (image-file-directory) into a buffer\nfunction readIFD (buffer, filepath, isBigEndian) {\n\n  var ifdOffset = readUInt(buffer, 32, 4, isBigEndian);\n\n  // read only till the end of the file\n  var bufferSize = 1024;\n  var fileSize = fs.statSync(filepath).size;\n  if (ifdOffset + bufferSize > fileSize) {\n    bufferSize = fileSize - ifdOffset - 10;\n  }\n\n  // populate the buffer\n  var endBuffer = new Buffer(bufferSize);\n  var descriptor = fs.openSync(filepath, 'r');\n  fs.readSync(descriptor, endBuffer, 0, bufferSize, ifdOffset);\n\n  // var ifdLength = readUInt(endBuffer, 16, 0, isBigEndian);\n  var ifdBuffer = endBuffer.slice(2); //, 2 + 12 * ifdLength);\n  return ifdBuffer;\n}\n\n// TIFF values seem to be messed up on Big-Endian, this helps\nfunction readValue (buffer, isBigEndian) {\n  var low = readUInt(buffer, 16, 8, isBigEndian);\n  var high = readUInt(buffer, 16, 10, isBigEndian);\n  return (high << 16) + low;\n}\n\n// move to the next tag\nfunction nextTag (buffer) {\n  if (buffer.length > 24) {\n    return buffer.slice(12);\n  }\n}\n\n// Extract IFD tags from TIFF metadata\nfunction extractTags (buffer, isBigEndian) {\n  var tags = {};\n  var code, type, length;\n\n  while (buffer && buffer.length) {\n    code = readUInt(buffer, 16, 0, isBigEndian);\n    type = readUInt(buffer, 16, 2, isBigEndian);\n    length = readUInt(buffer, 32, 4, isBigEndian);\n\n    // 0 means end of IFD\n    if (code === 0) {\n      break;\n    } else {\n      // 256 is width, 257 is height\n      // if (code === 256 || code === 257) {\n      if (length === 1 && type === 3) {\n        tags[code] = readValue(buffer, isBigEndian);\n      }\n\n      // move to the next tag\n      buffer = nextTag(buffer);\n    }\n  }\n  return tags;\n}\n\n// Test if the TIFF is Big Endian or Little Endian\nfunction determineEndianness (buffer) {\n  var signature = buffer.toString('ascii', 0, 2);\n  if ('II' === signature) {\n    return 'LE';\n  } else if ('MM' === signature) {\n    return 'BE';\n  }\n}\n\nfunction calculate (buffer, filepath) {\n\n  if (!filepath) {\n    throw new TypeError('Tiff doesn\\'t support buffer');\n  }\n\n  // Determine BE/LE\n  var isBigEndian = determineEndianness(buffer) === 'BE';\n\n  // read the IFD\n  var ifdBuffer = readIFD(buffer, filepath, isBigEndian);\n\n  // extract the tags from the IFD\n  var tags = extractTags(ifdBuffer, isBigEndian);\n\n  var width = tags[256];\n  var height = tags[257];\n\n  if (!width || !height) {\n    throw new TypeError('Invalid Tiff, missing tags');\n  }\n\n  return {\n    'width': width,\n    'height': height\n  };\n}\n\nmodule.exports = {\n  'detect': isTIFF,\n  'calculate': calculate\n};\n"]}