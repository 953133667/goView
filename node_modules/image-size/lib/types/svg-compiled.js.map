{"version":3,"sources":["svg.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,SAAS,iBAAb;AACA,SAAS,KAAT,CAAgB,MAAhB,EAAwB;AACtB,SAAO,OAAO,IAAP,CAAY,MAAZ,CAAP;AACD;;AAED,IAAI,mBAAmB;AACrB,UAAQ,cADa;AAErB,WAAS,0BAFY;AAGrB,YAAU,2BAHW;AAIrB,aAAW;AAJU,CAAvB;;AAOA,SAAS,YAAT,CAAuB,OAAvB,EAAgC;AAC9B,MAAI,SAAS,QAAQ,KAAR,CAAc,GAAd,CAAb;AACA,SAAO;AACL,aAAS,SAAS,OAAO,CAAP,CAAT,EAAoB,EAApB,CADJ;AAEL,cAAU,SAAS,OAAO,CAAP,CAAT,EAAoB,EAApB;AAFL,GAAP;AAID;;AAED,SAAS,eAAT,CAA0B,IAA1B,EAAgC;AAC9B,MAAI,QAAQ,KAAK,KAAL,CAAW,iBAAiB,KAA5B,CAAZ;AACA,MAAI,SAAS,KAAK,KAAL,CAAW,iBAAiB,MAA5B,CAAb;AACA,MAAI,UAAU,KAAK,KAAL,CAAW,iBAAiB,OAA5B,CAAd;AACA,SAAO;AACL,aAAS,SAAS,SAAS,MAAM,CAAN,CAAT,EAAmB,EAAnB,CADb;AAEL,cAAU,UAAU,SAAS,OAAO,CAAP,CAAT,EAAoB,EAApB,CAFf;AAGL,eAAW,WAAW,aAAa,QAAQ,CAAR,CAAb;AAHjB,GAAP;AAKD;;AAED,SAAS,qBAAT,CAAgC,KAAhC,EAAuC;AACrC,SAAO;AACL,aAAS,MAAM,KADV;AAEL,cAAU,MAAM;AAFX,GAAP;AAID;;AAED,SAAS,kBAAT,CAA6B,KAA7B,EAAoC;AAClC,MAAI,QAAQ,MAAM,OAAN,CAAc,KAAd,GAAsB,MAAM,OAAN,CAAc,MAAhD;AACA,MAAI,MAAM,KAAV,EAAiB;AACf,WAAO;AACL,eAAS,MAAM,KADV;AAEL,gBAAU,KAAK,KAAL,CAAW,MAAM,KAAN,GAAc,KAAzB;AAFL,KAAP;AAID;AACD,MAAI,MAAM,MAAV,EAAkB;AAChB,WAAO;AACL,eAAS,KAAK,KAAL,CAAW,MAAM,MAAN,GAAe,KAA1B,CADJ;AAEL,gBAAU,MAAM;AAFX,KAAP;AAID;AACD,SAAO;AACL,aAAS,MAAM,OAAN,CAAc,KADlB;AAEL,cAAU,MAAM,OAAN,CAAc;AAFnB,GAAP;AAID;;AAED,SAAS,SAAT,CAAoB,MAApB,EAA4B;AAC1B,MAAI,OAAO,OAAO,QAAP,CAAgB,MAAhB,EAAwB,KAAxB,CAA8B,iBAAiB,IAA/C,CAAX;AACA,MAAI,IAAJ,EAAU;AACR,QAAI,QAAQ,gBAAgB,KAAK,CAAL,CAAhB,CAAZ;AACA,QAAI,MAAM,KAAN,IAAe,MAAM,MAAzB,EAAiC;AAC/B,aAAO,sBAAsB,KAAtB,CAAP;AACD;AACD,QAAI,MAAM,OAAV,EAAmB;AACjB,aAAO,mBAAmB,KAAnB,CAAP;AACD;AACF;AACD,QAAM,IAAI,SAAJ,CAAc,aAAd,CAAN;AACD;;AAED,OAAO,OAAP,GAAiB;AACf,YAAU,KADK;AAEf,eAAa;AAFE,CAAjB","file":"svg-compiled.js","sourcesContent":["'use strict';\n\nvar svgReg = /<svg[^>]+[^>]*>/;\nfunction isSVG (buffer) {\n  return svgReg.test(buffer);\n}\n\nvar extractorRegExps = {\n  'root': /<svg\\s[^>]+>/,\n  'width': /\\bwidth=(['\"])([^%]+?)\\1/,\n  'height': /\\bheight=(['\"])([^%]+?)\\1/,\n  'viewbox': /\\bviewBox=(['\"])(.+?)\\1/\n};\n\nfunction parseViewbox (viewbox) {\n  var bounds = viewbox.split(' ');\n  return {\n    'width': parseInt(bounds[2], 10),\n    'height': parseInt(bounds[3], 10)\n  };\n}\n\nfunction parseAttributes (root) {\n  var width = root.match(extractorRegExps.width);\n  var height = root.match(extractorRegExps.height);\n  var viewbox = root.match(extractorRegExps.viewbox);\n  return {\n    'width': width && parseInt(width[2], 10),\n    'height': height && parseInt(height[2], 10),\n    'viewbox': viewbox && parseViewbox(viewbox[2])\n  };\n}\n\nfunction calculateByDimensions (attrs) {\n  return {\n    'width': attrs.width,\n    'height': attrs.height\n  };\n}\n\nfunction calculateByViewbox (attrs) {\n  var ratio = attrs.viewbox.width / attrs.viewbox.height;\n  if (attrs.width) {\n    return {\n      'width': attrs.width,\n      'height': Math.floor(attrs.width / ratio)\n    };\n  }\n  if (attrs.height) {\n    return {\n      'width': Math.floor(attrs.height * ratio),\n      'height': attrs.height\n    };\n  }\n  return {\n    'width': attrs.viewbox.width,\n    'height': attrs.viewbox.height\n  };\n}\n\nfunction calculate (buffer) {\n  var root = buffer.toString('utf8').match(extractorRegExps.root);\n  if (root) {\n    var attrs = parseAttributes(root[0]);\n    if (attrs.width && attrs.height) {\n      return calculateByDimensions(attrs);\n    }\n    if (attrs.viewbox) {\n      return calculateByViewbox(attrs);\n    }\n  }\n  throw new TypeError('invalid svg');\n}\n\nmodule.exports = {\n  'detect': isSVG,\n  'calculate': calculate\n};\n"]}