{"version":3,"sources":["mozilla-ast.js"],"names":[],"mappings":"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","file":"mozilla-ast-compiled.js","sourcesContent":["/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\n(function(){\n\n    var normalize_directives = function(body) {\n        var in_directive = true;\n\n        for (var i = 0; i < body.length; i++) {\n            if (in_directive && body[i] instanceof AST_Statement && body[i].body instanceof AST_String) {\n                body[i] = new AST_Directive({\n                    start: body[i].start,\n                    end: body[i].end,\n                    value: body[i].body.value\n                });\n            } else if (in_directive && !(body[i] instanceof AST_Statement && body[i].body instanceof AST_String)) {\n                in_directive = false;\n            }\n        }\n\n        return body;\n    };\n\n    var MOZ_TO_ME = {\n        Program: function(M) {\n            return new AST_Toplevel({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                body: normalize_directives(M.body.map(from_moz))\n            });\n        },\n        FunctionDeclaration: function(M) {\n            return new AST_Defun({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                name: from_moz(M.id),\n                argnames: M.params.map(from_moz),\n                body: normalize_directives(from_moz(M.body).body)\n            });\n        },\n        FunctionExpression: function(M) {\n            return new AST_Function({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                name: from_moz(M.id),\n                argnames: M.params.map(from_moz),\n                body: normalize_directives(from_moz(M.body).body)\n            });\n        },\n        ExpressionStatement: function(M) {\n            return new AST_SimpleStatement({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                body: from_moz(M.expression)\n            });\n        },\n        TryStatement: function(M) {\n            var handlers = M.handlers || [M.handler];\n            if (handlers.length > 1 || M.guardedHandlers && M.guardedHandlers.length) {\n                throw new Error(\"Multiple catch clauses are not supported.\");\n            }\n            return new AST_Try({\n                start    : my_start_token(M),\n                end      : my_end_token(M),\n                body     : from_moz(M.block).body,\n                bcatch   : from_moz(handlers[0]),\n                bfinally : M.finalizer ? new AST_Finally(from_moz(M.finalizer)) : null\n            });\n        },\n        Property: function(M) {\n            var key = M.key;\n            var name = key.type == \"Identifier\" ? key.name : key.value;\n            var args = {\n                start    : my_start_token(key),\n                end      : my_end_token(M.value),\n                key      : name,\n                value    : from_moz(M.value)\n            };\n            switch (M.kind) {\n              case \"init\":\n                return new AST_ObjectKeyVal(args);\n              case \"set\":\n                args.value.name = from_moz(key);\n                return new AST_ObjectSetter(args);\n              case \"get\":\n                args.value.name = from_moz(key);\n                return new AST_ObjectGetter(args);\n            }\n        },\n        ArrayExpression: function(M) {\n            return new AST_Array({\n                start    : my_start_token(M),\n                end      : my_end_token(M),\n                elements : M.elements.map(function(elem){\n                    return elem === null ? new AST_Hole() : from_moz(elem);\n                })\n            });\n        },\n        ObjectExpression: function(M) {\n            return new AST_Object({\n                start      : my_start_token(M),\n                end        : my_end_token(M),\n                properties : M.properties.map(function(prop){\n                    prop.type = \"Property\";\n                    return from_moz(prop)\n                })\n            });\n        },\n        SequenceExpression: function(M) {\n            return AST_Seq.from_array(M.expressions.map(from_moz));\n        },\n        MemberExpression: function(M) {\n            return new (M.computed ? AST_Sub : AST_Dot)({\n                start      : my_start_token(M),\n                end        : my_end_token(M),\n                property   : M.computed ? from_moz(M.property) : M.property.name,\n                expression : from_moz(M.object)\n            });\n        },\n        SwitchCase: function(M) {\n            return new (M.test ? AST_Case : AST_Default)({\n                start      : my_start_token(M),\n                end        : my_end_token(M),\n                expression : from_moz(M.test),\n                body       : M.consequent.map(from_moz)\n            });\n        },\n        VariableDeclaration: function(M) {\n            return new (M.kind === \"const\" ? AST_Const : AST_Var)({\n                start       : my_start_token(M),\n                end         : my_end_token(M),\n                definitions : M.declarations.map(from_moz)\n            });\n        },\n        Literal: function(M) {\n            var val = M.value, args = {\n                start  : my_start_token(M),\n                end    : my_end_token(M)\n            };\n            if (val === null) return new AST_Null(args);\n            switch (typeof val) {\n              case \"string\":\n                args.value = val;\n                return new AST_String(args);\n              case \"number\":\n                args.value = val;\n                return new AST_Number(args);\n              case \"boolean\":\n                return new (val ? AST_True : AST_False)(args);\n              default:\n                var rx = M.regex;\n                if (rx && rx.pattern) {\n                    // RegExpLiteral as per ESTree AST spec\n                    args.value = new RegExp(rx.pattern, rx.flags).toString();\n                } else {\n                    // support legacy RegExp\n                    args.value = M.regex && M.raw ? M.raw : val;\n                }\n                return new AST_RegExp(args);\n            }\n        },\n        Identifier: function(M) {\n            var p = FROM_MOZ_STACK[FROM_MOZ_STACK.length - 2];\n            return new (  p.type == \"LabeledStatement\" ? AST_Label\n                        : p.type == \"VariableDeclarator\" && p.id === M ? (p.kind == \"const\" ? AST_SymbolConst : AST_SymbolVar)\n                        : p.type == \"FunctionExpression\" ? (p.id === M ? AST_SymbolLambda : AST_SymbolFunarg)\n                        : p.type == \"FunctionDeclaration\" ? (p.id === M ? AST_SymbolDefun : AST_SymbolFunarg)\n                        : p.type == \"CatchClause\" ? AST_SymbolCatch\n                        : p.type == \"BreakStatement\" || p.type == \"ContinueStatement\" ? AST_LabelRef\n                        : AST_SymbolRef)({\n                            start : my_start_token(M),\n                            end   : my_end_token(M),\n                            name  : M.name\n                        });\n        }\n    };\n\n    MOZ_TO_ME.UpdateExpression =\n    MOZ_TO_ME.UnaryExpression = function To_Moz_Unary(M) {\n        var prefix = \"prefix\" in M ? M.prefix\n            : M.type == \"UnaryExpression\" ? true : false;\n        return new (prefix ? AST_UnaryPrefix : AST_UnaryPostfix)({\n            start      : my_start_token(M),\n            end        : my_end_token(M),\n            operator   : M.operator,\n            expression : from_moz(M.argument)\n        });\n    };\n\n    map(\"EmptyStatement\", AST_EmptyStatement);\n    map(\"BlockStatement\", AST_BlockStatement, \"body@body\");\n    map(\"IfStatement\", AST_If, \"test>condition, consequent>body, alternate>alternative\");\n    map(\"LabeledStatement\", AST_LabeledStatement, \"label>label, body>body\");\n    map(\"BreakStatement\", AST_Break, \"label>label\");\n    map(\"ContinueStatement\", AST_Continue, \"label>label\");\n    map(\"WithStatement\", AST_With, \"object>expression, body>body\");\n    map(\"SwitchStatement\", AST_Switch, \"discriminant>expression, cases@body\");\n    map(\"ReturnStatement\", AST_Return, \"argument>value\");\n    map(\"ThrowStatement\", AST_Throw, \"argument>value\");\n    map(\"WhileStatement\", AST_While, \"test>condition, body>body\");\n    map(\"DoWhileStatement\", AST_Do, \"test>condition, body>body\");\n    map(\"ForStatement\", AST_For, \"init>init, test>condition, update>step, body>body\");\n    map(\"ForInStatement\", AST_ForIn, \"left>init, right>object, body>body\");\n    map(\"DebuggerStatement\", AST_Debugger);\n    map(\"VariableDeclarator\", AST_VarDef, \"id>name, init>value\");\n    map(\"CatchClause\", AST_Catch, \"param>argname, body%body\");\n\n    map(\"ThisExpression\", AST_This);\n    map(\"BinaryExpression\", AST_Binary, \"operator=operator, left>left, right>right\");\n    map(\"LogicalExpression\", AST_Binary, \"operator=operator, left>left, right>right\");\n    map(\"AssignmentExpression\", AST_Assign, \"operator=operator, left>left, right>right\");\n    map(\"ConditionalExpression\", AST_Conditional, \"test>condition, consequent>consequent, alternate>alternative\");\n    map(\"NewExpression\", AST_New, \"callee>expression, arguments@args\");\n    map(\"CallExpression\", AST_Call, \"callee>expression, arguments@args\");\n\n    def_to_moz(AST_Toplevel, function To_Moz_Program(M) {\n        return {\n            type: \"Program\",\n            body: M.body.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_Defun, function To_Moz_FunctionDeclaration(M) {\n        return {\n            type: \"FunctionDeclaration\",\n            id: to_moz(M.name),\n            params: M.argnames.map(to_moz),\n            body: to_moz_block(M)\n        }\n    });\n\n    def_to_moz(AST_Function, function To_Moz_FunctionExpression(M) {\n        return {\n            type: \"FunctionExpression\",\n            id: to_moz(M.name),\n            params: M.argnames.map(to_moz),\n            body: to_moz_block(M)\n        }\n    });\n\n    def_to_moz(AST_Directive, function To_Moz_Directive(M) {\n        return {\n            type: \"ExpressionStatement\",\n            expression: {\n                type: \"Literal\",\n                value: M.value\n            }\n        };\n    });\n\n    def_to_moz(AST_SimpleStatement, function To_Moz_ExpressionStatement(M) {\n        return {\n            type: \"ExpressionStatement\",\n            expression: to_moz(M.body)\n        };\n    });\n\n    def_to_moz(AST_SwitchBranch, function To_Moz_SwitchCase(M) {\n        return {\n            type: \"SwitchCase\",\n            test: to_moz(M.expression),\n            consequent: M.body.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_Try, function To_Moz_TryStatement(M) {\n        return {\n            type: \"TryStatement\",\n            block: to_moz_block(M),\n            handler: to_moz(M.bcatch),\n            guardedHandlers: [],\n            finalizer: to_moz(M.bfinally)\n        };\n    });\n\n    def_to_moz(AST_Catch, function To_Moz_CatchClause(M) {\n        return {\n            type: \"CatchClause\",\n            param: to_moz(M.argname),\n            guard: null,\n            body: to_moz_block(M)\n        };\n    });\n\n    def_to_moz(AST_Definitions, function To_Moz_VariableDeclaration(M) {\n        return {\n            type: \"VariableDeclaration\",\n            kind: M instanceof AST_Const ? \"const\" : \"var\",\n            declarations: M.definitions.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_Seq, function To_Moz_SequenceExpression(M) {\n        return {\n            type: \"SequenceExpression\",\n            expressions: M.to_array().map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_PropAccess, function To_Moz_MemberExpression(M) {\n        var isComputed = M instanceof AST_Sub;\n        return {\n            type: \"MemberExpression\",\n            object: to_moz(M.expression),\n            computed: isComputed,\n            property: isComputed ? to_moz(M.property) : {type: \"Identifier\", name: M.property}\n        };\n    });\n\n    def_to_moz(AST_Unary, function To_Moz_Unary(M) {\n        return {\n            type: M.operator == \"++\" || M.operator == \"--\" ? \"UpdateExpression\" : \"UnaryExpression\",\n            operator: M.operator,\n            prefix: M instanceof AST_UnaryPrefix,\n            argument: to_moz(M.expression)\n        };\n    });\n\n    def_to_moz(AST_Binary, function To_Moz_BinaryExpression(M) {\n        return {\n            type: M.operator == \"&&\" || M.operator == \"||\" ? \"LogicalExpression\" : \"BinaryExpression\",\n            left: to_moz(M.left),\n            operator: M.operator,\n            right: to_moz(M.right)\n        };\n    });\n\n    def_to_moz(AST_Array, function To_Moz_ArrayExpression(M) {\n        return {\n            type: \"ArrayExpression\",\n            elements: M.elements.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_Object, function To_Moz_ObjectExpression(M) {\n        return {\n            type: \"ObjectExpression\",\n            properties: M.properties.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_ObjectProperty, function To_Moz_Property(M) {\n        var key = (\n            is_identifier(M.key)\n            ? {type: \"Identifier\", name: M.key}\n            : {type: \"Literal\", value: M.key}\n        );\n        var kind;\n        if (M instanceof AST_ObjectKeyVal) {\n            kind = \"init\";\n        } else\n        if (M instanceof AST_ObjectGetter) {\n            kind = \"get\";\n        } else\n        if (M instanceof AST_ObjectSetter) {\n            kind = \"set\";\n        }\n        return {\n            type: \"Property\",\n            kind: kind,\n            key: key,\n            value: to_moz(M.value)\n        };\n    });\n\n    def_to_moz(AST_Symbol, function To_Moz_Identifier(M) {\n        var def = M.definition();\n        return {\n            type: \"Identifier\",\n            name: def ? def.mangled_name || def.name : M.name\n        };\n    });\n\n    def_to_moz(AST_RegExp, function To_Moz_RegExpLiteral(M) {\n        var value = M.value;\n        return {\n            type: \"Literal\",\n            value: value,\n            raw: value.toString(),\n            regex: {\n                pattern: value.source,\n                flags: value.toString().match(/[gimuy]*$/)[0]\n            }\n        };\n    });\n\n    def_to_moz(AST_Constant, function To_Moz_Literal(M) {\n        var value = M.value;\n        if (typeof value === 'number' && (value < 0 || (value === 0 && 1 / value < 0))) {\n            return {\n                type: \"UnaryExpression\",\n                operator: \"-\",\n                prefix: true,\n                argument: {\n                    type: \"Literal\",\n                    value: -value,\n                    raw: M.start.raw\n                }\n            };\n        }\n        return {\n            type: \"Literal\",\n            value: value,\n            raw: M.start.raw\n        };\n    });\n\n    def_to_moz(AST_Atom, function To_Moz_Atom(M) {\n        return {\n            type: \"Identifier\",\n            name: String(M.value)\n        };\n    });\n\n    AST_Boolean.DEFMETHOD(\"to_mozilla_ast\", AST_Constant.prototype.to_mozilla_ast);\n    AST_Null.DEFMETHOD(\"to_mozilla_ast\", AST_Constant.prototype.to_mozilla_ast);\n    AST_Hole.DEFMETHOD(\"to_mozilla_ast\", function To_Moz_ArrayHole() { return null });\n\n    AST_Block.DEFMETHOD(\"to_mozilla_ast\", AST_BlockStatement.prototype.to_mozilla_ast);\n    AST_Lambda.DEFMETHOD(\"to_mozilla_ast\", AST_Function.prototype.to_mozilla_ast);\n\n    /* -----[ tools ]----- */\n\n    function raw_token(moznode) {\n        if (moznode.type == \"Literal\") {\n            return moznode.raw != null ? moznode.raw : moznode.value + \"\";\n        }\n    }\n\n    function my_start_token(moznode) {\n        var loc = moznode.loc, start = loc && loc.start;\n        var range = moznode.range;\n        return new AST_Token({\n            file    : loc && loc.source,\n            line    : start && start.line,\n            col     : start && start.column,\n            pos     : range ? range[0] : moznode.start,\n            endline : start && start.line,\n            endcol  : start && start.column,\n            endpos  : range ? range[0] : moznode.start,\n            raw     : raw_token(moznode),\n        });\n    };\n\n    function my_end_token(moznode) {\n        var loc = moznode.loc, end = loc && loc.end;\n        var range = moznode.range;\n        return new AST_Token({\n            file    : loc && loc.source,\n            line    : end && end.line,\n            col     : end && end.column,\n            pos     : range ? range[1] : moznode.end,\n            endline : end && end.line,\n            endcol  : end && end.column,\n            endpos  : range ? range[1] : moznode.end,\n            raw     : raw_token(moznode),\n        });\n    };\n\n    function map(moztype, mytype, propmap) {\n        var moz_to_me = \"function From_Moz_\" + moztype + \"(M){\\n\";\n        moz_to_me += \"return new U2.\" + mytype.name + \"({\\n\" +\n            \"start: my_start_token(M),\\n\" +\n            \"end: my_end_token(M)\";\n\n        var me_to_moz = \"function To_Moz_\" + moztype + \"(M){\\n\";\n        me_to_moz += \"return {\\n\" +\n            \"type: \" + JSON.stringify(moztype);\n\n        if (propmap) propmap.split(/\\s*,\\s*/).forEach(function(prop){\n            var m = /([a-z0-9$_]+)(=|@|>|%)([a-z0-9$_]+)/i.exec(prop);\n            if (!m) throw new Error(\"Can't understand property map: \" + prop);\n            var moz = m[1], how = m[2], my = m[3];\n            moz_to_me += \",\\n\" + my + \": \";\n            me_to_moz += \",\\n\" + moz + \": \";\n            switch (how) {\n                case \"@\":\n                    moz_to_me += \"M.\" + moz + \".map(from_moz)\";\n                    me_to_moz += \"M.\" +  my + \".map(to_moz)\";\n                    break;\n                case \">\":\n                    moz_to_me += \"from_moz(M.\" + moz + \")\";\n                    me_to_moz += \"to_moz(M.\" + my + \")\";\n                    break;\n                case \"=\":\n                    moz_to_me += \"M.\" + moz;\n                    me_to_moz += \"M.\" + my;\n                    break;\n                case \"%\":\n                    moz_to_me += \"from_moz(M.\" + moz + \").body\";\n                    me_to_moz += \"to_moz_block(M)\";\n                    break;\n                default:\n                    throw new Error(\"Can't understand operator in propmap: \" + prop);\n            }\n        });\n\n        moz_to_me += \"\\n})\\n}\";\n        me_to_moz += \"\\n}\\n}\";\n\n        //moz_to_me = parse(moz_to_me).print_to_string({ beautify: true });\n        //me_to_moz = parse(me_to_moz).print_to_string({ beautify: true });\n        //console.log(moz_to_me);\n\n        moz_to_me = new Function(\"U2\", \"my_start_token\", \"my_end_token\", \"from_moz\", \"return(\" + moz_to_me + \")\")(\n            exports, my_start_token, my_end_token, from_moz\n        );\n        me_to_moz = new Function(\"to_moz\", \"to_moz_block\", \"return(\" + me_to_moz + \")\")(\n            to_moz, to_moz_block\n        );\n        MOZ_TO_ME[moztype] = moz_to_me;\n        def_to_moz(mytype, me_to_moz);\n    };\n\n    var FROM_MOZ_STACK = null;\n\n    function from_moz(node) {\n        FROM_MOZ_STACK.push(node);\n        var ret = node != null ? MOZ_TO_ME[node.type](node) : null;\n        FROM_MOZ_STACK.pop();\n        return ret;\n    };\n\n    AST_Node.from_mozilla_ast = function(node){\n        var save_stack = FROM_MOZ_STACK;\n        FROM_MOZ_STACK = [];\n        var ast = from_moz(node);\n        FROM_MOZ_STACK = save_stack;\n        return ast;\n    };\n\n    function set_moz_loc(mynode, moznode, myparent) {\n        var start = mynode.start;\n        var end = mynode.end;\n        if (start.pos != null && end.endpos != null) {\n            moznode.range = [start.pos, end.endpos];\n        }\n        if (start.line) {\n            moznode.loc = {\n                start: {line: start.line, column: start.col},\n                end: end.endline ? {line: end.endline, column: end.endcol} : null\n            };\n            if (start.file) {\n                moznode.loc.source = start.file;\n            }\n        }\n        return moznode;\n    };\n\n    function def_to_moz(mytype, handler) {\n        mytype.DEFMETHOD(\"to_mozilla_ast\", function() {\n            return set_moz_loc(this, handler(this));\n        });\n    };\n\n    function to_moz(node) {\n        return node != null ? node.to_mozilla_ast() : null;\n    };\n\n    function to_moz_block(node) {\n        return {\n            type: \"BlockStatement\",\n            body: node.body.map(to_moz)\n        };\n    };\n\n})();\n"]}