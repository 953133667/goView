{"version":3,"sources":["test-buffer-iterator.js"],"names":[],"mappings":"AAAA;;AACA,IAAI,QAAQ,GAAR,CAAY,WAAhB,EAA6B,OAAO,mBAAP,GAA6B,KAA7B;AAC7B,IAAI,SAAS,QAAQ,QAAR,EAAkB,MAA/B;AACA,IAAI,SAAS,EAAb;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;;AAEA,IAAI,SAAS,IAAI,MAAJ,CAAW,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAX,CAAb;AACA,IAAI,GAAJ;AACA,IAAI,CAAJ;;AAEA;;AAEA,MAAM,EAAN;;AAEA,KAAK,CAAL,IAAU,MAAV,EACE,IAAI,IAAJ,CAAS,CAAT;;AAEF,OAAO,SAAP,CAAiB,GAAjB,EAAsB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAtB;;AAGA;;AAEA,MAAM,EAAN;;AAEA,KAAK,CAAL,IAAU,OAAO,OAAO,QAAd,GAAV,EACE,IAAI,IAAJ,CAAS,CAAT;;AAEF,OAAO,SAAP,CAAiB,GAAjB,EAAsB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAtB;;AAGA;;AAEA,MAAM,EAAN;;AAEA,KAAK,CAAL,IAAU,OAAO,MAAP,EAAV,EACE,IAAI,IAAJ,CAAS,CAAT;;AAEF,OAAO,SAAP,CAAiB,GAAjB,EAAsB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAtB;;AAGA;;AAEA,MAAM,EAAN;;AAEA,KAAK,CAAL,IAAU,OAAO,IAAP,EAAV,EACE,IAAI,IAAJ,CAAS,CAAT;;AAEF,OAAO,SAAP,CAAiB,GAAjB,EAAsB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAtB;;AAGA;;AAEA,MAAM,EAAN;;AAEA,KAAK,IAAI,CAAT,IAAc,OAAO,OAAP,EAAd,EACE,IAAI,IAAJ,CAAS,CAAT;;AAEF,OAAO,SAAP,CAAiB,GAAjB,EAAsB,CACpB,CAAC,CAAD,EAAI,CAAJ,CADoB,EAEpB,CAAC,CAAD,EAAI,CAAJ,CAFoB,EAGpB,CAAC,CAAD,EAAI,CAAJ,CAHoB,EAIpB,CAAC,CAAD,EAAI,CAAJ,CAJoB,EAKpB,CAAC,CAAD,EAAI,CAAJ,CALoB,CAAtB","file":"test-buffer-iterator-compiled.js","sourcesContent":["'use strict';\nif (process.env.OBJECT_IMPL) global.TYPED_ARRAY_SUPPORT = false;\nvar Buffer = require('../../').Buffer;\nvar common = {};\nvar assert = require('assert');\n\nvar buffer = new Buffer([1, 2, 3, 4, 5]);\nvar arr;\nvar b;\n\n// buffers should be iterable\n\narr = [];\n\nfor (b of buffer)\n  arr.push(b);\n\nassert.deepEqual(arr, [1, 2, 3, 4, 5]);\n\n\n// buffer iterators should be iterable\n\narr = [];\n\nfor (b of buffer[Symbol.iterator]())\n  arr.push(b);\n\nassert.deepEqual(arr, [1, 2, 3, 4, 5]);\n\n\n// buffer#values() should return iterator for values\n\narr = [];\n\nfor (b of buffer.values())\n  arr.push(b);\n\nassert.deepEqual(arr, [1, 2, 3, 4, 5]);\n\n\n// buffer#keys() should return iterator for keys\n\narr = [];\n\nfor (b of buffer.keys())\n  arr.push(b);\n\nassert.deepEqual(arr, [0, 1, 2, 3, 4]);\n\n\n// buffer#entries() should return iterator for entries\n\narr = [];\n\nfor (var b of buffer.entries())\n  arr.push(b);\n\nassert.deepEqual(arr, [\n  [0, 1],\n  [1, 2],\n  [2, 3],\n  [3, 4],\n  [4, 5]\n]);\n\n"]}