{"version":3,"sources":["test-buffer-arraybuffer.js"],"names":[],"mappings":"AAAA;;AACA,IAAI,QAAQ,GAAR,CAAY,WAAhB,EAA6B,OAAO,mBAAP,GAA6B,KAA7B;AAC7B,IAAI,SAAS,QAAQ,QAAR,EAAkB,MAA/B;;AAEA,IAAI,SAAS,EAAb;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;;AAEA,IAAI,SAAS,QAAQ,QAAR,EAAkB,MAA/B;AACA,IAAI,SAAS,EAAb;;AAEA,IAAI,KAAK,IAAI,WAAJ,CAAgB,MAAhB,CAAT;AACA,IAAI,KAAK,IAAI,QAAJ,CAAa,EAAb,CAAT;AACA,IAAI,KAAK,IAAI,UAAJ,CAAe,EAAf,CAAT;AACA,IAAI,MAAM,IAAI,MAAJ,CAAW,EAAX,CAAV;;AAGA,OAAO,EAAP,CAAU,OAAO,QAAP,CAAgB,GAAhB,CAAV;AACA;AACA;AACA,OAAO,KAAP,CAAa,IAAI,MAAjB,EAAyB,SAAzB;AACA,OAAO,KAAP,CAAa,IAAI,MAAjB,EAAyB,EAAzB;AACA,OAAO,KAAP,CAAa,IAAI,MAAjB,EAAyB,GAAG,UAA5B;;AAGA,IAAI,IAAJ,CAAS,GAAT;AACA,KAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAApB,EAA4B,GAA5B,EAAiC;AAC/B,SAAO,KAAP,CAAa,GAAG,CAAH,CAAb,EAAoB,GAApB;AACA,KAAG,CAAH,IAAQ,GAAR;AACA,SAAO,KAAP,CAAa,IAAI,CAAJ,CAAb,EAAqB,GAArB;AACD;;AAED,IAAI,aAAJ,CAAkB,KAAlB,EAAyB,CAAzB;AACA,IAAI,aAAJ,CAAkB,KAAlB,EAAyB,CAAzB;AACA,IAAI,aAAJ,CAAkB,MAAlB,EAA0B,CAA1B;;AAEA,OAAO,KAAP,CAAa,GAAG,SAAH,CAAa,CAAb,EAAgB,IAAhB,CAAb,EAAoC,KAApC;AACA,OAAO,KAAP,CAAa,GAAG,SAAH,CAAa,CAAb,CAAb,EAA8B,KAA9B;AACA,OAAO,KAAP,CAAa,GAAG,UAAH,CAAc,CAAd,EAAiB,IAAjB,CAAb,EAAqC,MAArC;;AAGA;;AAEA,OAAO,MAAP,CAAc,YAAW;AACvB,WAAS,EAAT,GAAc,CAAG;AACjB,KAAG,SAAH,GAAe,WAAf;AACA,KAAG,SAAH,CAAa,SAAb,GAAyB,YAAY,SAArC;AACA,MAAI,MAAJ,CAAW,IAAI,EAAJ,EAAX;AACD,CALD,EAKG,SALH","file":"test-buffer-arraybuffer-compiled.js","sourcesContent":["'use strict';\nif (process.env.OBJECT_IMPL) global.TYPED_ARRAY_SUPPORT = false;\nvar Buffer = require('../../').Buffer;\n\nvar common = {};\nvar assert = require('assert');\n\nvar Buffer = require('../../').Buffer;\nvar LENGTH = 16;\n\nvar ab = new ArrayBuffer(LENGTH);\nvar dv = new DataView(ab);\nvar ui = new Uint8Array(ab);\nvar buf = new Buffer(ab);\n\n\nassert.ok(Buffer.isBuffer(buf));\n// For backwards compatibility of old .parent property test that if buf is not\n// a slice then .parent should be undefined.\nassert.equal(buf.parent, undefined);\nassert.equal(buf.buffer, ab);\nassert.equal(buf.length, ab.byteLength);\n\n\nbuf.fill(0xC);\nfor (var i = 0; i < LENGTH; i++) {\n  assert.equal(ui[i], 0xC);\n  ui[i] = 0xF;\n  assert.equal(buf[i], 0xF);\n}\n\nbuf.writeUInt32LE(0xF00, 0);\nbuf.writeUInt32BE(0xB47, 4);\nbuf.writeDoubleLE(3.1415, 8);\n\nassert.equal(dv.getUint32(0, true), 0xF00);\nassert.equal(dv.getUint32(4), 0xB47);\nassert.equal(dv.getFloat64(8, true), 3.1415);\n\n\n// Now test protecting users from doing stupid things\n\nassert.throws(function() {\n  function AB() { }\n  AB.__proto__ = ArrayBuffer;\n  AB.prototype.__proto__ = ArrayBuffer.prototype;\n  new Buffer(new AB());\n}, TypeError);\n\n"]}