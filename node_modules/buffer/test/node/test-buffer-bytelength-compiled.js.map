{"version":3,"sources":["test-buffer-bytelength.js"],"names":[],"mappings":"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","file":"test-buffer-bytelength-compiled.js","sourcesContent":["'use strict';\nif (process.env.OBJECT_IMPL) global.TYPED_ARRAY_SUPPORT = false;\nvar Buffer = require('../../').Buffer;\n\nvar common = {};\nvar assert = require('assert');\nvar Buffer = require('../../').Buffer;\n\n// coerce values to string\nassert.equal(Buffer.byteLength(32, 'raw'), 2);\nassert.equal(Buffer.byteLength(NaN, 'utf8'), 3);\nassert.equal(Buffer.byteLength({}, 'raws'), 15);\nassert.equal(Buffer.byteLength(), 9);\n\n// special case: zero length string\nassert.equal(Buffer.byteLength('', 'ascii'), 0);\nassert.equal(Buffer.byteLength('', 'HeX'), 0);\n\n// utf8\nassert.equal(Buffer.byteLength('∑éllö wørl∂!', 'utf-8'), 19);\nassert.equal(Buffer.byteLength('κλμνξο', 'utf8'), 12);\nassert.equal(Buffer.byteLength('挵挶挷挸挹', 'utf-8'), 15);\nassert.equal(Buffer.byteLength('𠝹𠱓𠱸', 'UTF8'), 12);\n// without an encoding, utf8 should be assumed\nassert.equal(Buffer.byteLength('hey there'), 9);\nassert.equal(Buffer.byteLength('𠱸挶νξ#xx :)'), 17);\nassert.equal(Buffer.byteLength('hello world', ''), 11);\n// it should also be assumed with unrecognized encoding\nassert.equal(Buffer.byteLength('hello world', 'abc'), 11);\nassert.equal(Buffer.byteLength('ßœ∑≈', 'unkn0wn enc0ding'), 10);\n\n// base64\nassert.equal(Buffer.byteLength('aGVsbG8gd29ybGQ=', 'base64'), 11);\nassert.equal(Buffer.byteLength('bm9kZS5qcyByb2NrcyE=', 'base64'), 14);\nassert.equal(Buffer.byteLength('aGkk', 'base64'), 3);\nassert.equal(Buffer.byteLength('bHNrZGZsa3NqZmtsc2xrZmFqc2RsZmtqcw==',\n    'base64'), 25);\n// special padding\nassert.equal(Buffer.byteLength('aaa=', 'base64'), 2);\nassert.equal(Buffer.byteLength('aaaa==', 'base64'), 3);\n\nassert.equal(Buffer.byteLength('Il était tué'), 14);\nassert.equal(Buffer.byteLength('Il était tué', 'utf8'), 14);\nassert.equal(Buffer.byteLength('Il était tué', 'ascii'), 12);\nassert.equal(Buffer.byteLength('Il était tué', 'binary'), 12);\n['ucs2', 'ucs-2', 'utf16le', 'utf-16le'].forEach(function(encoding) {\n  assert.equal(24, Buffer.byteLength('Il était tué', encoding));\n});\n\n"]}