{"version":3,"sources":["test-buffer.js"],"names":[],"mappings":"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","file":"test-buffer-compiled.js","sourcesContent":["'use strict';\nif (process.env.OBJECT_IMPL) global.TYPED_ARRAY_SUPPORT = false;\nvar Buffer = require('../../').Buffer;\nvar common = {};\nvar assert = require('assert');\n\nvar Buffer = require('../../').Buffer;\nvar SlowBuffer = require('../../').SlowBuffer;\n\n// counter to ensure unique value is always copied\nvar cntr = 0;\n\nvar b = Buffer(1024); // safe constructor\n\n// console.log('b.length == %d', b.length);\nassert.strictEqual(1024, b.length);\n\nb[0] = 255;\nassert.strictEqual(b[0], 255);\n\nfor (var i = 0; i < 1024; i++) {\n  b[i] = i % 256;\n}\n\nfor (var i = 0; i < 1024; i++) {\n  assert.strictEqual(i % 256, b[i]);\n}\n\nvar c = new Buffer(512);\n// console.log('c.length == %d', c.length);\nassert.strictEqual(512, c.length);\n\n// First check Buffer#fill() works as expected.\n\nassert.throws(function() {\n  Buffer(8).fill('a', -1);\n});\n\nassert.throws(function() {\n  Buffer(8).fill('a', 0, 9);\n});\n\n// Make sure this doesn't hang indefinitely.\nBuffer(8).fill('');\n\nvar buf = new Buffer(64);\nbuf.fill(10);\nfor (var i = 0; i < buf.length; i++)\n  assert.equal(buf[i], 10);\n\nbuf.fill(11, 0, buf.length >> 1);\nfor (var i = 0; i < buf.length >> 1; i++)\n  assert.equal(buf[i], 11);\nfor (var i = (buf.length >> 1) + 1; i < buf.length; i++)\n  assert.equal(buf[i], 10);\n\nbuf.fill('h');\nfor (var i = 0; i < buf.length; i++)\n  assert.equal('h'.charCodeAt(0), buf[i]);\n\nbuf.fill(0);\nfor (var i = 0; i < buf.length; i++)\n  assert.equal(0, buf[i]);\n\nbuf.fill(null);\nfor (var i = 0; i < buf.length; i++)\n  assert.equal(0, buf[i]);\n\nbuf.fill(1, 16, 32);\nfor (var i = 0; i < 16; i++)\n  assert.equal(0, buf[i]);\nfor (; i < 32; i++)\n  assert.equal(1, buf[i]);\nfor (; i < buf.length; i++)\n  assert.equal(0, buf[i]);\n\nvar buf = new Buffer(10);\nbuf.fill('abc');\nassert.equal(buf.toString(), 'abcabcabca');\nbuf.fill('է');\nassert.equal(buf.toString(), 'էէէէէ');\n\n// copy 512 bytes, from 0 to 512.\nb.fill(++cntr);\nc.fill(++cntr);\nvar copied = b.copy(c, 0, 0, 512);\n// console.log('copied %d bytes from b into c', copied);\nassert.strictEqual(512, copied);\nfor (var i = 0; i < c.length; i++) {\n  assert.strictEqual(b[i], c[i]);\n}\n\n// copy c into b, without specifying sourceEnd\nb.fill(++cntr);\nc.fill(++cntr);\nvar copied = c.copy(b, 0, 0);\n// console.log('copied %d bytes from c into b w/o sourceEnd', copied);\nassert.strictEqual(c.length, copied);\nfor (var i = 0; i < c.length; i++) {\n  assert.strictEqual(c[i], b[i]);\n}\n\n// copy c into b, without specifying sourceStart\nb.fill(++cntr);\nc.fill(++cntr);\nvar copied = c.copy(b, 0);\n// console.log('copied %d bytes from c into b w/o sourceStart', copied);\nassert.strictEqual(c.length, copied);\nfor (var i = 0; i < c.length; i++) {\n  assert.strictEqual(c[i], b[i]);\n}\n\n// copy longer buffer b to shorter c without targetStart\nb.fill(++cntr);\nc.fill(++cntr);\nvar copied = b.copy(c);\n// console.log('copied %d bytes from b into c w/o targetStart', copied);\nassert.strictEqual(c.length, copied);\nfor (var i = 0; i < c.length; i++) {\n  assert.strictEqual(b[i], c[i]);\n}\n\n// copy starting near end of b to c\nb.fill(++cntr);\nc.fill(++cntr);\nvar copied = b.copy(c, 0, b.length - Math.floor(c.length / 2));\n// console.log('copied %d bytes from end of b into beginning of c', copied);\nassert.strictEqual(Math.floor(c.length / 2), copied);\nfor (var i = 0; i < Math.floor(c.length / 2); i++) {\n  assert.strictEqual(b[b.length - Math.floor(c.length / 2) + i], c[i]);\n}\nfor (var i = Math.floor(c.length / 2) + 1; i < c.length; i++) {\n  assert.strictEqual(c[c.length - 1], c[i]);\n}\n\n// try to copy 513 bytes, and check we don't overrun c\nb.fill(++cntr);\nc.fill(++cntr);\nvar copied = b.copy(c, 0, 0, 513);\n// console.log('copied %d bytes from b trying to overrun c', copied);\nassert.strictEqual(c.length, copied);\nfor (var i = 0; i < c.length; i++) {\n  assert.strictEqual(b[i], c[i]);\n}\n\n// copy 768 bytes from b into b\nb.fill(++cntr);\nb.fill(++cntr, 256);\nvar copied = b.copy(b, 0, 256, 1024);\n// console.log('copied %d bytes from b into b', copied);\nassert.strictEqual(768, copied);\nfor (var i = 0; i < b.length; i++) {\n  assert.strictEqual(cntr, b[i]);\n}\n\n// copy string longer than buffer length (failure will segfault)\nvar bb = new Buffer(10);\nbb.fill('hello crazy world');\n\n\nvar caught_error = null;\n\n// try to copy from before the beginning of b\ncaught_error = null;\ntry {\n  var copied = b.copy(c, 0, 100, 10);\n} catch (err) {\n  caught_error = err;\n}\n\n// copy throws at negative sourceStart\nassert.throws(function() {\n  Buffer(5).copy(Buffer(5), 0, -1);\n}, RangeError);\n\n// check sourceEnd resets to targetEnd if former is greater than the latter\nb.fill(++cntr);\nc.fill(++cntr);\nvar copied = b.copy(c, 0, 0, 1025);\n// console.log('copied %d bytes from b into c', copied);\nfor (var i = 0; i < c.length; i++) {\n  assert.strictEqual(b[i], c[i]);\n}\n\n// throw with negative sourceEnd\n// console.log('test copy at negative sourceEnd');\nassert.throws(function() {\n  b.copy(c, 0, 0, -1);\n}, RangeError);\n\n// when sourceStart is greater than sourceEnd, zero copied\nassert.equal(b.copy(c, 0, 100, 10), 0);\n\n// when targetStart > targetLength, zero copied\nassert.equal(b.copy(c, 512, 0, 10), 0);\n\nvar caught_error;\n\n// invalid encoding for Buffer.toString\ncaught_error = null;\ntry {\n  var copied = b.toString('invalid');\n} catch (err) {\n  caught_error = err;\n}\nassert.strictEqual('Unknown encoding: invalid', caught_error.message);\n\n// invalid encoding for Buffer.write\ncaught_error = null;\ntry {\n  var copied = b.write('test string', 0, 5, 'invalid');\n} catch (err) {\n  caught_error = err;\n}\nassert.strictEqual('Unknown encoding: invalid', caught_error.message);\n\n// try to create 0-length buffers\nnew Buffer('');\nnew Buffer('', 'ascii');\nnew Buffer('', 'binary');\nnew Buffer(0);\n\n// try to write a 0-length string beyond the end of b\nassert.throws(function() {\n  b.write('', 2048);\n}, RangeError);\n\n// throw when writing to negative offset\nassert.throws(function() {\n  b.write('a', -1);\n}, RangeError);\n\n// throw when writing past bounds from the pool\nassert.throws(function() {\n  b.write('a', 2048);\n}, RangeError);\n\n// throw when writing to negative offset\nassert.throws(function() {\n  b.write('a', -1);\n}, RangeError);\n\n// try to copy 0 bytes worth of data into an empty buffer\nb.copy(new Buffer(0), 0, 0, 0);\n\n// try to copy 0 bytes past the end of the target buffer\nb.copy(new Buffer(0), 1, 1, 1);\nb.copy(new Buffer(1), 1, 1, 1);\n\n// try to copy 0 bytes from past the end of the source buffer\nb.copy(new Buffer(1), 0, 2048, 2048);\n\n// try to toString() a 0-length slice of a buffer, both within and without the\n// valid buffer range\nassert.equal(new Buffer('abc').toString('ascii', 0, 0), '');\nassert.equal(new Buffer('abc').toString('ascii', -100, -100), '');\nassert.equal(new Buffer('abc').toString('ascii', 100, 100), '');\n\n// try toString() with a object as a encoding\nassert.equal(new Buffer('abc').toString({toString: function() {\n  return 'ascii';\n}}), 'abc');\n\n// testing for smart defaults and ability to pass string values as offset\nvar writeTest = new Buffer('abcdes');\nwriteTest.write('n', 'ascii');\nwriteTest.write('o', 'ascii', '1');\nwriteTest.write('d', '2', 'ascii');\nwriteTest.write('e', 3, 'ascii');\nwriteTest.write('j', 'ascii', 4);\nassert.equal(writeTest.toString(), 'nodejs');\n\n// ASCII slice test\n\nvar asciiString = 'hello world';\nvar offset = 100;\n\nfor (var i = 0; i < asciiString.length; i++) {\n  b[i] = asciiString.charCodeAt(i);\n}\nvar asciiSlice = b.toString('ascii', 0, asciiString.length);\nassert.equal(asciiString, asciiSlice);\n\nvar written = b.write(asciiString, offset, 'ascii');\nassert.equal(asciiString.length, written);\nvar asciiSlice = b.toString('ascii', offset, offset + asciiString.length);\nassert.equal(asciiString, asciiSlice);\n\nvar sliceA = b.slice(offset, offset + asciiString.length);\nvar sliceB = b.slice(offset, offset + asciiString.length);\nfor (var i = 0; i < asciiString.length; i++) {\n  assert.equal(sliceA[i], sliceB[i]);\n}\n\n// UTF-8 slice test\n\nvar utf8String = '¡hέlló wôrld!';\nvar offset = 100;\n\nb.write(utf8String, 0, Buffer.byteLength(utf8String), 'utf8');\nvar utf8Slice = b.toString('utf8', 0, Buffer.byteLength(utf8String));\nassert.equal(utf8String, utf8Slice);\n\nvar written = b.write(utf8String, offset, 'utf8');\nassert.equal(Buffer.byteLength(utf8String), written);\nutf8Slice = b.toString('utf8', offset, offset + Buffer.byteLength(utf8String));\nassert.equal(utf8String, utf8Slice);\n\nvar sliceA = b.slice(offset, offset + Buffer.byteLength(utf8String));\nvar sliceB = b.slice(offset, offset + Buffer.byteLength(utf8String));\nfor (var i = 0; i < Buffer.byteLength(utf8String); i++) {\n  assert.equal(sliceA[i], sliceB[i]);\n}\n\nvar slice = b.slice(100, 150);\nassert.equal(50, slice.length);\nfor (var i = 0; i < 50; i++) {\n  assert.equal(b[100 + i], slice[i]);\n}\n\n\n// make sure only top level parent propagates from allocPool\nvar b = new Buffer(5);\nvar c = b.slice(0, 4);\nvar d = c.slice(0, 2);\nassert.equal(b.parent, c.parent);\nassert.equal(b.parent, d.parent);\n\n// also from a non-pooled instance\nvar b = new SlowBuffer(5);\nvar c = b.slice(0, 4);\nvar d = c.slice(0, 2);\n\n\n// Bug regression test\nvar testValue = '\\u00F6\\u65E5\\u672C\\u8A9E'; // ö日本語\nvar buffer = new Buffer(32);\nvar size = buffer.write(testValue, 0, 'utf8');\n// console.log('bytes written to buffer: ' + size);\nvar slice = buffer.toString('utf8', 0, size);\nassert.equal(slice, testValue);\n\n\n// Test triple  slice\nvar a = new Buffer(8);\nfor (var i = 0; i < 8; i++) a[i] = i;\nvar b = a.slice(4, 8);\nassert.equal(4, b[0]);\nassert.equal(5, b[1]);\nassert.equal(6, b[2]);\nassert.equal(7, b[3]);\nvar c = b.slice(2, 4);\nassert.equal(6, c[0]);\nassert.equal(7, c[1]);\n\n\nvar d = new Buffer([23, 42, 255]);\nassert.equal(d.length, 3);\nassert.equal(d[0], 23);\nassert.equal(d[1], 42);\nassert.equal(d[2], 255);\nassert.deepEqual(d, new Buffer(d));\n\nvar e = new Buffer('über');\n// console.error('uber: \\'%s\\'', e.toString());\nassert.deepEqual(e, new Buffer([195, 188, 98, 101, 114]));\n\nvar f = new Buffer('über', 'ascii');\n// console.error('f.length: %d     (should be 4)', f.length);\nassert.deepEqual(f, new Buffer([252, 98, 101, 114]));\n\n['ucs2', 'ucs-2', 'utf16le', 'utf-16le'].forEach(function(encoding) {\n  var f = new Buffer('über', encoding);\n//   console.error('f.length: %d     (should be 8)', f.length);\n  assert.deepEqual(f, new Buffer([252, 0, 98, 0, 101, 0, 114, 0]));\n\n  var f = new Buffer('привет', encoding);\n//   console.error('f.length: %d     (should be 12)', f.length);\n  assert.deepEqual(f, new Buffer([63, 4, 64, 4, 56, 4, 50, 4, 53, 4, 66, 4]));\n  assert.equal(f.toString(encoding), 'привет');\n\n  var f = new Buffer([0, 0, 0, 0, 0]);\n  assert.equal(f.length, 5);\n  var size = f.write('あいうえお', encoding);\n//   console.error('bytes written to buffer: %d     (should be 4)', size);\n  assert.equal(size, 4);\n  assert.deepEqual(f, new Buffer([0x42, 0x30, 0x44, 0x30, 0x00]));\n});\n\nvar f = new Buffer('\\uD83D\\uDC4D', 'utf-16le'); // THUMBS UP SIGN (U+1F44D)\nassert.equal(f.length, 4);\nassert.deepEqual(f, new Buffer('3DD84DDC', 'hex'));\n\n\nvar arrayIsh = {0: 0, 1: 1, 2: 2, 3: 3, length: 4};\nvar g = new Buffer(arrayIsh);\nassert.deepEqual(g, new Buffer([0, 1, 2, 3]));\nvar strArrayIsh = {0: '0', 1: '1', 2: '2', 3: '3', length: 4};\ng = new Buffer(strArrayIsh);\nassert.deepEqual(g, new Buffer([0, 1, 2, 3]));\n\n\n//\n// Test toString('base64')\n//\nassert.equal('TWFu', (new Buffer('Man')).toString('base64'));\n\n// test that regular and URL-safe base64 both work\nvar expected = [0xff, 0xff, 0xbe, 0xff, 0xef, 0xbf, 0xfb, 0xef, 0xff];\nassert.deepEqual(Buffer('//++/++/++//', 'base64'), Buffer(expected));\nassert.deepEqual(Buffer('__--_--_--__', 'base64'), Buffer(expected));\n\n// big example\nvar quote = 'Man is distinguished, not only by his reason, but by this ' +\n            'singular passion from other animals, which is a lust ' +\n            'of the mind, that by a perseverance of delight in the continued ' +\n            'and indefatigable generation of knowledge, exceeds the short ' +\n            'vehemence of any carnal pleasure.';\nvar expected = 'TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24s' +\n               'IGJ1dCBieSB0aGlzIHNpbmd1bGFyIHBhc3Npb24gZnJvbSBvdGhlciBhbmltY' +\n               'WxzLCB3aGljaCBpcyBhIGx1c3Qgb2YgdGhlIG1pbmQsIHRoYXQgYnkgYSBwZX' +\n               'JzZXZlcmFuY2Ugb2YgZGVsaWdodCBpbiB0aGUgY29udGludWVkIGFuZCBpbmR' +\n               'lZmF0aWdhYmxlIGdlbmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRo' +\n               'ZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4=';\nassert.equal(expected, (new Buffer(quote)).toString('base64'));\n\n\nb = new Buffer(1024);\nvar bytesWritten = b.write(expected, 0, 'base64');\nassert.equal(quote.length, bytesWritten);\nassert.equal(quote, b.toString('ascii', 0, quote.length));\n\n// check that the base64 decoder ignores whitespace\nvar expectedWhite = expected.slice(0, 60) + ' \\n' +\n                    expected.slice(60, 120) + ' \\n' +\n                    expected.slice(120, 180) + ' \\n' +\n                    expected.slice(180, 240) + ' \\n' +\n                    expected.slice(240, 300) + '\\n' +\n                    expected.slice(300, 360) + '\\n';\nb = new Buffer(1024);\nbytesWritten = b.write(expectedWhite, 0, 'base64');\nassert.equal(quote.length, bytesWritten);\nassert.equal(quote, b.toString('ascii', 0, quote.length));\n\n// check that the base64 decoder on the constructor works\n// even in the presence of whitespace.\nb = new Buffer(expectedWhite, 'base64');\nassert.equal(quote.length, b.length);\nassert.equal(quote, b.toString('ascii', 0, quote.length));\n\n// check that the base64 decoder ignores illegal chars\nvar expectedIllegal = expected.slice(0, 60) + ' \\x80' +\n                      expected.slice(60, 120) + ' \\xff' +\n                      expected.slice(120, 180) + ' \\x00' +\n                      expected.slice(180, 240) + ' \\x98' +\n                      expected.slice(240, 300) + '\\x03' +\n                      expected.slice(300, 360);\nb = new Buffer(expectedIllegal, 'base64');\nassert.equal(quote.length, b.length);\nassert.equal(quote, b.toString('ascii', 0, quote.length));\n\n\nassert.equal(new Buffer('', 'base64').toString(), '');\nassert.equal(new Buffer('K', 'base64').toString(), '');\n\n// multiple-of-4 with padding\nassert.equal(new Buffer('Kg==', 'base64').toString(), '*');\nassert.equal(new Buffer('Kio=', 'base64').toString(), '**');\nassert.equal(new Buffer('Kioq', 'base64').toString(), '***');\nassert.equal(new Buffer('KioqKg==', 'base64').toString(), '****');\nassert.equal(new Buffer('KioqKio=', 'base64').toString(), '*****');\nassert.equal(new Buffer('KioqKioq', 'base64').toString(), '******');\nassert.equal(new Buffer('KioqKioqKg==', 'base64').toString(), '*******');\nassert.equal(new Buffer('KioqKioqKio=', 'base64').toString(), '********');\nassert.equal(new Buffer('KioqKioqKioq', 'base64').toString(), '*********');\nassert.equal(new Buffer('KioqKioqKioqKg==', 'base64').toString(),\n             '**********');\nassert.equal(new Buffer('KioqKioqKioqKio=', 'base64').toString(),\n             '***********');\nassert.equal(new Buffer('KioqKioqKioqKioq', 'base64').toString(),\n             '************');\nassert.equal(new Buffer('KioqKioqKioqKioqKg==', 'base64').toString(),\n             '*************');\nassert.equal(new Buffer('KioqKioqKioqKioqKio=', 'base64').toString(),\n             '**************');\nassert.equal(new Buffer('KioqKioqKioqKioqKioq', 'base64').toString(),\n             '***************');\nassert.equal(new Buffer('KioqKioqKioqKioqKioqKg==', 'base64').toString(),\n             '****************');\nassert.equal(new Buffer('KioqKioqKioqKioqKioqKio=', 'base64').toString(),\n             '*****************');\nassert.equal(new Buffer('KioqKioqKioqKioqKioqKioq', 'base64').toString(),\n             '******************');\nassert.equal(new Buffer('KioqKioqKioqKioqKioqKioqKg==', 'base64').toString(),\n             '*******************');\nassert.equal(new Buffer('KioqKioqKioqKioqKioqKioqKio=', 'base64').toString(),\n             '********************');\n\n// no padding, not a multiple of 4\nassert.equal(new Buffer('Kg', 'base64').toString(), '*');\nassert.equal(new Buffer('Kio', 'base64').toString(), '**');\nassert.equal(new Buffer('KioqKg', 'base64').toString(), '****');\nassert.equal(new Buffer('KioqKio', 'base64').toString(), '*****');\nassert.equal(new Buffer('KioqKioqKg', 'base64').toString(), '*******');\nassert.equal(new Buffer('KioqKioqKio', 'base64').toString(), '********');\nassert.equal(new Buffer('KioqKioqKioqKg', 'base64').toString(), '**********');\nassert.equal(new Buffer('KioqKioqKioqKio', 'base64').toString(), '***********');\nassert.equal(new Buffer('KioqKioqKioqKioqKg', 'base64').toString(),\n             '*************');\nassert.equal(new Buffer('KioqKioqKioqKioqKio', 'base64').toString(),\n             '**************');\nassert.equal(new Buffer('KioqKioqKioqKioqKioqKg', 'base64').toString(),\n             '****************');\nassert.equal(new Buffer('KioqKioqKioqKioqKioqKio', 'base64').toString(),\n             '*****************');\nassert.equal(new Buffer('KioqKioqKioqKioqKioqKioqKg', 'base64').toString(),\n             '*******************');\nassert.equal(new Buffer('KioqKioqKioqKioqKioqKioqKio', 'base64').toString(),\n             '********************');\n\n// handle padding graciously, multiple-of-4 or not\nassert.equal(new Buffer('72INjkR5fchcxk9+VgdGPFJDxUBFR5/rMFsghgxADiw==',\n                        'base64').length, 32);\nassert.equal(new Buffer('72INjkR5fchcxk9+VgdGPFJDxUBFR5/rMFsghgxADiw=',\n                        'base64').length, 32);\nassert.equal(new Buffer('72INjkR5fchcxk9+VgdGPFJDxUBFR5/rMFsghgxADiw',\n                        'base64').length, 32);\nassert.equal(new Buffer('w69jACy6BgZmaFvv96HG6MYksWytuZu3T1FvGnulPg==',\n                        'base64').length, 31);\nassert.equal(new Buffer('w69jACy6BgZmaFvv96HG6MYksWytuZu3T1FvGnulPg=',\n                        'base64').length, 31);\nassert.equal(new Buffer('w69jACy6BgZmaFvv96HG6MYksWytuZu3T1FvGnulPg',\n                        'base64').length, 31);\n\n// This string encodes single '.' character in UTF-16\nvar dot = new Buffer('//4uAA==', 'base64');\nassert.equal(dot[0], 0xff);\nassert.equal(dot[1], 0xfe);\nassert.equal(dot[2], 0x2e);\nassert.equal(dot[3], 0x00);\nassert.equal(dot.toString('base64'), '//4uAA==');\n\n// Writing base64 at a position > 0 should not mangle the result.\n//\n// https://github.com/joyent/node/issues/402\nvar segments = ['TWFkbmVzcz8h', 'IFRoaXM=', 'IGlz', 'IG5vZGUuanMh'];\nvar buf = new Buffer(64);\nvar pos = 0;\n\nfor (var i = 0; i < segments.length; ++i) {\n  pos += b.write(segments[i], pos, 'base64');\n}\nassert.equal(b.toString('binary', 0, pos), 'Madness?! This is node.js!');\n\n// Creating buffers larger than pool size.\nvar l = Buffer.poolSize + 5;\nvar s = '';\nfor (i = 0; i < l; i++) {\n  s += 'h';\n}\n\nvar b = new Buffer(s);\n\nfor (i = 0; i < l; i++) {\n  assert.equal('h'.charCodeAt(0), b[i]);\n}\n\nvar sb = b.toString();\nassert.equal(sb.length, s.length);\nassert.equal(sb, s);\n\n\n// Single argument slice\nb = new Buffer('abcde');\nassert.equal('bcde', b.slice(1).toString());\n\n// slice(0,0).length === 0\nassert.equal(0, Buffer('hello').slice(0, 0).length);\n\n// test hex toString\n// console.log('Create hex string from buffer');\nvar hexb = new Buffer(256);\nfor (var i = 0; i < 256; i++) {\n  hexb[i] = i;\n}\nvar hexStr = hexb.toString('hex');\nassert.equal(hexStr,\n             '000102030405060708090a0b0c0d0e0f' +\n             '101112131415161718191a1b1c1d1e1f' +\n             '202122232425262728292a2b2c2d2e2f' +\n             '303132333435363738393a3b3c3d3e3f' +\n             '404142434445464748494a4b4c4d4e4f' +\n             '505152535455565758595a5b5c5d5e5f' +\n             '606162636465666768696a6b6c6d6e6f' +\n             '707172737475767778797a7b7c7d7e7f' +\n             '808182838485868788898a8b8c8d8e8f' +\n             '909192939495969798999a9b9c9d9e9f' +\n             'a0a1a2a3a4a5a6a7a8a9aaabacadaeaf' +\n             'b0b1b2b3b4b5b6b7b8b9babbbcbdbebf' +\n             'c0c1c2c3c4c5c6c7c8c9cacbcccdcecf' +\n             'd0d1d2d3d4d5d6d7d8d9dadbdcdddedf' +\n             'e0e1e2e3e4e5e6e7e8e9eaebecedeeef' +\n             'f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff');\n\n// console.log('Create buffer from hex string');\nvar hexb2 = new Buffer(hexStr, 'hex');\nfor (var i = 0; i < 256; i++) {\n  assert.equal(hexb2[i], hexb[i]);\n}\n\n// test an invalid slice end.\n// console.log('Try to slice off the end of the buffer');\nvar b = new Buffer([1, 2, 3, 4, 5]);\nvar b2 = b.toString('hex', 1, 10000);\nvar b3 = b.toString('hex', 1, 5);\nvar b4 = b.toString('hex', 1);\nassert.equal(b2, b3);\nassert.equal(b2, b4);\n\n\nfunction buildBuffer(data) {\n  if (Array.isArray(data)) {\n    var buffer = new Buffer(data.length);\n    data.forEach(function(v, k) {\n      buffer[k] = v;\n    });\n    return buffer;\n  }\n  return null;\n}\n\nvar x = buildBuffer([0x81, 0xa3, 0x66, 0x6f, 0x6f, 0xa3, 0x62, 0x61, 0x72]);\n\n// console.log(x.inspect());\nassert.equal('<Buffer 81 a3 66 6f 6f a3 62 61 72>', x.inspect());\n\nvar z = x.slice(4);\n// console.log(z.inspect());\n// console.log(z.length);\nassert.equal(5, z.length);\nassert.equal(0x6f, z[0]);\nassert.equal(0xa3, z[1]);\nassert.equal(0x62, z[2]);\nassert.equal(0x61, z[3]);\nassert.equal(0x72, z[4]);\n\nvar z = x.slice(0);\n// console.log(z.inspect());\n// console.log(z.length);\nassert.equal(z.length, x.length);\n\nvar z = x.slice(0, 4);\n// console.log(z.inspect());\n// console.log(z.length);\nassert.equal(4, z.length);\nassert.equal(0x81, z[0]);\nassert.equal(0xa3, z[1]);\n\nvar z = x.slice(0, 9);\n// console.log(z.inspect());\n// console.log(z.length);\nassert.equal(9, z.length);\n\nvar z = x.slice(1, 4);\n// console.log(z.inspect());\n// console.log(z.length);\nassert.equal(3, z.length);\nassert.equal(0xa3, z[0]);\n\nvar z = x.slice(2, 4);\n// console.log(z.inspect());\n// console.log(z.length);\nassert.equal(2, z.length);\nassert.equal(0x66, z[0]);\nassert.equal(0x6f, z[1]);\n\nassert.equal(0, Buffer('hello').slice(0, 0).length);\n\n['ucs2', 'ucs-2', 'utf16le', 'utf-16le'].forEach(function(encoding) {\n  var b = new Buffer(10);\n  b.write('あいうえお', encoding);\n  assert.equal(b.toString(encoding), 'あいうえお');\n});\n\n// Binary encoding should write only one byte per character.\nvar b = Buffer([0xde, 0xad, 0xbe, 0xef]);\nvar s = String.fromCharCode(0xffff);\nb.write(s, 0, 'binary');\nassert.equal(0xff, b[0]);\nassert.equal(0xad, b[1]);\nassert.equal(0xbe, b[2]);\nassert.equal(0xef, b[3]);\ns = String.fromCharCode(0xaaee);\nb.write(s, 0, 'binary');\nassert.equal(0xee, b[0]);\nassert.equal(0xad, b[1]);\nassert.equal(0xbe, b[2]);\nassert.equal(0xef, b[3]);\n\n// #1210 Test UTF-8 string includes null character\nvar buf = new Buffer('\\0');\nassert.equal(buf.length, 1);\nbuf = new Buffer('\\0\\0');\nassert.equal(buf.length, 2);\n\nbuf = new Buffer(2);\nvar written = buf.write(''); // 0byte\nassert.equal(written, 0);\nwritten = buf.write('\\0'); // 1byte (v8 adds null terminator)\nassert.equal(written, 1);\nwritten = buf.write('a\\0'); // 1byte * 2\nassert.equal(written, 2);\nwritten = buf.write('あ'); // 3bytes\nassert.equal(written, 0);\nwritten = buf.write('\\0あ'); // 1byte + 3bytes\nassert.equal(written, 1);\nwritten = buf.write('\\0\\0あ'); // 1byte * 2 + 3bytes\nassert.equal(written, 2);\n\nbuf = new Buffer(10);\nwritten = buf.write('あいう'); // 3bytes * 3 (v8 adds null terminator)\nassert.equal(written, 9);\nwritten = buf.write('あいう\\0'); // 3bytes * 3 + 1byte\nassert.equal(written, 10);\n\n// #243 Test write() with maxLength\nvar buf = new Buffer(4);\nbuf.fill(0xFF);\nvar written = buf.write('abcd', 1, 2, 'utf8');\n// console.log(buf);\nassert.equal(written, 2);\nassert.equal(buf[0], 0xFF);\nassert.equal(buf[1], 0x61);\nassert.equal(buf[2], 0x62);\nassert.equal(buf[3], 0xFF);\n\nbuf.fill(0xFF);\nwritten = buf.write('abcd', 1, 4);\n// console.log(buf);\nassert.equal(written, 3);\nassert.equal(buf[0], 0xFF);\nassert.equal(buf[1], 0x61);\nassert.equal(buf[2], 0x62);\nassert.equal(buf[3], 0x63);\n\nbuf.fill(0xFF);\nwritten = buf.write('abcd', 'utf8', 1, 2);  // legacy style\n// console.log(buf);\nassert.equal(written, 2);\nassert.equal(buf[0], 0xFF);\nassert.equal(buf[1], 0x61);\nassert.equal(buf[2], 0x62);\nassert.equal(buf[3], 0xFF);\n\nbuf.fill(0xFF);\nwritten = buf.write('abcdef', 1, 2, 'hex');\n// console.log(buf);\nassert.equal(written, 2);\nassert.equal(buf[0], 0xFF);\nassert.equal(buf[1], 0xAB);\nassert.equal(buf[2], 0xCD);\nassert.equal(buf[3], 0xFF);\n\n['ucs2', 'ucs-2', 'utf16le', 'utf-16le'].forEach(function(encoding) {\n  buf.fill(0xFF);\n  written = buf.write('abcd', 0, 2, encoding);\n//   console.log(buf);\n  assert.equal(written, 2);\n  assert.equal(buf[0], 0x61);\n  assert.equal(buf[1], 0x00);\n  assert.equal(buf[2], 0xFF);\n  assert.equal(buf[3], 0xFF);\n});\n\n// test offset returns are correct\nvar b = new Buffer(16);\nassert.equal(4, b.writeUInt32LE(0, 0));\nassert.equal(6, b.writeUInt16LE(0, 4));\nassert.equal(7, b.writeUInt8(0, 6));\nassert.equal(8, b.writeInt8(0, 7));\nassert.equal(16, b.writeDoubleLE(0, 8));\n\n// test unmatched surrogates not producing invalid utf8 output\n// ef bf bd = utf-8 representation of unicode replacement character\n// see https://codereview.chromium.org/121173009/\nbuf = new Buffer('ab\\ud800cd', 'utf8');\nassert.equal(buf[0], 0x61);\nassert.equal(buf[1], 0x62);\nassert.equal(buf[2], 0xef);\nassert.equal(buf[3], 0xbf);\nassert.equal(buf[4], 0xbd);\nassert.equal(buf[5], 0x63);\nassert.equal(buf[6], 0x64);\n\n// test for buffer overrun\nbuf = new Buffer([0, 0, 0, 0, 0]); // length: 5\nvar sub = buf.slice(0, 4);         // length: 4\nwritten = sub.write('12345', 'binary');\nassert.equal(written, 4);\nassert.equal(buf[4], 0);\n\n// Check for fractional length args, junk length args, etc.\n// https://github.com/joyent/node/issues/1758\n\n// Call .fill() first, stops valgrind warning about uninitialized memory reads.\nBuffer(3.3).fill().toString(); // throws bad argument error in commit 43cb4ec\nassert.equal(Buffer(-1).length, 0);\nassert.equal(Buffer(NaN).length, 0);\nassert.equal(Buffer(3.3).length, 3);\nassert.equal(Buffer({length: 3.3}).length, 3);\nassert.equal(Buffer({length: 'BAM'}).length, 0);\n\n// Make sure that strings are not coerced to numbers.\nassert.equal(Buffer('99').length, 2);\nassert.equal(Buffer('13.37').length, 5);\n\n// Ensure that the length argument is respected.\n'ascii utf8 hex base64 binary'.split(' ').forEach(function(enc) {\n  assert.equal(Buffer(1).write('aaaaaa', 0, 1, enc), 1);\n});\n\n// Regression test, guard against buffer overrun in the base64 decoder.\nvar a = Buffer(3);\nvar b = Buffer('xxx');\na.write('aaaaaaaa', 'base64');\nassert.equal(b.toString(), 'xxx');\n\n// issue GH-3416\nBuffer(Buffer(0), 0, 0);\n\n[ 'hex',\n  'utf8',\n  'utf-8',\n  'ascii',\n  'binary',\n  'base64',\n  'ucs2',\n  'ucs-2',\n  'utf16le',\n  'utf-16le' ].forEach(function(enc) {\n    assert.equal(Buffer.isEncoding(enc), true);\n  });\n\n[ 'utf9',\n  'utf-7',\n  'Unicode-FTW',\n  'new gnu gun'  ].forEach(function(enc) {\n    assert.equal(Buffer.isEncoding(enc), false);\n  });\n\n\n// GH-5110\n(function() {\n  var buffer = new Buffer('test'),\n      string = JSON.stringify(buffer);\n\n  assert.equal(string, '{\"type\":\"Buffer\",\"data\":[116,101,115,116]}');\n\n  assert.deepEqual(buffer, JSON.parse(string, function(key, value) {\n    return value && value.type === 'Buffer'\n      ? new Buffer(value.data)\n      : value;\n  }));\n})();\n\n// issue GH-7849\n(function() {\n  var buf = new Buffer('test');\n  var json = JSON.stringify(buf);\n  var obj = JSON.parse(json);\n  var copy = new Buffer(obj);\n\n  assert(buf.equals(copy));\n})();\n\n// issue GH-4331\nassert.throws(function() {\n  new Buffer(0xFFFFFFFF);\n}, RangeError);\nassert.throws(function() {\n  new Buffer(0xFFFFFFFFF);\n}, RangeError);\n\n\n// attempt to overflow buffers, similar to previous bug in array buffers\nassert.throws(function() {\n  var buf = new Buffer(8);\n  buf.readFloatLE(0xffffffff);\n}, RangeError);\n\nassert.throws(function() {\n  var buf = new Buffer(8);\n  buf.writeFloatLE(0.0, 0xffffffff);\n}, RangeError);\n\nassert.throws(function() {\n  var buf = new Buffer(8);\n  buf.readFloatLE(0xffffffff);\n}, RangeError);\n\nassert.throws(function() {\n  var buf = new Buffer(8);\n  buf.writeFloatLE(0.0, 0xffffffff);\n}, RangeError);\n\n\n// ensure negative values can't get past offset\nassert.throws(function() {\n  var buf = new Buffer(8);\n  buf.readFloatLE(-1);\n}, RangeError);\n\nassert.throws(function() {\n  var buf = new Buffer(8);\n  buf.writeFloatLE(0.0, -1);\n}, RangeError);\n\nassert.throws(function() {\n  var buf = new Buffer(8);\n  buf.readFloatLE(-1);\n}, RangeError);\n\nassert.throws(function() {\n  var buf = new Buffer(8);\n  buf.writeFloatLE(0.0, -1);\n}, RangeError);\n\n// offset checks\nvar buf = new Buffer(0);\n\nassert.throws(function() { buf.readUInt8(0); }, RangeError);\nassert.throws(function() { buf.readInt8(0); }, RangeError);\n\nvar buf = new Buffer([0xFF]);\n\nassert.equal(buf.readUInt8(0), 255);\nassert.equal(buf.readInt8(0), -1);\n\n[16, 32].forEach(function(bits) {\n  var buf = new Buffer(bits / 8 - 1);\n\n  assert.throws(function() { buf['readUInt' + bits + 'BE'](0); },\n                RangeError,\n                'readUInt' + bits + 'BE');\n\n  assert.throws(function() { buf['readUInt' + bits + 'LE'](0); },\n                RangeError,\n                'readUInt' + bits + 'LE');\n\n  assert.throws(function() { buf['readInt' + bits + 'BE'](0); },\n                RangeError,\n                'readInt' + bits + 'BE()');\n\n  assert.throws(function() { buf['readInt' + bits + 'LE'](0); },\n                RangeError,\n                'readInt' + bits + 'LE()');\n});\n\n[16, 32].forEach(function(bits) {\n  var buf = new Buffer([0xFF, 0xFF, 0xFF, 0xFF]);\n\n  assert.equal(buf['readUInt' + bits + 'BE'](0),\n                (0xFFFFFFFF >>> (32 - bits)));\n\n  assert.equal(buf['readUInt' + bits + 'LE'](0),\n                (0xFFFFFFFF >>> (32 - bits)));\n\n  assert.equal(buf['readInt' + bits + 'BE'](0),\n                (0xFFFFFFFF >> (32 - bits)));\n\n  assert.equal(buf['readInt' + bits + 'LE'](0),\n                (0xFFFFFFFF >> (32 - bits)));\n});\n\n// test for common read(U)IntLE/BE\n(function() {\n  var buf = new Buffer([0x01, 0x02, 0x03, 0x04, 0x05, 0x06]);\n\n  assert.equal(buf.readUIntLE(0, 1), 0x01);\n  assert.equal(buf.readUIntBE(0, 1), 0x01);\n  assert.equal(buf.readUIntLE(0, 3), 0x030201);\n  assert.equal(buf.readUIntBE(0, 3), 0x010203);\n  assert.equal(buf.readUIntLE(0, 5), 0x0504030201);\n  assert.equal(buf.readUIntBE(0, 5), 0x0102030405);\n  assert.equal(buf.readUIntLE(0, 6), 0x060504030201);\n  assert.equal(buf.readUIntBE(0, 6), 0x010203040506);\n  assert.equal(buf.readIntLE(0, 1), 0x01);\n  assert.equal(buf.readIntBE(0, 1), 0x01);\n  assert.equal(buf.readIntLE(0, 3), 0x030201);\n  assert.equal(buf.readIntBE(0, 3), 0x010203);\n  assert.equal(buf.readIntLE(0, 5), 0x0504030201);\n  assert.equal(buf.readIntBE(0, 5), 0x0102030405);\n  assert.equal(buf.readIntLE(0, 6), 0x060504030201);\n  assert.equal(buf.readIntBE(0, 6), 0x010203040506);\n})();\n\n// test for common write(U)IntLE/BE\n(function() {\n  var buf = new Buffer(3);\n  buf.writeUIntLE(0x123456, 0, 3);\n  assert.deepEqual(buf.toJSON().data, [0x56, 0x34, 0x12]);\n  assert.equal(buf.readUIntLE(0, 3), 0x123456);\n\n  buf = new Buffer(3);\n  buf.writeUIntBE(0x123456, 0, 3);\n  assert.deepEqual(buf.toJSON().data, [0x12, 0x34, 0x56]);\n  assert.equal(buf.readUIntBE(0, 3), 0x123456);\n\n  buf = new Buffer(3);\n  buf.writeIntLE(0x123456, 0, 3);\n  assert.deepEqual(buf.toJSON().data, [0x56, 0x34, 0x12]);\n  assert.equal(buf.readIntLE(0, 3), 0x123456);\n\n  buf = new Buffer(3);\n  buf.writeIntBE(0x123456, 0, 3);\n  assert.deepEqual(buf.toJSON().data, [0x12, 0x34, 0x56]);\n  assert.equal(buf.readIntBE(0, 3), 0x123456);\n\n  buf = new Buffer(3);\n  buf.writeIntLE(-0x123456, 0, 3);\n  assert.deepEqual(buf.toJSON().data, [0xaa, 0xcb, 0xed]);\n  assert.equal(buf.readIntLE(0, 3), -0x123456);\n\n  buf = new Buffer(3);\n  buf.writeIntBE(-0x123456, 0, 3);\n  assert.deepEqual(buf.toJSON().data, [0xed, 0xcb, 0xaa]);\n  assert.equal(buf.readIntBE(0, 3), -0x123456);\n\n  buf = new Buffer(5);\n  buf.writeUIntLE(0x1234567890, 0, 5);\n  assert.deepEqual(buf.toJSON().data, [0x90, 0x78, 0x56, 0x34, 0x12]);\n  assert.equal(buf.readUIntLE(0, 5), 0x1234567890);\n\n  buf = new Buffer(5);\n  buf.writeUIntBE(0x1234567890, 0, 5);\n  assert.deepEqual(buf.toJSON().data, [0x12, 0x34, 0x56, 0x78, 0x90]);\n  assert.equal(buf.readUIntBE(0, 5), 0x1234567890);\n\n  buf = new Buffer(5);\n  buf.writeIntLE(0x1234567890, 0, 5);\n  assert.deepEqual(buf.toJSON().data, [0x90, 0x78, 0x56, 0x34, 0x12]);\n  assert.equal(buf.readIntLE(0, 5), 0x1234567890);\n\n  buf = new Buffer(5);\n  buf.writeIntBE(0x1234567890, 0, 5);\n  assert.deepEqual(buf.toJSON().data, [0x12, 0x34, 0x56, 0x78, 0x90]);\n  assert.equal(buf.readIntBE(0, 5), 0x1234567890);\n\n  buf = new Buffer(5);\n  buf.writeIntLE(-0x1234567890, 0, 5);\n  assert.deepEqual(buf.toJSON().data, [0x70, 0x87, 0xa9, 0xcb, 0xed]);\n  assert.equal(buf.readIntLE(0, 5), -0x1234567890);\n\n  buf = new Buffer(5);\n  buf.writeIntBE(-0x1234567890, 0, 5);\n  assert.deepEqual(buf.toJSON().data, [0xed, 0xcb, 0xa9, 0x87, 0x70]);\n  assert.equal(buf.readIntBE(0, 5), -0x1234567890);\n})();\n\n// test Buffer slice\n(function() {\n  var buf = new Buffer('0123456789');\n  assert.equal(buf.slice(-10, 10), '0123456789');\n  assert.equal(buf.slice(-20, 10), '0123456789');\n  assert.equal(buf.slice(-20, -10), '');\n  assert.equal(buf.slice(0, -1), '012345678');\n  assert.equal(buf.slice(2, -2), '234567');\n  assert.equal(buf.slice(0, 65536), '0123456789');\n  assert.equal(buf.slice(65536, 0), '');\n  for (var i = 0, s = buf.toString(); i < buf.length; ++i) {\n    assert.equal(buf.slice(-i), s.slice(-i));\n    assert.equal(buf.slice(0, -i), s.slice(0, -i));\n  }\n  // try to slice a zero length Buffer\n  // see https://github.com/joyent/node/issues/5881\n  SlowBuffer(0).slice(0, 1);\n})();\n\n// Regression test for #5482: should throw but not assert in C++ land.\nassert.throws(function() {\n  Buffer('', 'buffer');\n}, TypeError);\n\n// Regression test for #6111. Constructing a buffer from another buffer\n// should a) work, and b) not corrupt the source buffer.\n(function() {\n  var a = [0];\n  for (var i = 0; i < 7; ++i) a = a.concat(a);\n  a = a.map(function(_, i) { return i; });\n  var b = Buffer(a);\n  var c = Buffer(b);\n  assert.equal(b.length, a.length);\n  assert.equal(c.length, a.length);\n  for (var i = 0, k = a.length; i < k; ++i) {\n    assert.equal(a[i], i);\n    assert.equal(b[i], i);\n    assert.equal(c[i], i);\n  }\n})();\n\n\nassert.throws(function() {\n  new Buffer((-1 >>> 0) + 1);\n}, RangeError);\n\nassert.throws(function() {\n  new SlowBuffer((-1 >>> 0) + 1);\n}, RangeError);\n\nif (common.hasCrypto) {\n  // Test truncation after decode\n  // var crypto = require('crypto');\n\n  var b1 = new Buffer('YW55=======', 'base64');\n  var b2 = new Buffer('YW55', 'base64');\n\n  assert.equal(\n    1 /*crypto.createHash('sha1').update(b1).digest('hex')*/,\n    1 /*crypto.createHash('sha1').update(b2).digest('hex')*/\n  );\n} else {\n//   console.log('1..0 # Skipped: missing crypto');\n}\n\n// Test Compare\nvar b = new Buffer(1).fill('a');\nvar c = new Buffer(1).fill('c');\nvar d = new Buffer(2).fill('aa');\n\nassert.equal(b.compare(c), -1);\nassert.equal(c.compare(d), 1);\nassert.equal(d.compare(b), 1);\nassert.equal(b.compare(d), -1);\nassert.equal(b.compare(b), 0);\n\nassert.equal(Buffer.compare(b, c), -1);\nassert.equal(Buffer.compare(c, d), 1);\nassert.equal(Buffer.compare(d, b), 1);\nassert.equal(Buffer.compare(b, d), -1);\nassert.equal(Buffer.compare(c, c), 0);\n\n\nassert.throws(function() {\n  var b = new Buffer(1);\n  Buffer.compare(b, 'abc');\n});\n\nassert.throws(function() {\n  var b = new Buffer(1);\n  Buffer.compare('abc', b);\n});\n\nassert.throws(function() {\n  var b = new Buffer(1);\n  b.compare('abc');\n});\n\n// Test Equals\nvar b = new Buffer(5).fill('abcdf');\nvar c = new Buffer(5).fill('abcdf');\nvar d = new Buffer(5).fill('abcde');\nvar e = new Buffer(6).fill('abcdef');\n\nassert.ok(b.equals(c));\nassert.ok(!c.equals(d));\nassert.ok(!d.equals(e));\nassert.ok(d.equals(d));\n\nassert.throws(function() {\n  var b = new Buffer(1);\n  b.equals('abc');\n});\n\n// Regression test for https://github.com/nodejs/io.js/issues/649.\nassert.throws(function() { Buffer(1422561062959).toString('utf8'); });\n\nvar ps = Buffer.poolSize;\nBuffer.poolSize = 0;\nassert.equal(Buffer(1).parent, undefined);\nBuffer.poolSize = ps;\n\n// Test Buffer.copy() segfault\nassert.throws(function() {\n  Buffer(10).copy();\n});\n\nassert.throws(function() {\n  new Buffer();\n}, /must start with number, buffer, array or string/);\n\nassert.throws(function() {\n  new Buffer(null);\n}, /must start with number, buffer, array or string/);\n\n"]}