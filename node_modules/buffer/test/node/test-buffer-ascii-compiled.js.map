{"version":3,"sources":["test-buffer-ascii.js"],"names":[],"mappings":"AAAA;;AACA,IAAI,QAAQ,GAAR,CAAY,WAAhB,EAA6B,OAAO,mBAAP,GAA6B,KAA7B;AAC7B,IAAI,SAAS,QAAQ,QAAR,EAAkB,MAA/B;AACA,IAAI,SAAS,EAAb;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;;AAEA;AACA;AACA,OAAO,KAAP,CAAa,OAAO,QAAP,EAAiB,QAAjB,CAA0B,OAA1B,CAAb,EAAiD,UAAjD;;AAEA;AACA,IAAI,QAAQ,uDACA,uBADZ;;AAGA,IAAI,WAAW,mDACA,mDADA,GAEA,eAFf;;AAIA,IAAI,MAAM,OAAO,KAAP,CAAV;;AAEA,KAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,SAAS,MAA7B,EAAqC,EAAE,CAAvC,EAA0C;AACxC,SAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,CAAV,EAAa,QAAb,CAAsB,OAAtB,CAAb,EAA6C,SAAS,KAAT,CAAe,CAAf,CAA7C;;AAEA;AACA,MAAI,MAAM,UAAN,CAAiB,CAAjB,IAAsB,KAA1B,EAAiC,EAAE,CAAF;AACjC,MAAI,MAAM,UAAN,CAAiB,CAAjB,IAAsB,GAA1B,EAA+B,EAAE,CAAF;AAChC","file":"test-buffer-ascii-compiled.js","sourcesContent":["'use strict';\nif (process.env.OBJECT_IMPL) global.TYPED_ARRAY_SUPPORT = false;\nvar Buffer = require('../../').Buffer;\nvar common = {};\nvar assert = require('assert');\n\n// ASCII conversion in node.js simply masks off the high bits,\n// it doesn't do transliteration.\nassert.equal(Buffer('hérité').toString('ascii'), 'hC)ritC)');\n\n// 71 characters, 78 bytes. The ’ character is a triple-byte sequence.\nvar input = 'C’est, graphiquement, la réunion d’un accent aigu ' +\n            'et d’un accent grave.';\n\nvar expected = 'Cb\\u0000\\u0019est, graphiquement, la rC)union ' +\n               'db\\u0000\\u0019un accent aigu et db\\u0000\\u0019un ' +\n               'accent grave.';\n\nvar buf = Buffer(input);\n\nfor (var i = 0; i < expected.length; ++i) {\n  assert.equal(buf.slice(i).toString('ascii'), expected.slice(i));\n\n  // Skip remainder of multi-byte sequence.\n  if (input.charCodeAt(i) > 65535) ++i;\n  if (input.charCodeAt(i) > 127) ++i;\n}\n\n"]}